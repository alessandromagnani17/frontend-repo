{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, createTextVNode as _createTextVNode, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"modal\"\n};\nconst _hoisted_3 = {\n  class: \"modal-content\"\n};\nconst _hoisted_4 = [\"value\"];\nconst _hoisted_5 = [\"min\"];\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = {\n  class: \"calendar\"\n};\nconst _hoisted_8 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_9 = {\n  class: \"calendar-header-days\"\n};\nconst _hoisted_10 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = {\n  class: \"date\"\n};\nconst _hoisted_13 = {\n  class: \"icon-row operations\"\n};\nconst _hoisted_14 = [\"src\"];\nconst _hoisted_15 = {\n  class: \"icon-row radiographs\"\n};\nconst _hoisted_16 = [\"src\"];\nconst _hoisted_17 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_18 = {\n  key: 0\n};\nconst _hoisted_19 = [\"onClick\"];\nconst _hoisted_20 = {\n  key: 1\n};\nconst _hoisted_21 = {\n  key: 0\n};\nconst _hoisted_22 = {\n  class: \"calendar\"\n};\nconst _hoisted_23 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_24 = {\n  class: \"calendar-header-days\"\n};\nconst _hoisted_25 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_26 = [\"onClick\"];\nconst _hoisted_27 = {\n  class: \"date\"\n};\nconst _hoisted_28 = {\n  class: \"icon-row operations\"\n};\nconst _hoisted_29 = [\"src\"];\nconst _hoisted_30 = {\n  class: \"icon-row radiographs\"\n};\nconst _hoisted_31 = [\"src\"];\nconst _hoisted_32 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_33 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[22] || (_cache[22] = _createElementVNode(\"h1\", null, \"Calendario Attività\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.openScheduleModal && $options.openScheduleModal(...args)),\n    class: \"btn btn-primary\"\n  }, \" Pianifica Operazione \"), _createCommentVNode(\" Modale per inserire i dettagli dell'operazione \"), $data.showModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[12] || (_cache[12] = _createElementVNode(\"h2\", null, \"Pianifica una nuova operazione\", -1 /* HOISTED */)), _createCommentVNode(\" Menu a tendina per selezionare un paziente \"), _cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    for: \"patientSelect\"\n  }, \"Seleziona un paziente:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedPatientId = $event),\n    id: \"patientSelect\",\n    class: \"form-select\"\n  }, [_cache[11] || (_cache[11] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"Seleziona un paziente\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.patients, patient => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: patient.userId,\n      value: patient.userId\n    }, _toDisplayString(patient.name) + \" \" + _toDisplayString(patient.family_name), 9 /* TEXT, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedPatientId]]), _cache[14] || (_cache[14] = _createElementVNode(\"label\", {\n    for: \"operationDate\"\n  }, \"Data dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.operationDate = $event),\n    id: \"operationDate\",\n    min: $data.minDate\n  }, null, 8 /* PROPS */, _hoisted_5), [[_vModelText, $data.operationDate]]), _cache[15] || (_cache[15] = _createElementVNode(\"label\", {\n    for: \"operationTime\"\n  }, \"Ora dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"time\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.operationTime = $event),\n    id: \"operationTime\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.operationTime]]), _cache[16] || (_cache[16] = _createElementVNode(\"label\", {\n    for: \"description\"\n  }, \"Descrizione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.description = $event),\n    id: \"description\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.description]]), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.scheduleOperation && $options.scheduleOperation(...args)),\n    class: \"btn btn-success\"\n  }, \" Salva \"), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.closeScheduleModal && $options.closeScheduleModal(...args)),\n    class: \"btn btn-secondary\"\n  }, \" Annulla \")])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Verifica se l'utente è un paziente o un dottore \"), $data.isPatient ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createCommentVNode(\" Aggiungi i giorni della settimana \"), _createElementVNode(\"div\", _hoisted_9, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.daysOfWeek, (day, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"calendar-day-name\"\n    }, _toDisplayString(day), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => $options.showDayDetails(day)\n    }, [_createCommentVNode(\" Data \"), _createElementVNode(\"div\", _hoisted_12, _toDisplayString(day.date), 1 /* TEXT */), _createCommentVNode(\" Icone Operazioni \"), _createElementVNode(\"div\", _hoisted_13, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(day.operations.length, n => {\n      return _openBlock(), _createElementBlock(\"img\", {\n        key: 'operation-' + n + '-' + day.date,\n        src: $data.operationIcon,\n        alt: \"Operazione\",\n        class: \"icon\"\n      }, null, 8 /* PROPS */, _hoisted_14);\n    }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Icone Radiografie \"), _createElementVNode(\"div\", _hoisted_15, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(day.radiographs.length, n => {\n      return _openBlock(), _createElementBlock(\"img\", {\n        key: 'radiograph-' + n + '-' + day.date,\n        src: $data.radiographIcon,\n        alt: \"Radiografia\",\n        class: \"icon\"\n      }, null, 8 /* PROPS */, _hoisted_16);\n    }), 128 /* KEYED_FRAGMENT */))])], 8 /* PROPS */, _hoisted_11);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[17] || (_cache[17] = _createElementVNode(\"strong\", null, \"Paziente:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.selectedPatient.name) + \" \" + _toDisplayString($data.selectedPatient.family_name), 1 /* TEXT */)]), $data.selectedDay.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_cache[20] || (_cache[20] = _createElementVNode(\"h3\", null, \"Radiografie caricate:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.name), 1 /* TEXT */), _cache[18] || (_cache[18] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString(radiograph.date), 1 /* TEXT */), _cache[19] || (_cache[19] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_19)]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_20, _cache[21] || (_cache[21] = [_createElementVNode(\"p\", null, \"Nessuna radiografia caricata per questa data.\", -1 /* HOISTED */)])))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti \"), _createElementVNode(\"div\", null, [$data.isDoctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [_createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"div\", _hoisted_23, [_createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createCommentVNode(\" Aggiungi i giorni della settimana \"), _createElementVNode(\"div\", _hoisted_24, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.daysOfWeek, (day, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"calendar-day-name\"\n    }, _toDisplayString(day), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_25, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => $options.showDayDetails(day)\n    }, [_createCommentVNode(\" Data \"), _createElementVNode(\"div\", _hoisted_27, _toDisplayString(day.date), 1 /* TEXT */), _createCommentVNode(\" Icone Operazioni \"), _createElementVNode(\"div\", _hoisted_28, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(day.operations.length, n => {\n      return _openBlock(), _createElementBlock(\"img\", {\n        key: 'operation-' + n + '-' + day.date,\n        src: $data.operationIcon,\n        alt: \"Operazione\",\n        class: \"icon\"\n      }, null, 8 /* PROPS */, _hoisted_29);\n    }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Icone Radiografie \"), _createElementVNode(\"div\", _hoisted_30, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(day.radiographs.length, n => {\n      return _openBlock(), _createElementBlock(\"img\", {\n        key: 'radiograph-' + n + '-' + day.date,\n        src: $data.radiographIcon,\n        alt: \"Radiografia\",\n        class: \"icon\"\n      }, null, 8 /* PROPS */, _hoisted_31);\n    }), 128 /* KEYED_FRAGMENT */))])], 8 /* PROPS */, _hoisted_26);\n  }), 128 /* KEYED_FRAGMENT */))])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_32, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.patientName) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(radiograph.name), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_33)]);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","openScheduleModal","_createCommentVNode","$data","showModal","_hoisted_2","_hoisted_3","for","$event","selectedPatientId","id","value","disabled","_Fragment","_renderList","patients","patient","userId","name","_toDisplayString","family_name","_hoisted_4","type","operationDate","min","minDate","_hoisted_5","operationTime","description","scheduleOperation","closeScheduleModal","isPatient","_hoisted_6","_hoisted_7","_hoisted_8","changeMonth","monthNames","month","year","_hoisted_9","daysOfWeek","day","index","_hoisted_10","daysInMonth","date","showDayDetails","_hoisted_12","_hoisted_13","operations","length","n","src","operationIcon","alt","_hoisted_14","_hoisted_15","radiographs","radiographIcon","_hoisted_16","_hoisted_11","_createVNode","_Transition","onBeforeEnter","beforeEnter","onEnter","enter","onLeave","leave","default","_withCtx","selectedDay","_hoisted_17","_createTextVNode","selectedPatient","_hoisted_18","radiograph","enlargeRadiograph","url","_hoisted_19","_hoisted_20","_","isDoctor","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_26","_hoisted_32","patientName","_hoisted_33"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n    <button @click=\"openScheduleModal\" class=\"btn btn-primary\">\n      Pianifica Operazione\n    </button>\n\n    <!-- Modale per inserire i dettagli dell'operazione -->\n    <div v-if=\"showModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h2>Pianifica una nuova operazione</h2>\n        <!-- Menu a tendina per selezionare un paziente -->\n        <label for=\"patientSelect\">Seleziona un paziente:</label>\n        <select\n          v-model=\"selectedPatientId\"\n          id=\"patientSelect\"\n          class=\"form-select\"\n        >\n          <option value=\"\" disabled>Seleziona un paziente</option>\n          <option\n            v-for=\"patient in patients\"\n            :key=\"patient.userId\"\n            :value=\"patient.userId\"\n          >\n            {{ patient.name }} {{ patient.family_name }}\n          </option>\n        </select>\n\n        <label for=\"operationDate\">Data dell'operazione:</label>\n        <input\n          type=\"date\"\n          v-model=\"operationDate\"\n          id=\"operationDate\"\n          :min=\"minDate\"\n        />\n\n        <label for=\"operationTime\">Ora dell'operazione:</label>\n        <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\n\n        <label for=\"description\">Descrizione:</label>\n        <textarea v-model=\"description\" id=\"description\"></textarea>\n\n        <button @click=\"scheduleOperation\" class=\"btn btn-success\">\n          Salva\n        </button>\n        <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\n          Annulla\n        </button>\n      </div>\n    </div>\n    <!-- Verifica se l'utente è un paziente o un dottore -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <!-- Aggiungi i giorni della settimana -->\n        <div class=\"calendar-header-days\">\n          <div\n            v-for=\"(day, index) in daysOfWeek\"\n            :key=\"index\"\n            class=\"calendar-day-name\"\n          >\n            {{ day }}\n          </div>\n        </div>\n\n        <div class=\"calendar-grid\">\n          <div\n            v-for=\"day in daysInMonth\"\n            :key=\"day.date\"\n            class=\"calendar-day\"\n            @click=\"showDayDetails(day)\"\n          >\n            <!-- Data -->\n            <div class=\"date\">{{ day.date }}</div>\n\n            <!-- Icone Operazioni -->\n            <div class=\"icon-row operations\">\n              <img\n                v-for=\"n in day.operations.length\"\n                :key=\"'operation-' + n + '-' + day.date\"\n                :src=\"operationIcon\"\n                alt=\"Operazione\"\n                class=\"icon\"\n              />\n            </div>\n\n            <!-- Icone Radiografie -->\n            <div class=\"icon-row radiographs\">\n              <img\n                v-for=\"n in day.radiographs.length\"\n                :key=\"'radiograph-' + n + '-' + day.date\"\n                :src=\"radiographIcon\"\n                alt=\"Radiografia\"\n                class=\"icon\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <p>\n            <strong>Paziente:</strong> {{ selectedPatient.name }}\n            {{ selectedPatient.family_name }}\n          </p>\n          <div v-if=\"selectedDay.radiographs.length > 0\">\n            <h3>Radiografie caricate:</h3>\n            <ul>\n              <li\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <strong>{{ radiograph.name }}</strong\n                ><br />\n                <span>{{ radiograph.date }}</span\n                ><br />\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </li>\n            </ul>\n          </div>\n          <div v-else>\n            <p>Nessuna radiografia caricata per questa data.</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n\n    <!-- Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti -->\n    <div v-else>\n      <div v-if=\"isDoctor\">\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"changeMonth(-1)\">&#8249;</button>\n            <span>{{ monthNames[month] }} {{ year }}</span>\n            <button @click=\"changeMonth(1)\">&#8250;</button>\n          </div>\n\n          <!-- Aggiungi i giorni della settimana -->\n          <div class=\"calendar-header-days\">\n            <div\n              v-for=\"(day, index) in daysOfWeek\"\n              :key=\"index\"\n              class=\"calendar-day-name\"\n            >\n              {{ day }}\n            </div>\n          </div>\n\n          <div class=\"calendar-grid\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"day.date\"\n              class=\"calendar-day\"\n              @click=\"showDayDetails(day)\"\n            >\n              <!-- Data -->\n              <div class=\"date\">{{ day.date }}</div>\n\n              <!-- Icone Operazioni -->\n              <div class=\"icon-row operations\">\n                <img\n                  v-for=\"n in day.operations.length\"\n                  :key=\"'operation-' + n + '-' + day.date\"\n                  :src=\"operationIcon\"\n                  alt=\"Operazione\"\n                  class=\"icon\"\n                />\n              </div>\n\n              <!-- Icone Radiografie -->\n              <div class=\"icon-row radiographs\">\n                <img\n                  v-for=\"n in day.radiographs.length\"\n                  :key=\"'radiograph-' + n + '-' + day.date\"\n                  :src=\"radiographIcon\"\n                  alt=\"Radiografia\"\n                  class=\"icon\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <div\n            v-for=\"radiograph in selectedDay.radiographs\"\n            :key=\"radiograph.name\"\n          >\n            <p>\n              <strong>{{ radiograph.patientName }}:</strong>\n              {{ radiograph.name }}\n            </p>\n            <button @click=\"enlargeRadiograph(radiograph.url)\">\n              Visualizza Immagine\n            </button>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      operations: [],\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      currentDate: new Date(), // Data corrente\n      daysOfWeek: [\n        \"Lunedì\",\n        \"Martedì\",\n        \"Mercoledì\",\n        \"Giovedì\",\n        \"Venerdì\",\n        \"Sabato\",\n        \"Domenica\",\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      selectedPatient: null, // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [], // Pazienti associati al dottore\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\"),\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n      this.loadOperations();\n      this.refreshCalendar();\n    }\n  },\n  computed: {\n    weekDays() {\n      // Ottieni il primo giorno della settimana (Lunedì)\n      const startOfWeek = this.getStartOfWeek(this.currentDate);\n      let days = [];\n\n      // Aggiungi i giorni della settimana partendo dal lunedì\n      for (let i = 0; i < 7; i++) {\n        let currentDay = new Date(startOfWeek);\n        currentDay.setDate(startOfWeek.getDate() + i);\n        days.push(currentDay);\n      }\n\n      return days;\n    },\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      // Crea un array per tenere traccia delle radiografie per ogni giorno\n      const radiographsPerDay = {};\n\n      // Crea un array per tenere traccia delle operazioni per ogni giorno\n      const operationsPerDay = {};\n\n      if (this.isDoctor) {\n        console.log(\"DEBUG: Utente loggato come medico.\");\n        // Aggrega tutte le radiografie dei pazienti associati al dottore\n        this.patients.forEach((patient) => {\n          console.log(\n            `DEBUG: Elaborazione paziente: ${patient.name} ${patient.family_name}`\n          );\n          if (patient.radiographs) {\n            patient.radiographs.forEach((radiograph) => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n\n          // Debug per le operazioni dei pazienti\n          if (patient.operations) {\n            console.log(\n              `DEBUG: Operazioni del paziente ${patient.name} ${patient.family_name}:`,\n              patient.operations\n            );\n            patient.operations.forEach((operation) => {\n              // Conversione esplicita della data\n              if (!operation.operationDate) {\n                console.warn(\n                  `DEBUG: Operazione senza data trovata:`,\n                  operation\n                );\n                return; // Salta questa operazione\n              }\n\n              // Conversione della data con parsing robusto\n              const operationDate = this.parseISODate(operation.operationDate);\n              console.log(\n                `DEBUG: Data operazione convertita: ${operationDate}, Operazione:`,\n                operation\n              );\n\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}`,\n                });\n              } else {\n                console.warn(\n                  `DEBUG: Operazione scartata a causa di una data non valida:`,\n                  operation\n                );\n              }\n            });\n          }\n          console.log(\"DEBUG: daysInMonth\", this.daysInMonth);\n        });\n      } else {\n        console.log(\"DEBUG: Utente loggato come paziente.\");\n        // Se l'utente è un paziente, usa le proprie radiografie\n        this.radiographs.forEach((radiograph) => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push(radiograph);\n        });\n\n        // Debug per le operazioni del paziente\n        console.log(\"DEBUG: Operazioni del paziente:\", this.operations);\n        this.operations.forEach((operation) => {\n          if (!operation.operationDate) {\n            console.warn(\"DEBUG: Operazione senza data trovata:\", operation);\n            return; // Salta questa operazione\n          }\n\n          const operationDate = this.parseISODate(operation.operationDate);\n          console.log(\n            `DEBUG: Data operazione convertita: ${operationDate}, Operazione:`,\n            operation\n          );\n\n          if (operationDate !== \"Invalid Date\") {\n            if (!operationsPerDay[operationDate]) {\n              operationsPerDay[operationDate] = [];\n            }\n            operationsPerDay[operationDate].push(operation);\n          } else {\n            console.warn(\n              `DEBUG: Operazione scartata a causa di una data non valida:`,\n              operation\n            );\n          }\n        });\n      }\n\n      // Popola i giorni del mese\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i).toDateString();\n        const radiographsOnDay = radiographsPerDay[dayDate] || [];\n        const operationsOnDay = operationsPerDay[dayDate] || [];\n\n        // Debug per le operazioni aggregate per giorno\n        console.log(\n          `DEBUG: Giorno: ${dayDate}, Operazioni trovate:`,\n          operationsOnDay\n        );\n\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n        });\n      }\n\n      console.log(\"DEBUG: Struttura finale dei giorni:\", days);\n      return days;\n    },\n  },\n  methods: {\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (\n          !this.selectedPatientId ||\n          !this.operationDate ||\n          !this.operationTime ||\n          !this.description\n        ) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(\n          this.operationDate,\n          this.operationTime\n        );\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate, // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString(), // Timestamp di creazione\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\n          );\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\n          \"Errore durante la pianificazione dell'operazione:\",\n          error\n        );\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n    getStartOfWeek(date) {\n      // Calcola il lunedì della settimana\n      const day = date.getDay(),\n        diff = day == 0 ? -6 : 1 - day; // Se domenica, metti -6 per tornare al lunedì\n      const startOfWeek = new Date(date);\n      startOfWeek.setDate(date.getDate() + diff);\n      return startOfWeek;\n    },\n\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(\n          `DEBUG: Errore nella conversione della data ISO \"${isoString}\":`,\n          error\n        );\n        return \"Invalid Date\";\n      }\n    },\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n\n        // Carica le operazioni del paziente loggato\n        this.loadPatientOperations();\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n\n    // Modifica per caricare le radiografie dei pazienti\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie per ogni paziente\n          this.patients.forEach((patient) => {\n            this.loadRadiographs(patient.userId); // Carica le radiografie per ogni paziente\n            this.loadOperations(patient.userId);\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    async loadOperations(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/operations`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Log delle operazioni trovate\n          console.log(\n            `Operazioni trovate per il paziente con ID ${patientId}:`,\n            data\n          );\n\n          // Trova il paziente e aggiungi le operazioni al suo record\n          const patient = this.patients.find((p) => p.userId === patientId);\n          if (patient) {\n            patient.operations = data; // Aggiungi le operazioni al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    // Modifica per caricare le radiografie specifiche di un paziente\n    async loadRadiographs(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Trova il paziente e aggiungi le radiografie al suo record\n          const patient = this.patients.find((p) => p.userId === patientId);\n          if (patient) {\n            patient.radiographs = data; // Aggiungi le radiografie al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.calendar-header-days {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  background-color: #e0e0e0;\n}\n\n.calendar-day-name {\n  padding: 10px;\n  background-color: #ddd;\n  font-weight: bold;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.activity-icons {\n  display: flex;\n  flex-direction: column; /* Cambia la direzione per impilare le righe */\n  align-items: center;\n  gap: 10px; /* Spazio tra righe */\n  margin-top: 5px;\n}\n\n.icon-row {\n  display: flex;\n  justify-content: center;\n  gap: 2px; /* Spazio tra le icone nella stessa riga */\n}\n\n.operations {\n  margin-bottom: 5px; /* Aggiunge margine tra operazioni e radiografie */\n}\n\n.icon {\n  width: 10px;\n  height: 10px;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 0.7em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 20px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 0.7em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 400px;\n  text-align: center;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 10px;\n  text-align: left;\n}\n\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n}\n\n.btn {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}