{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"notifications-container\"\n};\nconst _hoisted_2 = {\n  class: \"notifications-header\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"badge badge-warning\"\n};\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = {\n  class: \"list-group\"\n};\nconst _hoisted_6 = {\n  class: \"notification-message\"\n};\nconst _hoisted_7 = {\n  class: \"notification-details\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"mark-read-btn-container\"\n};\nconst _hoisted_9 = [\"onClick\"];\nconst _hoisted_10 = {\n  class: \"notification-sent-at\"\n};\nconst _hoisted_11 = {\n  key: 1,\n  class: \"no-notifications\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", _hoisted_2, [_cache[0] || (_cache[0] = _createTextVNode(\" Notifiche \")), $data.unreadCount > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, _toDisplayString($data.unreadCount), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), $data.notifications.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"ul\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.notifications, (notification, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: _normalizeClass([\"list-group-item\", {\n        'notification-read': notification.isRead\n      }])\n    }, [_createCommentVNode(\" Messaggio della notifica \"), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"strong\", null, _toDisplayString(notification.message), 1 /* TEXT */)]), _createCommentVNode(\" Data e ora \"), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", null, [_createElementVNode(\"span\", null, \"Data: \" + _toDisplayString(notification.formattedDate), 1 /* TEXT */)]), _createElementVNode(\"div\", null, [_createElementVNode(\"span\", null, \"Ora: \" + _toDisplayString(notification.time), 1 /* TEXT */)])]), _createCommentVNode(\" Pulsante per segnare come letto (ora sopra \\\"Inviata:\\\") \"), !notification.isRead ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n      onClick: $event => $options.markAsRead(notification.id),\n      class: \"btn btn-sm btn-primary mark-read-btn\"\n    }, \" Segna come letta \", 8 /* PROPS */, _hoisted_9)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Data e ora di invio \"), _createElementVNode(\"div\", _hoisted_10, \" Inviata: \" + _toDisplayString(notification.relativeSentAt), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_11, _cache[1] || (_cache[1] = [_createElementVNode(\"p\", null, \"Non ci sono notifiche.\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createTextVNode","$data","unreadCount","_hoisted_3","_toDisplayString","_createCommentVNode","notifications","length","_hoisted_4","_hoisted_5","_Fragment","_renderList","notification","index","_normalizeClass","isRead","_hoisted_6","message","_hoisted_7","formattedDate","time","_hoisted_8","onClick","$event","$options","markAsRead","id","_hoisted_9","_hoisted_10","relativeSentAt","_hoisted_11","_cache"],"sources":["C:\\Users\\Utente\\Desktop\\osteoarthritis-project\\frontend\\src\\views\\UserNotifications.vue"],"sourcesContent":["<template>\r\n  <div class=\"notifications-container\">\r\n    <h2 class=\"notifications-header\">\r\n      Notifiche\r\n      <span v-if=\"unreadCount > 0\" class=\"badge badge-warning\">\r\n        {{ unreadCount }}\r\n      </span>\r\n    </h2>\r\n    <div v-if=\"notifications.length\">\r\n      <ul class=\"list-group\">\r\n        <li\r\n          v-for=\"(notification, index) in notifications\"\r\n          :key=\"index\"\r\n          class=\"list-group-item\"\r\n          :class=\"{ 'notification-read': notification.isRead }\"\r\n        >\r\n          <!-- Messaggio della notifica -->\r\n          <div class=\"notification-message\">\r\n            <strong>{{ notification.message }}</strong>\r\n          </div>\r\n\r\n          <!-- Data e ora -->\r\n          <div class=\"notification-details\">\r\n            <div>\r\n              <span>Data: {{ notification.formattedDate }}</span>\r\n            </div>\r\n            <div>\r\n              <span>Ora: {{ notification.time }}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Pulsante per segnare come letto (ora sopra \"Inviata:\") -->\r\n          <div class=\"mark-read-btn-container\" v-if=\"!notification.isRead\">\r\n            <button\r\n              @click=\"markAsRead(notification.id)\"\r\n              class=\"btn btn-sm btn-primary mark-read-btn\"\r\n            >\r\n              Segna come letta\r\n            </button>\r\n          </div>\r\n\r\n          <!-- Data e ora di invio -->\r\n          <div class=\"notification-sent-at\">\r\n            Inviata: {{ notification.relativeSentAt }}\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div v-else class=\"no-notifications\">\r\n      <p>Non ci sono notifiche.</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { format, parseISO } from \"date-fns\";\r\nimport { it } from \"date-fns/locale\"; // Importa la localizzazione italiana\r\nimport { formatDistanceToNow } from \"date-fns\";\r\nimport EventBus from \"../eventBus\"; // Importa il tuo EventBus\r\n\r\nexport default {\r\n  name: \"UserNotifications\",\r\n  data() {\r\n    return {\r\n      notifications: [], // Lista delle notifiche\r\n      unreadCount: 0, // Conteggio delle notifiche non lette\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.fetchNotifications();\r\n  },\r\n\r\n  methods: {\r\n    async fetchNotifications() {\r\n      try {\r\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n        const userId = userData.userId;\r\n\r\n        const response = await fetch(`/api/notifications?patientId=${userId}`);\r\n        if (!response.ok) {\r\n          throw new Error(\"Errore nel recupero delle notifiche\");\r\n        }\r\n\r\n        const data = await response.json();\r\n        if (Array.isArray(data.notifications)) {\r\n          // Ordina le notifiche dalla più recente alla più vecchia\r\n          this.notifications = data.notifications\r\n            .sort((a, b) => new Date(b.sentAt) - new Date(a.sentAt)) // Ordinamento in base a 'sentAt'\r\n            .map((notification) => ({\r\n              ...notification,\r\n              relativeSentAt: formatDistanceToNow(\r\n                new Date(notification.sentAt),\r\n                {\r\n                  addSuffix: true,\r\n                  locale: it, // Aggiunge la lingua italiana\r\n                }\r\n              ),\r\n              // Formattazione della data\r\n              formattedDate: format(\r\n                parseISO(notification.date),\r\n                \"d MMMM yyyy\",\r\n                {\r\n                  locale: it, // Imposta la lingua italiana per la data\r\n                }\r\n              ),\r\n            }));\r\n\r\n          // Calcola il numero di notifiche non lette\r\n          this.unreadCount = this.notifications.filter(\r\n            (notification) => !notification.isRead\r\n          ).length;\r\n\r\n          console.log(\"Numero di notifiche non lette = \", this.unreadCount);\r\n          // Emetti l'evento per aggiornare il conteggio delle notifiche non lette\r\n          EventBus.emit(\"unread-count-changed\", this.unreadCount); // Usa EventBus.emit per emettere l'evento\r\n        } else {\r\n          throw new Error(\"Formato delle notifiche inatteso\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Errore nel recupero delle notifiche:\", error);\r\n      }\r\n    },\r\n\r\n    updateUnreadCount() {\r\n      this.unreadCount = this.notifications.filter(\r\n        (notification) => !notification.isRead\r\n      ).length;\r\n    },\r\n\r\n    async markAsRead(notificationId) {\r\n      if (!notificationId) {\r\n        console.error(\"No notification ID provided\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(`/api/notifications/${notificationId}`, {\r\n          method: \"PATCH\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ isRead: true }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Errore nel segnare la notifica come letta.\");\r\n        }\r\n\r\n        // Aggiorna lo stato dopo aver segnato come letta\r\n        this.notifications = this.notifications.map((notification) =>\r\n          notification.id === notificationId\r\n            ? { ...notification, isRead: true }\r\n            : notification\r\n        );\r\n\r\n        this.updateUnreadCount();\r\n      } catch (error) {\r\n        console.error(\"Errore nel segnare la notifica come letta.\", error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.notifications-container {\r\n  background: #ffffff;\r\n  max-width: 80%; /* La larghezza massima del container */\r\n  margin: 10% auto 0; /* Centra il container orizzontalmente con auto e imposta un margine in alto */\r\n  padding: 5%;\r\n  border-radius: 15px;\r\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\r\n  height: auto;\r\n}\r\n\r\n.notifications-header {\r\n  font-size: 18px;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.list-group-item {\r\n  background: #f9f9f9;\r\n  border: 1px solid #eee;\r\n  border-radius: 10px;\r\n  margin-bottom: 10px;\r\n  padding: 15px;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\r\n  transition: background-color 0.3s, opacity 0.3s, color 0.3s;\r\n}\r\n\r\n/* Classe per notifiche lette */\r\n.notification-read {\r\n  opacity: 0.5; /* Maggiore opacità per notifiche lette */\r\n}\r\n\r\n/* Messaggio della notifica */\r\n.notification-message {\r\n  font-size: 13px; /* Dimensione del testo più piccola */\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.notification-details {\r\n  font-size: 11px; /* Testo più piccolo */\r\n  color: #666;\r\n  margin-top: 5px;\r\n  display: flex;\r\n  flex-direction: column; /* Disposizione verticale */\r\n  gap: 2px; /* Spazio tra le righe */\r\n}\r\n\r\n.notification-sent-at {\r\n  font-size: 10px; /* Testo più piccolo */\r\n  color: #999; /* Colore grigio per differenziare */\r\n  text-align: right; /* Allinea a destra */\r\n  margin-top: 5px; /* Spazio sopra */\r\n}\r\n\r\n/* Contenitore per il pulsante, allineato a destra sopra \"Inviata:\" */\r\n.mark-read-btn-container {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 10px;\r\n}\r\n\r\n/* Pulsante per segnare come letto */\r\n.mark-read-btn {\r\n  background: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 8px 20px;\r\n  font-size: 11px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.mark-read-btn:hover {\r\n  background: #0056b3;\r\n}\r\n\r\n.no-notifications {\r\n  text-align: center;\r\n  color: #777;\r\n  font-size: 13px;\r\n}\r\n\r\n.badge-warning {\r\n  background-color: #ffc107;\r\n  color: #fff;\r\n  font-size: 12px; /* Riduce la dimensione del testo nel badge */\r\n  padding: 4px 8px; /* Riduce la dimensione del badge */\r\n  border-radius: 5px; /* Mantiene l'aspetto arrotondato */\r\n  font-weight: bold; /* Mantiene il testo in grassetto */\r\n  margin-left: 5px; /* Distanza dal testo principale */\r\n  position: relative; /* Per poter usare top */\r\n  top: -2px; /* Sposta il badge leggermente più in alto */\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAyB;;EAC9BA,KAAK,EAAC;AAAsB;;EAFpCC,GAAA;EAImCD,KAAK,EAAC;;;EAJzCC,GAAA;AAAA;;EASUD,KAAK,EAAC;AAAY;;EAQbA,KAAK,EAAC;AAAsB;;EAK5BA,KAAK,EAAC;AAAsB;;EAtB3CC,GAAA;EAgCeD,KAAK,EAAC;;mBAhCrB;;EA0CeA,KAAK,EAAC;AAAsB;;EA1C3CC,GAAA;EAgDgBD,KAAK,EAAC;;;uBA/CpBE,mBAAA,CAkDM,OAlDNC,UAkDM,GAjDJC,mBAAA,CAKK,MALLC,UAKK,G,0BAPTC,gBAAA,CAEqC,aAE/B,IAAYC,KAAA,CAAAC,WAAW,Q,cAAvBN,mBAAA,CAEO,QAFPO,UAEO,EAAAC,gBAAA,CADFH,KAAA,CAAAC,WAAW,oBALtBG,mBAAA,e,GAQeJ,KAAA,CAAAK,aAAa,CAACC,MAAM,I,cAA/BX,mBAAA,CAuCM,OA/CVY,UAAA,GASMV,mBAAA,CAqCK,MArCLW,UAqCK,I,kBApCHb,mBAAA,CAmCKc,SAAA,QA7CbC,WAAA,CAW0CV,KAAA,CAAAK,aAAa,EAXvD,CAWkBM,YAAY,EAAEC,KAAK;yBAD7BjB,mBAAA,CAmCK;MAjCFD,GAAG,EAAEkB,KAAK;MACXnB,KAAK,EAbfoB,eAAA,EAagB,iBAAiB;QAAA,qBACQF,YAAY,CAACG;MAAM;QAElDV,mBAAA,8BAAiC,EACjCP,mBAAA,CAEM,OAFNkB,UAEM,GADJlB,mBAAA,CAA2C,gBAAAM,gBAAA,CAAhCQ,YAAY,CAACK,OAAO,iB,GAGjCZ,mBAAA,gBAAmB,EACnBP,mBAAA,CAOM,OAPNoB,UAOM,GANJpB,mBAAA,CAEM,cADJA,mBAAA,CAAmD,cAA7C,QAAM,GAAAM,gBAAA,CAAGQ,YAAY,CAACO,aAAa,iB,GAE3CrB,mBAAA,CAEM,cADJA,mBAAA,CAAyC,cAAnC,OAAK,GAAAM,gBAAA,CAAGQ,YAAY,CAACQ,IAAI,iB,KAInCf,mBAAA,8DAA+D,E,CACnBO,YAAY,CAACG,MAAM,I,cAA/DnB,mBAAA,CAOM,OAPNyB,UAOM,GANJvB,mBAAA,CAKS;MAJNwB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU,CAACb,YAAY,CAACc,EAAE;MAClChC,KAAK,EAAC;OACP,oBAED,iBAtCZiC,UAAA,E,KAAAtB,mBAAA,gBAyCUA,mBAAA,yBAA4B,EAC5BP,mBAAA,CAEM,OAFN8B,WAEM,EAF4B,YACvB,GAAAxB,gBAAA,CAAGQ,YAAY,CAACiB,cAAc,iB;uDAK/CjC,mBAAA,CAEM,OAFNkC,WAEM,EAAAC,MAAA,QAAAA,MAAA,OADJjC,mBAAA,CAA6B,WAA1B,wBAAsB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}