{"ast":null,"code":"import PatientRadiographs from \"./PatientRadiographs.vue\";\nimport UploadRadiograph from \"./UploadRadiographs.vue\";\nimport { ref, onMounted } from \"vue\";\nimport { getPatients, getRadiographs } from \"../services/api-service\"; // Assicurati di importare getPatients\n\nexport default {\n  components: {\n    PatientRadiographs,\n    UploadRadiograph\n  },\n  setup() {\n    const patients = ref([]);\n    const selectedPatient = ref(null);\n    const selectedPatientRadiographs = ref([]);\n\n    // Ottieni il DoctorID dal localStorage\n    const doctorId = localStorage.getItem(\"doctorId\");\n    onMounted(async () => {\n      console.log(\"Cerco pazienti associati a: \" + doctorId);\n      // Assicurati che doctorId non sia null\n      if (doctorId) {\n        // Ottieni i pazienti associati\n        patients.value = await getPatients(doctorId);\n      } else {\n        console.error(\"Nessun DoctorID trovato nel localStorage.\");\n      }\n    });\n\n    // Seleziona un paziente e ottieni le sue radiografie\n    const selectPatient = async patient => {\n      selectedPatient.value = patient;\n      selectedPatientRadiographs.value = await getRadiographs(patient.id);\n    };\n    const handleUploadSuccess = () => {\n      selectPatient(selectedPatient.value); // Ricarica le radiografie\n    };\n    return {\n      patients,\n      selectPatient,\n      handleUploadSuccess,\n      selectedPatient,\n      selectedPatientRadiographs\n    };\n  }\n};","map":{"version":3,"names":["PatientRadiographs","UploadRadiograph","ref","onMounted","getPatients","getRadiographs","components","setup","patients","selectedPatient","selectedPatientRadiographs","doctorId","localStorage","getItem","console","log","value","error","selectPatient","patient","id","handleUploadSuccess"],"sources":["C:\\Users\\Utente\\Desktop\\osteoarthritis-project\\frontend\\src\\components\\DoctorDashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Dashboard Dottore</h1>\n    <PatientList :patients=\"patients\" @selectPatient=\"selectPatient\" />\n    <UploadRadiograph\n      v-if=\"selectedPatient\"\n      @uploadSuccess=\"handleUploadSuccess\"\n      :patientId=\"selectedPatient.id\"\n    />\n    <PatientRadiographs\n      :radiographs=\"selectedPatientRadiographs\"\n      v-if=\"selectedPatient\"\n    />\n  </div>\n</template>\n\n<script>\nimport PatientRadiographs from \"./PatientRadiographs.vue\";\nimport UploadRadiograph from \"./UploadRadiographs.vue\";\nimport { ref, onMounted } from \"vue\";\nimport { getPatients, getRadiographs } from \"../services/api-service\"; // Assicurati di importare getPatients\n\nexport default {\n  components: {\n    PatientRadiographs,\n    UploadRadiograph,\n  },\n  setup() {\n    const patients = ref([]);\n    const selectedPatient = ref(null);\n    const selectedPatientRadiographs = ref([]);\n\n    // Ottieni il DoctorID dal localStorage\n    const doctorId = localStorage.getItem(\"doctorId\");\n\n    onMounted(async () => {\n      console.log(\"Cerco pazienti associati a: \" + doctorId);\n      // Assicurati che doctorId non sia null\n      if (doctorId) {\n        // Ottieni i pazienti associati\n        patients.value = await getPatients(doctorId);\n      } else {\n        console.error(\"Nessun DoctorID trovato nel localStorage.\");\n      }\n    });\n\n    // Seleziona un paziente e ottieni le sue radiografie\n    const selectPatient = async (patient) => {\n      selectedPatient.value = patient;\n      selectedPatientRadiographs.value = await getRadiographs(patient.id);\n    };\n\n    const handleUploadSuccess = () => {\n      selectPatient(selectedPatient.value); // Ricarica le radiografie\n    };\n\n    return {\n      patients,\n      selectPatient,\n      handleUploadSuccess,\n      selectedPatient,\n      selectedPatientRadiographs,\n    };\n  },\n};\n</script>\n\n<style scoped>\n/* Puoi aggiungere qui il tuo stile personalizzato per la dashboard */\n</style>\n"],"mappings":"AAiBA,OAAOA,kBAAiB,MAAO,0BAA0B;AACzD,OAAOC,gBAAe,MAAO,yBAAyB;AACtD,SAASC,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,SAASC,WAAW,EAAEC,cAAa,QAAS,yBAAyB,EAAE;;AAEvE,eAAe;EACbC,UAAU,EAAE;IACVN,kBAAkB;IAClBC;EACF,CAAC;EACDM,KAAKA,CAAA,EAAG;IACN,MAAMC,QAAO,GAAIN,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMO,eAAc,GAAIP,GAAG,CAAC,IAAI,CAAC;IACjC,MAAMQ,0BAAyB,GAAIR,GAAG,CAAC,EAAE,CAAC;;IAE1C;IACA,MAAMS,QAAO,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAEjDV,SAAS,CAAC,YAAY;MACpBW,OAAO,CAACC,GAAG,CAAC,8BAA6B,GAAIJ,QAAQ,CAAC;MACtD;MACA,IAAIA,QAAQ,EAAE;QACZ;QACAH,QAAQ,CAACQ,KAAI,GAAI,MAAMZ,WAAW,CAACO,QAAQ,CAAC;MAC9C,OAAO;QACLG,OAAO,CAACG,KAAK,CAAC,2CAA2C,CAAC;MAC5D;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,aAAY,GAAI,MAAOC,OAAO,IAAK;MACvCV,eAAe,CAACO,KAAI,GAAIG,OAAO;MAC/BT,0BAA0B,CAACM,KAAI,GAAI,MAAMX,cAAc,CAACc,OAAO,CAACC,EAAE,CAAC;IACrE,CAAC;IAED,MAAMC,mBAAkB,GAAIA,CAAA,KAAM;MAChCH,aAAa,CAACT,eAAe,CAACO,KAAK,CAAC,EAAE;IACxC,CAAC;IAED,OAAO;MACLR,QAAQ;MACRU,aAAa;MACbG,mBAAmB;MACnBZ,eAAe;MACfC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}