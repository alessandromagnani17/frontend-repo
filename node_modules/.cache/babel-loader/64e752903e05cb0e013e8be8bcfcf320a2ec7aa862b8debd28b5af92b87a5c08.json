{"ast":null,"code":"export default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(),\n      // Mese corrente\n      year: new Date().getFullYear(),\n      // Anno corrente\n      operations: [],\n      // Le operazioni caricate\n      selectedDay: null,\n      // Giorno selezionato\n      monthNames: [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"],\n      isPatient: false,\n      // Indica se l'utente è un paziente\n      isDoctor: false,\n      // Indica se l'utente è un dottore\n      patientId: null,\n      // ID del paziente\n      selectedPatient: null,\n      // Paziente selezionato (loggato)\n      showModal: false,\n      // Controlla la visibilità del modale\n      operationDate: \"\",\n      // Data dell'operazione\n      operationTime: \"\",\n      description: \"\",\n      // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0] // Data minima (oggi)\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      // Aggrega radiografie e operazioni\n      const dataPerDay = {};\n      if (this.isDoctor) {\n        // Per i medici, aggrega tutte le operazioni dei pazienti\n        this.patients.forEach(patient => {\n          if (patient.operations) {\n            patient.operations.forEach(operation => {\n              const operationDate = new Date(operation.date).toDateString();\n              if (!dataPerDay[operationDate]) {\n                dataPerDay[operationDate] = {\n                  radiographs: [],\n                  operations: []\n                };\n              }\n              dataPerDay[operationDate].operations.push({\n                ...operation,\n                patientName: `${patient.name} ${patient.family_name}`\n              });\n            });\n          }\n        });\n      } else {\n        // Per i pazienti, usa solo le proprie operazioni\n        this.radiographs.forEach(radiograph => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!dataPerDay[radiographDate]) {\n            dataPerDay[radiographDate] = {\n              radiographs: [],\n              operations: []\n            };\n          }\n          dataPerDay[radiographDate].radiographs.push(radiograph);\n        });\n        this.selectedPatient.operations.forEach(operation => {\n          const operationDate = new Date(operation.date).toDateString();\n          if (!dataPerDay[operationDate]) {\n            dataPerDay[operationDate] = {\n              radiographs: [],\n              operations: []\n            };\n          }\n          dataPerDay[operationDate].operations.push(operation);\n        });\n      }\n\n      // Popola i giorni del mese con dati aggregati\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i).toDateString();\n        const dataOnDay = dataPerDay[dayDate] || {\n          radiographs: [],\n          operations: []\n        };\n        days.push({\n          date: i,\n          radiographs: dataOnDay.radiographs,\n          operations: dataOnDay.operations\n        });\n      }\n      return days;\n    }\n  },\n  methods: {\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (!this.operationDate || !this.operationTime || !this.description) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"userId\");\n        const patientId = this.selectedPatient?.userId || \"default_patient_id\"; // Sostituisci con un ID valido\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(this.operationDate, this.operationTime);\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId,\n            operationDate: formattedDate,\n            // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString() // Timestamp di creazione\n          })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || \"Errore durante la pianificazione dell'operazione.\");\n        }\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\"Errore durante la pianificazione dell'operazione:\", error);\n        alert(\"Errore: \" + error.message);\n      }\n    },\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"userId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica operazioni e radiografie per ogni paziente\n          this.patients.forEach(patient => {\n            this.loadOperations(patient.userId);\n            this.loadRadiographs(patient.userId);\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n    async loadOperations(patientId) {\n      if (!patientId) {\n        console.error(\"patientId non valido:\", patientId);\n        return; // Non fare nulla se patientId non è valido\n      }\n      try {\n        const response = await fetch(`/api/patients/${patientId}/operations`);\n        const data = await response.json();\n        console.log(\"Dati ricevuti dal backend:\", data); // Aggiungi questo\n        this.patient.operations = data.operations || []; // Assicurati che sia un array\n      } catch (error) {\n        console.error(\"Errore nel caricamento delle operazioni:\", error);\n        this.patient.operations = []; // Imposta un array vuoto in caso di errore\n      }\n    },\n    async loadRadiographs() {\n      try {\n        const response = await fetch(`/api/patients/${this.patientId}/radiographs`);\n        if (response.ok) {\n          this.radiographs = await response.json();\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n      try {\n        const response = await fetch(`/api/patients/${this.patientId}/operations`);\n        if (response.ok) {\n          this.selectedPatient.operations = await response.json();\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    }\n  }\n};","map":{"version":3,"names":["name","data","loadingPrediction","successMessage","month","Date","getMonth","year","getFullYear","operations","selectedDay","monthNames","isPatient","isDoctor","patientId","selectedPatient","showModal","operationDate","operationTime","description","minDate","toISOString","split","mounted","checkUserRole","loadPatients","loadRadiographs","computed","daysInMonth","days","lastDayOfMonth","totalDays","getDate","dataPerDay","patients","forEach","patient","operation","date","toDateString","radiographs","push","patientName","family_name","radiograph","radiographDate","i","dayDate","dataOnDay","methods","openScheduleModal","closeScheduleModal","scheduleOperation","alert","doctorId","localStorage","getItem","userId","selectedDate","today","setHours","formattedDate","combineDateAndTime","response","fetch","method","headers","body","JSON","stringify","createdAt","ok","error","json","Error","message","showActivityCalendar","console","time","getMinDate","yyyy","mm","toString","padStart","dd","closeModal","userData","parse","role","log","loadOperations","showDayDetails","day","enlargeRadiograph","url","modalImageUrl","isModalOpen","changeMonth","direction","beforeEnter","el","style","opacity","enter","done","offsetHeight","transition","leave"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n    <button @click=\"openScheduleModal\" class=\"btn btn-primary\">\n      Pianifica Operazione\n    </button>\n\n    <!-- Modale per inserire i dettagli dell'operazione -->\n    <div v-if=\"showModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h2>Pianifica una nuova operazione</h2>\n        <label for=\"operationDate\">Data dell'operazione:</label>\n        <input\n          type=\"date\"\n          v-model=\"operationDate\"\n          id=\"operationDate\"\n          :min=\"minDate\"\n        />\n\n        <label for=\"operationTime\">Ora dell'operazione:</label>\n        <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\n\n        <label for=\"description\">Descrizione:</label>\n        <textarea v-model=\"description\" id=\"description\"></textarea>\n\n        <button @click=\"scheduleOperation\" class=\"btn btn-success\">\n          Salva\n        </button>\n        <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\n          Annulla\n        </button>\n      </div>\n    </div>\n    <!-- Verifica se l'utente è un paziente o un dottore -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <div class=\"calendar-grid\">\n          <div\n            v-for=\"day in daysInMonth\"\n            :key=\"day.date\"\n            class=\"calendar-day\"\n            @click=\"showDayDetails(day)\"\n          >\n            <div class=\"date\">{{ day.date }}</div>\n            <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n              {{ day.radiographs.length }}\n              {{\n                day.radiographs.length === 1\n                  ? \"caricamento radiografia\"\n                  : \"caricamenti radiografie\"\n              }}\n            </div>\n          </div>\n          <!-- Mostra operazioni pianificate -->\n          <div v-if=\"day.operations.length > 0\" class=\"operation-list\">\n            <p\n              v-for=\"operation in day.operations\"\n              :key=\"operation.id\"\n              style=\"color: red; font-size: 0.9em\"\n            >\n              {{ operation.description }}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <p>\n            <strong>Paziente:</strong> {{ selectedPatient.name }}\n            {{ selectedPatient.family_name }}\n          </p>\n          <div v-if=\"selectedDay.radiographs.length > 0\">\n            <h3>Radiografie caricate:</h3>\n            <ul>\n              <li\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <strong>{{ radiograph.name }}</strong\n                ><br />\n                <span>{{ radiograph.date }}</span\n                ><br />\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </li>\n            </ul>\n          </div>\n          <div v-else>\n            <p>Nessuna radiografia caricate per questa data.</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n\n    <!-- Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti -->\n    <div v-else>\n      <div v-if=\"isDoctor\">\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"changeMonth(-1)\">&#8249;</button>\n            <span>{{ monthNames[month] }} {{ year }}</span>\n            <button @click=\"changeMonth(1)\">&#8250;</button>\n          </div>\n\n          <div class=\"calendar-grid\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"day.date\"\n              class=\"calendar-day\"\n              @click=\"showDayDetails(day)\"\n            >\n              <div class=\"date\">{{ day.date }}</div>\n              <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n                {{ day.radiographs.length }}\n                {{\n                  day.radiographs.length === 1\n                    ? \"caricamento radiografia\"\n                    : \"caricamenti radiografie\"\n                }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <div\n            v-for=\"radiograph in selectedDay.radiographs\"\n            :key=\"radiograph.name\"\n          >\n            <p>\n              <strong>{{ radiograph.patientName }}:</strong>\n              {{ radiograph.name }}\n            </p>\n            <button @click=\"enlargeRadiograph(radiograph.url)\">\n              Visualizza Immagine\n            </button>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      operations: [], // Le operazioni caricate\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      patientId: null, // ID del paziente\n      selectedPatient: null, // Paziente selezionato (loggato)\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      // Aggrega radiografie e operazioni\n      const dataPerDay = {};\n\n      if (this.isDoctor) {\n        // Per i medici, aggrega tutte le operazioni dei pazienti\n        this.patients.forEach((patient) => {\n          if (patient.operations) {\n            patient.operations.forEach((operation) => {\n              const operationDate = new Date(operation.date).toDateString();\n              if (!dataPerDay[operationDate]) {\n                dataPerDay[operationDate] = { radiographs: [], operations: [] };\n              }\n              dataPerDay[operationDate].operations.push({\n                ...operation,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n        });\n      } else {\n        // Per i pazienti, usa solo le proprie operazioni\n        this.radiographs.forEach((radiograph) => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!dataPerDay[radiographDate]) {\n            dataPerDay[radiographDate] = { radiographs: [], operations: [] };\n          }\n          dataPerDay[radiographDate].radiographs.push(radiograph);\n        });\n\n        this.selectedPatient.operations.forEach((operation) => {\n          const operationDate = new Date(operation.date).toDateString();\n          if (!dataPerDay[operationDate]) {\n            dataPerDay[operationDate] = { radiographs: [], operations: [] };\n          }\n          dataPerDay[operationDate].operations.push(operation);\n        });\n      }\n\n      // Popola i giorni del mese con dati aggregati\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i).toDateString();\n        const dataOnDay = dataPerDay[dayDate] || {\n          radiographs: [],\n          operations: [],\n        };\n\n        days.push({\n          date: i,\n          radiographs: dataOnDay.radiographs,\n          operations: dataOnDay.operations,\n        });\n      }\n\n      return days;\n    },\n  },\n  methods: {\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (!this.operationDate || !this.operationTime || !this.description) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"userId\");\n        const patientId = this.selectedPatient?.userId || \"default_patient_id\"; // Sostituisci con un ID valido\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(\n          this.operationDate,\n          this.operationTime\n        );\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId,\n            operationDate: formattedDate, // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString(), // Timestamp di creazione\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\n          );\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\n          \"Errore durante la pianificazione dell'operazione:\",\n          error\n        );\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"userId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica operazioni e radiografie per ogni paziente\n          this.patients.forEach((patient) => {\n            this.loadOperations(patient.userId);\n            this.loadRadiographs(patient.userId);\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    async loadOperations(patientId) {\n      if (!patientId) {\n        console.error(\"patientId non valido:\", patientId);\n        return; // Non fare nulla se patientId non è valido\n      }\n      try {\n        const response = await fetch(`/api/patients/${patientId}/operations`);\n        const data = await response.json();\n        console.log(\"Dati ricevuti dal backend:\", data); // Aggiungi questo\n        this.patient.operations = data.operations || []; // Assicurati che sia un array\n      } catch (error) {\n        console.error(\"Errore nel caricamento delle operazioni:\", error);\n        this.patient.operations = []; // Imposta un array vuoto in caso di errore\n      }\n    },\n\n    async loadRadiographs() {\n      try {\n        const response = await fetch(\n          `/api/patients/${this.patientId}/radiographs`\n        );\n        if (response.ok) {\n          this.radiographs = await response.json();\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n\n      try {\n        const response = await fetch(\n          `/api/patients/${this.patientId}/operations`\n        );\n        if (response.ok) {\n          this.selectedPatient.operations = await response.json();\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.radiograph-count {\n  position: absolute;\n  bottom: 10px;\n  left: 5px;\n  font-size: 0.9em;\n  color: #007bff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 1.5em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 20px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1.5em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 400px;\n  text-align: center;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 10px;\n  text-align: left;\n}\n\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n}\n\n.btn {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}