{"ast":null,"code":"import Calendar from \"./ScheduleCalendar.vue\";\nimport DayDetails from \"./DayDetails.vue\";\nexport default {\n  components: {\n    Calendar,\n    DayDetails\n  },\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(),\n      // Mese corrente\n      year: new Date().getFullYear(),\n      // Anno corrente\n      radiographs: [],\n      // Le radiografie caricate\n      operations: [],\n      selectedDay: null,\n      // Giorno selezionato\n      monthNames: [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"],\n      dayNames: [\"LUN\", \"MAR\", \"MER\", \"GIO\", \"VEN\", \"SAB\", \"DOM\"],\n      isPatient: false,\n      // Indica se l'utente è un paziente\n      isDoctor: false,\n      // Indica se l'utente è un dottore\n      selectedPatient: null,\n      // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [],\n      // Pazienti associati al dottore\n      showModal: false,\n      // Controlla la visibilità del modale\n      operationDate: \"\",\n      // Data dell'operazione\n      operationTime: \"\",\n      description: \"\",\n      // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0],\n      // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\")\n    };\n  },\n  mounted() {\n    this.checkUserRole(); // Verifica il ruolo dell'utente\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\n      if (userData && userData.userId) {\n        const userId = userData.userId; // Recupera lo userId\n        console.log(\"User ID recuperato:\", userId);\n        this.loadPatientData(userId); // Carica operazioni e radiografie per il paziente\n      } else {\n        console.error(\"User ID non trovato in userData.\");\n      }\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n      const firstDayOfMonth = new Date(this.year, this.month, 1);\n      const startDayOfWeek = firstDayOfMonth.getDay();\n      const daysFromPrevMonth = (startDayOfWeek + 6) % 7;\n      const prevMonthLastDay = new Date(this.year, this.month, 0).getDate();\n\n      // Aggiungi i giorni del mese precedente\n      for (let i = daysFromPrevMonth; i > 0; i--) {\n        const date = new Date(this.year, this.month - 1, prevMonthLastDay - i + 1);\n        const dayString = date.toDateString();\n        const radiographsOnDay = this.radiographsPerDay[dayString] || [];\n        const operationsOnDay = this.operationsPerDay[dayString] || [];\n        days.push({\n          date: date.getDate(),\n          year: date.getFullYear(),\n          month: date.getMonth(),\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true\n        });\n      }\n\n      // Aggiungi i giorni del mese corrente\n      for (let i = 1; i <= totalDays; i++) {\n        const date = new Date(this.year, this.month, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = this.radiographsPerDay[dayString] || [];\n        const operationsOnDay = this.operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(),\n          month: date.getMonth() + 1,\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: false\n        });\n      }\n\n      // Aggiungi i giorni del mese successivo\n      const remainingDays = 42 - days.length;\n      for (let i = 1; i <= remainingDays; i++) {\n        const date = new Date(this.year, this.month + 1, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = this.radiographsPerDay[dayString] || [];\n        const operationsOnDay = this.operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(),\n          month: date.getMonth() + 1,\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true\n        });\n      }\n      return days;\n    }\n  },\n  methods: {\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        console.log(\"Ruolo utente: Paziente\");\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    updateSelectedDay(day) {\n      this.selectedDay = day;\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (!this.selectedPatientId || !this.operationDate || !this.operationTime || !this.description) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(this.operationDate, this.operationTime);\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate,\n            // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString() // Timestamp di creazione\n          })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || \"Errore durante la pianificazione dell'operazione.\");\n        }\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Dopo che l'operazione è stata pianificata, invia una notifica al paziente\n        await this.sendNotificationToPatient();\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\"Errore durante la pianificazione dell'operazione:\", error);\n        alert(\"Errore: \" + error.message);\n      }\n    },\n    // Aggiungi questa funzione per inviare la notifica\n    async sendNotificationToPatient() {\n      try {\n        if (!this.operationDate || !this.operationTime || !this.description) {\n          alert(\"Assicurati di aver inserito tutti i dettagli dell'operazione.\");\n          return;\n        }\n\n        // Estrae solo la parte dell'ora e dei minuti per `time`\n        const notificationTime = this.operationTime; // Già in formato HH:mm\n\n        // Crea il messaggio della notifica usando le informazioni dell'operazione\n        const notificationMessage = `Una nuova operazione è stata pianificata per te!`;\n\n        // Aggiunge la data e ora di invio della notifica\n        const sentAt = new Date().toISOString(); // Data e ora corrente in formato ISO 8601\n\n        // Chiamata al backend per inviare la notifica al paziente selezionato\n        const response = await fetch(\"/api/notifications\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            patientId: this.selectedPatientId,\n            message: notificationMessage,\n            date: this.operationDate,\n            time: notificationTime,\n            sentAt // Aggiunge l'attributo sentAt alla richiesta\n          })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || \"Errore nell'invio della notifica.\");\n        }\n        alert(\"Notifica inviata al paziente.\");\n      } catch (error) {\n        console.error(\"Errore nell'invio della notifica:\", error);\n        alert(\"Errore nell'invio della notifica.\");\n      }\n    },\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(`DEBUG: Errore nella conversione della data ISO \"${isoString}\":`, error);\n        return \"Invalid Date\";\n      }\n    },\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n    },\n    // Caricamento dei dati di tutti i pazienti in parallelo\n    async loadAllPatientData(radiographsPerDay, operationsPerDay) {\n      const batchPromises = this.patients.map(patient => this.loadPatientData(patient.userId, radiographsPerDay, operationsPerDay));\n\n      // Usa Promise.allSettled per evitare errori bloccanti\n      const results = await Promise.allSettled(batchPromises);\n\n      // Log dei risultati per il debug\n      results.forEach((result, index) => {\n        if (result.status === \"fulfilled\") {\n          console.log(`Dati caricati per paziente ${this.patients[index].userId}`);\n        } else {\n          console.error(`Errore nel caricamento dei dati per paziente ${this.patients[index].userId}:`, result.reason);\n        }\n      });\n    },\n    // Carica i dati di un paziente specifico\n    async loadPatientData(patientId, radiographsPerDay, operationsPerDay) {\n      try {\n        const [operationsResponse, radiographsResponse, patientResponse] = await Promise.all([fetch(`/api/patients/${patientId}/operations`), fetch(`/api/patients/${patientId}/radiographs`), fetch(`/api/get_user/${patientId}`) // Nuova chiamata per recuperare i dettagli del paziente\n        ]);\n\n        // Controlla se tutte le risposte sono valide\n        if (operationsResponse.ok) {\n          const operationsData = await operationsResponse.json();\n          if (patientResponse.ok) {\n            const patientData = await patientResponse.json();\n            operationsData.forEach(operation => {\n              operation.patientName = `${patientData.name} ${patientData.family_name}`;\n            });\n          }\n          this.handleLoadedData(\"operations\", patientId, operationsData, radiographsPerDay, operationsPerDay);\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n        if (radiographsResponse.ok) {\n          const radiographsData = await radiographsResponse.json();\n          this.handleLoadedData(\"radiographs\", patientId, radiographsData, radiographsPerDay, operationsPerDay);\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n    // Funzione per gestire i dati caricati (operazioni o radiografie)\n    handleLoadedData(type, patientId, data, radiographsPerDay, operationsPerDay) {\n      // Se l'utente è un medico, aggiorna la lista dei pazienti\n      if (this.isDoctor) {\n        const patient = this.patients.find(p => p.userId === patientId);\n        if (patient) {\n          patient[type] = data;\n          console.log(`${type.charAt(0).toUpperCase() + type.slice(1)} aggiunti al paziente:`, patient[type]);\n          // Aggiorna il dizionario globale per la visualizzazione\n          data.forEach(item => {\n            const date = new Date(item.date).toDateString();\n            if (type === \"operations\") {\n              if (!operationsPerDay[date]) {\n                operationsPerDay[date] = [];\n              }\n              operationsPerDay[date].push(item);\n            } else {\n              if (!radiographsPerDay[date]) {\n                radiographsPerDay[date] = [];\n              }\n              radiographsPerDay[date].push(item);\n            }\n          });\n        }\n      } else {\n        this[type] = data;\n        console.log(`${type.charAt(0).toUpperCase() + type.slice(1)} aggiunti al profilo del paziente:`, this[type]);\n        // Aggiorna anche il dizionario globale per la visualizzazione\n        data.forEach(item => {\n          const date = new Date(item.date).toDateString();\n          if (type === \"operations\") {\n            if (!operationsPerDay[date]) {\n              operationsPerDay[date] = [];\n            }\n            operationsPerDay[date].push(item);\n          } else {\n            if (!radiographsPerDay[date]) {\n              radiographsPerDay[date] = [];\n            }\n            radiographsPerDay[date].push(item);\n          }\n        });\n      }\n    },\n    // Funzione per caricare i dati del paziente loggato\n    async loadUserData(radiographsPerDay, operationsPerDay) {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (this.radiographs) {\n        this.radiographs.forEach(radiograph => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push({\n            ...radiograph,\n            patientName: `${userData.name} ${userData.family_name}`\n          });\n        });\n      }\n      if (this.operations) {\n        this.operations.forEach(operation => {\n          const operationDate = this.parseISODate(operation.operationDate);\n          if (operationDate !== \"Invalid Date\") {\n            const operationDateString = operationDate.toDateString();\n            if (!operationsPerDay[operationDateString]) {\n              operationsPerDay[operationDateString] = [];\n            }\n            operationsPerDay[operationDateString].push({\n              ...operation,\n              patientName: `${userData.name} ${userData.family_name}`\n            });\n          }\n        });\n      }\n    },\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n    formatDate(dateTime) {\n      const date = new Date(dateTime);\n      return date.toLocaleDateString(\"it-IT\"); // Mostra solo la data in formato italiano\n    },\n    formatTime(dateTime) {\n      const date = new Date(dateTime);\n      return date.toLocaleTimeString(\"it-IT\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      }); // Mostra solo l'ora in formato 24 ore\n    },\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // Trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    }\n  }\n};","map":{"version":3,"names":["Calendar","DayDetails","components","data","loadingPrediction","successMessage","month","Date","getMonth","year","getFullYear","radiographs","operations","selectedDay","monthNames","dayNames","isPatient","isDoctor","selectedPatient","selectedPatientId","patients","showModal","operationDate","operationTime","description","minDate","toISOString","split","operationIcon","require","radiographIcon","mounted","checkUserRole","loadPatients","userData","JSON","parse","localStorage","getItem","userId","console","log","loadPatientData","error","computed","daysInMonth","days","lastDayOfMonth","totalDays","getDate","firstDayOfMonth","startDayOfWeek","getDay","daysFromPrevMonth","prevMonthLastDay","i","date","dayString","toDateString","radiographsOnDay","radiographsPerDay","operationsOnDay","operationsPerDay","push","isDisabled","remainingDays","length","methods","role","openScheduleModal","closeScheduleModal","updateSelectedDay","day","scheduleOperation","alert","doctorId","selectedDate","today","setHours","formattedDate","combineDateAndTime","response","fetch","method","headers","body","stringify","patientId","createdAt","ok","json","Error","message","sendNotificationToPatient","showActivityCalendar","notificationTime","notificationMessage","sentAt","time","parseISODate","isoString","isNaN","getMinDate","yyyy","mm","toString","padStart","dd","closeModal","loadAllPatientData","batchPromises","map","patient","results","Promise","allSettled","forEach","result","index","status","reason","operationsResponse","radiographsResponse","patientResponse","all","operationsData","patientData","operation","patientName","name","family_name","handleLoadedData","radiographsData","type","find","p","charAt","toUpperCase","slice","item","loadUserData","radiograph","radiographDate","operationDateString","refreshCalendar","$forceUpdate","showDayDetails","formatDate","dateTime","toLocaleDateString","formatTime","toLocaleTimeString","hour","minute","enlargeRadiograph","url","modalImageUrl","isModalOpen","changeMonth","direction","beforeEnter","el","style","opacity","enter","done","offsetHeight","transition","leave"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"activity-calendar\">\n    <div class=\"calendar-container\">\n      <h1 class=\"calendar\">Calendario Attività</h1>\n\n      <!-- Calendario per utente (paziente o dottore) -->\n      <Calendar\n        :month=\"month\"\n        :year=\"year\"\n        :daysInMonth=\"daysInMonth\"\n        :monthNames=\"monthNames\"\n        :dayNames=\"dayNames\"\n        :minDate=\"minDate\"\n        :operationIcon=\"operationIcon\"\n        :radiographIcon=\"radiographIcon\"\n        :showDayDetails=\"showDayDetails\"\n        :changeMonth=\"changeMonth\"\n        :selectedDay=\"selectedDay\"\n        @update-selected-day=\"updateSelectedDay\"\n      />\n\n      <!-- Dettagli del giorno selezionato -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <DayDetails\n          v-if=\"selectedDay\"\n          :selectedDay=\"selectedDay\"\n          :monthNames=\"monthNames\"\n          :month=\"month\"\n          :year=\"year\"\n          :formatDate=\"formatDate\"\n          :formatTime=\"formatTime\"\n          :enlargeRadiograph=\"enlargeRadiograph\"\n        />\n      </transition>\n\n      <!-- Modale per pianificare l'operazione (solo per dottore) -->\n      <div v-if=\"isDoctor\">\n        <button @click=\"openScheduleModal\" class=\"btn btn-primary custom-btn\">\n          Pianifica Operazione\n        </button>\n\n        <!-- Modale per inserire i dettagli dell'operazione -->\n        <div v-if=\"showModal\" class=\"modal\">\n          <div class=\"modal-content\">\n            <h2>Pianifica una nuova operazione</h2>\n            <label for=\"patientSelect\">Seleziona un paziente:</label>\n            <select\n              v-model=\"selectedPatientId\"\n              id=\"patientSelect\"\n              class=\"form-select\"\n            >\n              <option value=\"\" disabled>Seleziona un paziente</option>\n              <option\n                v-for=\"patient in patients\"\n                :key=\"patient.userId\"\n                :value=\"patient.userId\"\n              >\n                {{ patient.name }} {{ patient.family_name }}\n              </option>\n            </select>\n\n            <label for=\"operationDate\">Data dell'operazione:</label>\n            <input\n              type=\"date\"\n              v-model=\"operationDate\"\n              id=\"operationDate\"\n              :min=\"minDate\"\n            />\n\n            <label for=\"operationTime\">Ora dell'operazione:</label>\n            <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\n\n            <label for=\"description\">Descrizione:</label>\n            <textarea v-model=\"description\" id=\"description\"></textarea>\n\n            <div>\n              <button @click=\"scheduleOperation\" class=\"btn btn-success\">\n                Salva\n              </button>\n              <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\n                Annulla\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Calendar from \"./ScheduleCalendar.vue\";\nimport DayDetails from \"./DayDetails.vue\";\n\nexport default {\n  components: {\n    Calendar,\n    DayDetails,\n  },\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      operations: [],\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      dayNames: [\"LUN\", \"MAR\", \"MER\", \"GIO\", \"VEN\", \"SAB\", \"DOM\"],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      selectedPatient: null, // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [], // Pazienti associati al dottore\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\"),\n    };\n  },\n  mounted() {\n    this.checkUserRole(); // Verifica il ruolo dell'utente\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\n      if (userData && userData.userId) {\n        const userId = userData.userId; // Recupera lo userId\n        console.log(\"User ID recuperato:\", userId);\n        this.loadPatientData(userId); // Carica operazioni e radiografie per il paziente\n      } else {\n        console.error(\"User ID non trovato in userData.\");\n      }\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n      const firstDayOfMonth = new Date(this.year, this.month, 1);\n      const startDayOfWeek = firstDayOfMonth.getDay();\n\n      const daysFromPrevMonth = (startDayOfWeek + 6) % 7;\n      const prevMonthLastDay = new Date(this.year, this.month, 0).getDate();\n\n      // Aggiungi i giorni del mese precedente\n      for (let i = daysFromPrevMonth; i > 0; i--) {\n        const date = new Date(\n          this.year,\n          this.month - 1,\n          prevMonthLastDay - i + 1\n        );\n        const dayString = date.toDateString();\n        const radiographsOnDay = this.radiographsPerDay[dayString] || [];\n        const operationsOnDay = this.operationsPerDay[dayString] || [];\n        days.push({\n          date: date.getDate(),\n          year: date.getFullYear(),\n          month: date.getMonth(),\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true,\n        });\n      }\n\n      // Aggiungi i giorni del mese corrente\n      for (let i = 1; i <= totalDays; i++) {\n        const date = new Date(this.year, this.month, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = this.radiographsPerDay[dayString] || [];\n        const operationsOnDay = this.operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(),\n          month: date.getMonth() + 1,\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: false,\n        });\n      }\n\n      // Aggiungi i giorni del mese successivo\n      const remainingDays = 42 - days.length;\n      for (let i = 1; i <= remainingDays; i++) {\n        const date = new Date(this.year, this.month + 1, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = this.radiographsPerDay[dayString] || [];\n        const operationsOnDay = this.operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(),\n          month: date.getMonth() + 1,\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true,\n        });\n      }\n\n      return days;\n    },\n  },\n\n  methods: {\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        console.log(\"Ruolo utente: Paziente\");\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    updateSelectedDay(day) {\n      this.selectedDay = day;\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (\n          !this.selectedPatientId ||\n          !this.operationDate ||\n          !this.operationTime ||\n          !this.description\n        ) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(\n          this.operationDate,\n          this.operationTime\n        );\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate, // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString(), // Timestamp di creazione\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\n          );\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Dopo che l'operazione è stata pianificata, invia una notifica al paziente\n        await this.sendNotificationToPatient();\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\n          \"Errore durante la pianificazione dell'operazione:\",\n          error\n        );\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n    // Aggiungi questa funzione per inviare la notifica\n    async sendNotificationToPatient() {\n      try {\n        if (!this.operationDate || !this.operationTime || !this.description) {\n          alert(\n            \"Assicurati di aver inserito tutti i dettagli dell'operazione.\"\n          );\n          return;\n        }\n\n        // Estrae solo la parte dell'ora e dei minuti per `time`\n        const notificationTime = this.operationTime; // Già in formato HH:mm\n\n        // Crea il messaggio della notifica usando le informazioni dell'operazione\n        const notificationMessage = `Una nuova operazione è stata pianificata per te!`;\n\n        // Aggiunge la data e ora di invio della notifica\n        const sentAt = new Date().toISOString(); // Data e ora corrente in formato ISO 8601\n\n        // Chiamata al backend per inviare la notifica al paziente selezionato\n        const response = await fetch(\"/api/notifications\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            patientId: this.selectedPatientId,\n            message: notificationMessage,\n            date: this.operationDate,\n            time: notificationTime,\n            sentAt, // Aggiunge l'attributo sentAt alla richiesta\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || \"Errore nell'invio della notifica.\");\n        }\n\n        alert(\"Notifica inviata al paziente.\");\n      } catch (error) {\n        console.error(\"Errore nell'invio della notifica:\", error);\n        alert(\"Errore nell'invio della notifica.\");\n      }\n    },\n\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(\n          `DEBUG: Errore nella conversione della data ISO \"${isoString}\":`,\n          error\n        );\n        return \"Invalid Date\";\n      }\n    },\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n    },\n\n    // Caricamento dei dati di tutti i pazienti in parallelo\n    async loadAllPatientData(radiographsPerDay, operationsPerDay) {\n      const batchPromises = this.patients.map((patient) =>\n        this.loadPatientData(\n          patient.userId,\n          radiographsPerDay,\n          operationsPerDay\n        )\n      );\n\n      // Usa Promise.allSettled per evitare errori bloccanti\n      const results = await Promise.allSettled(batchPromises);\n\n      // Log dei risultati per il debug\n      results.forEach((result, index) => {\n        if (result.status === \"fulfilled\") {\n          console.log(\n            `Dati caricati per paziente ${this.patients[index].userId}`\n          );\n        } else {\n          console.error(\n            `Errore nel caricamento dei dati per paziente ${this.patients[index].userId}:`,\n            result.reason\n          );\n        }\n      });\n    },\n\n    // Carica i dati di un paziente specifico\n    async loadPatientData(patientId, radiographsPerDay, operationsPerDay) {\n      try {\n        const [operationsResponse, radiographsResponse, patientResponse] =\n          await Promise.all([\n            fetch(`/api/patients/${patientId}/operations`),\n            fetch(`/api/patients/${patientId}/radiographs`),\n            fetch(`/api/get_user/${patientId}`), // Nuova chiamata per recuperare i dettagli del paziente\n          ]);\n\n        // Controlla se tutte le risposte sono valide\n        if (operationsResponse.ok) {\n          const operationsData = await operationsResponse.json();\n          if (patientResponse.ok) {\n            const patientData = await patientResponse.json();\n            operationsData.forEach((operation) => {\n              operation.patientName = `${patientData.name} ${patientData.family_name}`;\n            });\n          }\n          this.handleLoadedData(\n            \"operations\",\n            patientId,\n            operationsData,\n            radiographsPerDay,\n            operationsPerDay\n          );\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n\n        if (radiographsResponse.ok) {\n          const radiographsData = await radiographsResponse.json();\n          this.handleLoadedData(\n            \"radiographs\",\n            patientId,\n            radiographsData,\n            radiographsPerDay,\n            operationsPerDay\n          );\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    // Funzione per gestire i dati caricati (operazioni o radiografie)\n    handleLoadedData(\n      type,\n      patientId,\n      data,\n      radiographsPerDay,\n      operationsPerDay\n    ) {\n      // Se l'utente è un medico, aggiorna la lista dei pazienti\n      if (this.isDoctor) {\n        const patient = this.patients.find((p) => p.userId === patientId);\n        if (patient) {\n          patient[type] = data;\n          console.log(\n            `${\n              type.charAt(0).toUpperCase() + type.slice(1)\n            } aggiunti al paziente:`,\n            patient[type]\n          );\n          // Aggiorna il dizionario globale per la visualizzazione\n          data.forEach((item) => {\n            const date = new Date(item.date).toDateString();\n            if (type === \"operations\") {\n              if (!operationsPerDay[date]) {\n                operationsPerDay[date] = [];\n              }\n              operationsPerDay[date].push(item);\n            } else {\n              if (!radiographsPerDay[date]) {\n                radiographsPerDay[date] = [];\n              }\n              radiographsPerDay[date].push(item);\n            }\n          });\n        }\n      } else {\n        this[type] = data;\n        console.log(\n          `${\n            type.charAt(0).toUpperCase() + type.slice(1)\n          } aggiunti al profilo del paziente:`,\n          this[type]\n        );\n        // Aggiorna anche il dizionario globale per la visualizzazione\n        data.forEach((item) => {\n          const date = new Date(item.date).toDateString();\n          if (type === \"operations\") {\n            if (!operationsPerDay[date]) {\n              operationsPerDay[date] = [];\n            }\n            operationsPerDay[date].push(item);\n          } else {\n            if (!radiographsPerDay[date]) {\n              radiographsPerDay[date] = [];\n            }\n            radiographsPerDay[date].push(item);\n          }\n        });\n      }\n    },\n\n    // Funzione per caricare i dati del paziente loggato\n    async loadUserData(radiographsPerDay, operationsPerDay) {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (this.radiographs) {\n        this.radiographs.forEach((radiograph) => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push({\n            ...radiograph,\n            patientName: `${userData.name} ${userData.family_name}`,\n          });\n        });\n      }\n\n      if (this.operations) {\n        this.operations.forEach((operation) => {\n          const operationDate = this.parseISODate(operation.operationDate);\n          if (operationDate !== \"Invalid Date\") {\n            const operationDateString = operationDate.toDateString();\n            if (!operationsPerDay[operationDateString]) {\n              operationsPerDay[operationDateString] = [];\n            }\n            operationsPerDay[operationDateString].push({\n              ...operation,\n              patientName: `${userData.name} ${userData.family_name}`,\n            });\n          }\n        });\n      }\n    },\n\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    formatDate(dateTime) {\n      const date = new Date(dateTime);\n      return date.toLocaleDateString(\"it-IT\"); // Mostra solo la data in formato italiano\n    },\n    formatTime(dateTime) {\n      const date = new Date(dateTime);\n      return date.toLocaleTimeString(\"it-IT\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      }); // Mostra solo l'ora in formato 24 ore\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // Trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.calendar-container {\n  max-width: 100%;\n  padding: 40px;\n  border-radius: 10px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n}\n\nh1.calendar {\n  font-size: 18px;\n  font-family: inherit;\n  font-weight: normal;\n  margin-bottom: 20px;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 999;\n}\n\n.modal-content {\n  background: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  width: 500px; /* Aumentiamo la larghezza del modale */\n  text-align: left;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n}\n\n.modal-content h2 {\n  font-size: 1.2em; /* Aumentiamo leggermente il font per il titolo */\n  margin-bottom: 15px;\n  color: #333;\n  font-weight: bold;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 5px;\n  color: #555;\n  font-weight: 600;\n  font-size: 0.85em; /* Ridotto per le etichette */\n}\n\n.modal-content select,\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 4px 8px; /* Ridotto ulteriormente il padding dei campi */\n  margin-bottom: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px; /* Border-radius più sottile */\n  font-size: 0.75em; /* Ridotto ulteriormente la dimensione del font */\n  box-sizing: border-box;\n  transition: border 0.3s ease;\n}\n\n.modal-content select:focus,\n.modal-content input:focus,\n.modal-content textarea:focus {\n  border-color: #007bff;\n  outline: none;\n}\n\n.modal-content textarea {\n  resize: vertical;\n  height: 60px; /* Ancora più piccola la textarea */\n}\n\n.modal-content button {\n  padding: 6px 12px; /* Ridotto il padding dei pulsanti */\n  border-radius: 4px;\n  border: none;\n  font-size: 12px; /* Ridotto ulteriormente la dimensione dei pulsanti */\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  margin-right: 6px;\n}\n\n.modal-content .btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.modal-content .btn-success:hover {\n  background-color: #218838;\n  transform: translateY(-2px);\n}\n\n.modal-content .btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n\n.modal-content .btn-secondary:hover {\n  background-color: #5a6268;\n  transform: translateY(-2px);\n}\n\n.modal-content .btn {\n  min-width: 90px; /* Ridotto il minimo larghezza dei pulsanti */\n}\n\n.modal-content .btn:focus {\n  outline: none;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  color: #007bff;\n  font-size: 0.7em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n.custom-btn {\n  display: block; /* Imposta il pulsante come blocco per permettere il centramento */\n  margin: 20px auto; /* Centra il pulsante e aggiungi un margine superiore di 20px */\n  background-color: #007bff; /* Colore di sfondo */\n  color: white; /* Colore del testo */\n  border-radius: 5px; /* Raggio dei bordi per renderlo arrotondato */\n  padding: 6px 12px; /* Ridotto il padding per rendere il pulsante più piccolo */\n  text-align: center; /* Allinea il testo al centro */\n  font-size: 14px; /* Dimensione del font più piccola */\n  max-width: 200px; /* Limita la larghezza massima del pulsante */\n  width: 100%; /* Permette di ridimensionare il pulsante in base alla larghezza del contenitore */\n}\n\n.custom-btn:hover {\n  background-color: #0056b3; /* Colore di hover per effetto */\n  color: white;\n  cursor: pointer; /* Cambia il cursore su hover */\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}