{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  class: \"calendar\"\n};\nconst _hoisted_4 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_5 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  class: \"date\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"radiograph-count\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_10 = {\n  key: 0\n};\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[8] || (_cache[8] = _createElementVNode(\"h1\", null, \"Calendario Attività\", -1 /* HOISTED */)), _createCommentVNode(\" Verifica se l'utente è un paziente \"), $data.isPatient ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => $options.showDayDetails(day)\n    }, [_createElementVNode(\"div\", _hoisted_7, _toDisplayString(day.date), 1 /* TEXT */), day.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, _toDisplayString(day.radiographs.length) + \" \" + _toDisplayString(day.radiographs.length === 1 ? 'caricamento radiografia' : 'caricamenti radiografie'), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"slide\"\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"h2\", null, \"Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Paziente:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.selectedPatient.name) + \" \" + _toDisplayString($data.selectedPatient.family_name), 1 /* TEXT */)]), $data.selectedDay.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_cache[5] || (_cache[5] = _createElementVNode(\"h3\", null, \"Radiografie caricate:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.name), 1 /* TEXT */), _cache[3] || (_cache[3] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString(radiograph.date), 1 /* TEXT */), _cache[4] || (_cache[4] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \"Visualizza Immagine\", 8 /* PROPS */, _hoisted_11)]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_12, _cache[6] || (_cache[6] = [_createElementVNode(\"p\", null, \"Nessuna radiografia caricate per questa data.\", -1 /* HOISTED */)])))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  })])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Messaggio per gli altri ruoli (es. medico) \"), _cache[7] || (_cache[7] = _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, \"Solo i pazienti possono vedere le loro radiografie nel calendario.\")], -1 /* HOISTED */))], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","$data","isPatient","_hoisted_2","_hoisted_3","_hoisted_4","onClick","_cache","$event","$options","changeMonth","_toDisplayString","monthNames","month","year","_hoisted_5","_Fragment","_renderList","daysInMonth","day","date","showDayDetails","_hoisted_7","radiographs","length","_hoisted_8","_hoisted_6","_createVNode","_Transition","name","default","_withCtx","selectedDay","_hoisted_9","_createTextVNode","selectedPatient","family_name","_hoisted_10","radiograph","enlargeRadiograph","url","_hoisted_11","_hoisted_12","_"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n\n    <!-- Verifica se l'utente è un paziente -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <div class=\"calendar-grid\">\n          <div v-for=\"day in daysInMonth\" :key=\"day.date\" class=\"calendar-day\" @click=\"showDayDetails(day)\">\n            <div class=\"date\">{{ day.date }}</div>\n            <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n              {{ day.radiographs.length }} {{ day.radiographs.length === 1 ? 'caricamento radiografia' : 'caricamenti radiografie' }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition name=\"slide\">\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }} {{ year }}</h2>\n          <p><strong>Paziente:</strong> {{ selectedPatient.name }} {{ selectedPatient.family_name }}</p>\n          <div v-if=\"selectedDay.radiographs.length > 0\">\n            <h3>Radiografie caricate:</h3>\n            <ul>\n              <li v-for=\"radiograph in selectedDay.radiographs\" :key=\"radiograph.name\">\n                <strong>{{ radiograph.name }}</strong><br />\n                <span>{{ radiograph.date }}</span><br />\n                <button @click=\"enlargeRadiograph(radiograph.url)\">Visualizza Immagine</button>\n              </li>\n            </ul>\n          </div>\n          <div v-else>\n            <p>Nessuna radiografia caricate per questa data.</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n\n    <!-- Messaggio per gli altri ruoli (es. medico) -->\n    <div v-else>\n      <p>Solo i pazienti possono vedere le loro radiografie nel calendario.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(),  // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [],  // Le radiografie caricate\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', \n        'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n      patientId: null, // ID del paziente\n      selectedPatient: null // Paziente selezionato (loggato)\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isPatient) {\n      this.loadRadiographs();\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i);\n        const radiographsOnDay = this.radiographs.filter(\n          (radiograph) => new Date(radiograph.date).toDateString() === dayDate.toDateString()\n        );\n\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay\n        });\n      }\n      return days;\n    }\n  },\n  methods: {\n    checkUserRole() {\n      // Verifica il ruolo dell'utente\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente dal localStorage\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n        console.log(\"Ruolo utente: Paziente\");\n      } else {\n        this.isPatient = false;\n        console.log(\"Ruolo utente: Non paziente\");\n      }\n    },\n\n    async loadRadiographs() {\n      // Carica le radiografie dal backend solo per il paziente loggato\n      if (!this.patientId) {\n        console.error(\"ID paziente non trovato.\");\n        return;\n      }\n\n      try {\n        console.log(\"Caricamento radiografie per paziente con ID:\", this.patientId);\n\n        const response = await fetch(`/api/patients/${this.patientId}/radiographs`);\n\n        if (response.ok) {\n          const data = await response.json();\n          this.radiographs = data;\n          \n          // Stampa le informazioni sulle radiografie caricate\n          console.log(\"Radiografie ricevute dal backend:\", this.radiographs);\n          \n          // Aggiungi un loop per stampare tutte le informazioni sulle singole radiografie\n          this.radiographs.forEach((radiograph, index) => {\n            console.log(`Radiografia ${index + 1}:`);\n            console.log(`Nome: ${radiograph.name}`);\n            console.log(`Data: ${radiograph.date}`);\n            console.log(`URL: ${radiograph.url}`);\n            console.log(`Descrizione: ${radiograph.description}`);\n          });\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    showDayDetails(day) {\n      // Se il giorno è già selezionato, chiudi i dettagli\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      // Visualizza l'immagine della radiografia in modalità ingrandita\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      // Cambia mese\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.radiograph-count {\n  position: absolute;\n  bottom: 10px;\n  left: 5px;\n  font-size: 0.9em;\n  color: #007bff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 1.5em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n.day-details {\n  margin-top: 20px;\n  text-align: left;\n  transition: max-height 0.3s ease-in-out;\n  max-height: 500px; /* Max height per contenere il contenuto */\n  overflow: hidden;\n}\n\n.day-details h2 {\n  font-size: 1.5em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\nul {\n  list-style-type: none;\n  padding-left: 0;\n}\n\nli {\n  margin: 10px 0;\n}\n\nli button {\n  font-size: 1em;\n  padding: 5px 10px;\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  border: none;\n}\n\nli button:hover {\n  background-color: #0056b3;\n}\n\n/* Transizione scorrimento */\n.slide-enter-active, .slide-leave-active {\n  transition: transform 0.3s ease;\n}\n\n.slide-enter, .slide-leave-to {\n  transform: translateY(-20px);\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}