{"ast":null,"code":"export default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      radiographs: [],\n      // Le radiografie caricate\n      operations: [],\n      selectedDay: null,\n      // Giorno selezionato\n      monthNames: [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"],\n      daysOfWeek: [\"Lunedì\", \"Martedì\", \"Mercoledì\", \"Giovedì\", \"Venerdì\", \"Sabato\", \"Domenica\"],\n      currentDate: new Date(),\n      // Data corrente\n      month: new Date().getMonth(),\n      // Mese corrente\n      year: new Date().getFullYear(),\n      // Anno corrente\n      isPatient: false,\n      // Indica se l'utente è un paziente\n      isDoctor: false,\n      // Indica se l'utente è un dottore\n      selectedPatient: null,\n      // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [],\n      // Pazienti associati al dottore\n      showModal: false,\n      // Controlla la visibilità del modale\n      operationDate: \"\",\n      // Data dell'operazione\n      operationTime: \"\",\n      description: \"\",\n      // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0],\n      // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\")\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n      this.loadOperations();\n      this.refreshCalendar();\n    }\n  },\n  computed: {\n    weekDays() {\n      // Ottieni il primo giorno della settimana (Lunedì)\n      const startOfWeek = this.getStartOfWeek(this.currentDate);\n      let days = [];\n\n      // Aggiungi i giorni della settimana partendo dal lunedì\n      for (let i = 0; i < 7; i++) {\n        let currentDay = new Date(startOfWeek);\n        currentDay.setDate(startOfWeek.getDate() + i);\n        days.push(currentDay);\n      }\n      return days;\n    },\n    daysInMonth() {\n      // Crea un array per tenere traccia delle radiografie per ogni giorno\n      const radiographsPerDay = {};\n\n      // Crea un array per tenere traccia delle operazioni per ogni giorno\n      const operationsPerDay = {};\n      if (this.isDoctor) {\n        console.log(\"DEBUG: Utente loggato come medico.\");\n        // Aggrega tutte le radiografie dei pazienti associati al dottore\n        this.patients.forEach(patient => {\n          console.log(`DEBUG: Elaborazione paziente: ${patient.name} ${patient.family_name}`);\n          if (patient.radiographs) {\n            patient.radiographs.forEach(radiograph => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`\n              });\n            });\n          }\n\n          // Debug per le operazioni dei pazienti\n          if (patient.operations) {\n            console.log(`DEBUG: Operazioni del paziente ${patient.name} ${patient.family_name}:`, patient.operations);\n            patient.operations.forEach(operation => {\n              // Conversione esplicita della data\n              if (!operation.operationDate) {\n                console.warn(`DEBUG: Operazione senza data trovata:`, operation);\n                return; // Salta questa operazione\n              }\n\n              // Conversione della data con parsing robusto\n              const operationDate = this.parseISODate(operation.operationDate);\n              console.log(`DEBUG: Data operazione convertita: ${operationDate}, Operazione:`, operation);\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}`\n                });\n              } else {\n                console.warn(`DEBUG: Operazione scartata a causa di una data non valida:`, operation);\n              }\n            });\n          }\n          console.log(\"DEBUG: daysInMonth\", this.daysInMonth);\n        });\n      } else {\n        console.log(\"DEBUG: Utente loggato come paziente.\");\n        // Se l'utente è un paziente, usa le proprie radiografie\n        this.radiographs.forEach(radiograph => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push(radiograph);\n        });\n\n        // Debug per le operazioni del paziente\n        console.log(\"DEBUG: Operazioni del paziente:\", this.operations);\n        this.operations.forEach(operation => {\n          if (!operation.operationDate) {\n            console.warn(\"DEBUG: Operazione senza data trovata:\", operation);\n            return; // Salta questa operazione\n          }\n          const operationDate = this.parseISODate(operation.operationDate);\n          console.log(`DEBUG: Data operazione convertita: ${operationDate}, Operazione:`, operation);\n          if (operationDate !== \"Invalid Date\") {\n            if (!operationsPerDay[operationDate]) {\n              operationsPerDay[operationDate] = [];\n            }\n            operationsPerDay[operationDate].push(operation);\n          } else {\n            console.warn(`DEBUG: Operazione scartata a causa di una data non valida:`, operation);\n          }\n        });\n      }\n\n      // Trova il primo giorno del mese e il suo giorno della settimana\n      const days = [];\n      const currentMonth = new Date(this.year, this.month, 1); // Primo giorno del mese corrente\n\n      const firstDayOfWeek = currentMonth.getDay(); // Giorno della settimana (0 = Domenica, 1 = Lunedì, ..., 6 = Sabato)\n      const offsetStart = firstDayOfWeek === 0 ? -6 : 1 - firstDayOfWeek; // Sposta al lunedì più vicino (o rimane su lunedì)\n\n      const startDate = new Date(currentMonth); // Data di partenza del calendario\n      startDate.setDate(startDate.getDate() + offsetStart); // Vai al lunedì precedente\n\n      // Popola i giorni del mese\n      for (let i = 0; i < 42; i++) {\n        const currentDate = new Date(startDate);\n        currentDate.setDate(startDate.getDate() + i);\n\n        // Controlla se il giorno corrente appartiene al mese attuale\n        const isCurrentMonth = currentDate.getMonth() === this.month;\n\n        // Aggiungi le radiografie e le operazioni per ogni giorno\n        const dayString = new Date(this.year, this.month, i).toDateString();\n        const radiographsOnDay = this.radiographsPerDay?.[dayString] || [];\n        const operationsOnDay = this.operationsPerDay?.[dayString] || [];\n\n        // Debug per le operazioni aggregate per giorno\n        console.log(`DEBUG: Giorno: ${dayDate}, Operazioni trovate:`, operationsOnDay);\n\n        // Aggiungi il giorno alla lista\n        days.push({\n          date: currentDate.getDate(),\n          // Numero del giorno\n          fullDate: currentDate,\n          // Oggetto Date completo\n          isCurrentMonth: isCurrentMonth,\n          // Indica se è del mese corrente\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay\n        });\n      }\n      console.log(\"DEBUG: Struttura finale dei giorni:\", days);\n      return days;\n    }\n  },\n  methods: {\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (!this.selectedPatientId || !this.operationDate || !this.operationTime || !this.description) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(this.operationDate, this.operationTime);\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate,\n            // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString() // Timestamp di creazione\n          })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || \"Errore durante la pianificazione dell'operazione.\");\n        }\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\"Errore durante la pianificazione dell'operazione:\", error);\n        alert(\"Errore: \" + error.message);\n      }\n    },\n    getStartOfWeek(date) {\n      // Calcola il lunedì della settimana\n      const day = date.getDay(),\n        diff = day == 0 ? -6 : 1 - day; // Se domenica, metti -6 per tornare al lunedì\n      const startOfWeek = new Date(date);\n      startOfWeek.setDate(date.getDate() + diff);\n      return startOfWeek;\n    },\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(`DEBUG: Errore nella conversione della data ISO \"${isoString}\":`, error);\n        return \"Invalid Date\";\n      }\n    },\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n\n        // Carica le operazioni del paziente loggato\n        this.loadPatientOperations();\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n    // Modifica per caricare le radiografie dei pazienti\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie per ogni paziente\n          this.patients.forEach(patient => {\n            this.loadRadiographs(patient.userId); // Carica le radiografie per ogni paziente\n            this.loadOperations(patient.userId);\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n    async loadOperations(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/operations`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Log delle operazioni trovate\n          console.log(`Operazioni trovate per il paziente con ID ${patientId}:`, data);\n\n          // Trova il paziente e aggiungi le operazioni al suo record\n          const patient = this.patients.find(p => p.userId === patientId);\n          if (patient) {\n            patient.operations = data; // Aggiungi le operazioni al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n    // Modifica per caricare le radiografie specifiche di un paziente\n    async loadRadiographs(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Trova il paziente e aggiungi le radiografie al suo record\n          const patient = this.patients.find(p => p.userId === patientId);\n          if (patient) {\n            patient.radiographs = data; // Aggiungi le radiografie al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    }\n  }\n};","map":{"version":3,"names":["name","data","loadingPrediction","successMessage","radiographs","operations","selectedDay","monthNames","daysOfWeek","currentDate","Date","month","getMonth","year","getFullYear","isPatient","isDoctor","selectedPatient","selectedPatientId","patients","showModal","operationDate","operationTime","description","minDate","toISOString","split","operationIcon","require","radiographIcon","mounted","checkUserRole","loadPatients","loadRadiographs","loadOperations","refreshCalendar","computed","weekDays","startOfWeek","getStartOfWeek","days","i","currentDay","setDate","getDate","push","daysInMonth","radiographsPerDay","operationsPerDay","console","log","forEach","patient","family_name","radiograph","radiographDate","date","toDateString","patientName","operation","warn","parseISODate","currentMonth","firstDayOfWeek","getDay","offsetStart","startDate","isCurrentMonth","dayString","radiographsOnDay","operationsOnDay","dayDate","fullDate","methods","openScheduleModal","closeScheduleModal","scheduleOperation","alert","doctorId","localStorage","getItem","selectedDate","today","setHours","formattedDate","combineDateAndTime","response","fetch","method","headers","body","JSON","stringify","patientId","createdAt","ok","error","json","Error","message","showActivityCalendar","day","diff","isoString","isNaN","time","getMinDate","yyyy","mm","toString","padStart","dd","closeModal","userData","parse","role","userId","loadPatientOperations","find","p","$forceUpdate","showDayDetails","enlargeRadiograph","url","modalImageUrl","isModalOpen","changeMonth","direction","beforeEnter","el","style","opacity","enter","done","offsetHeight","transition","leave"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n    <button @click=\"openScheduleModal\" class=\"btn btn-primary\">\n      Pianifica Operazione\n    </button>\n\n    <!-- Modale per inserire i dettagli dell'operazione -->\n    <div v-if=\"showModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h2>Pianifica una nuova operazione</h2>\n        <!-- Menu a tendina per selezionare un paziente -->\n        <label for=\"patientSelect\">Seleziona un paziente:</label>\n        <select\n          v-model=\"selectedPatientId\"\n          id=\"patientSelect\"\n          class=\"form-select\"\n        >\n          <option value=\"\" disabled>Seleziona un paziente</option>\n          <option\n            v-for=\"patient in patients\"\n            :key=\"patient.userId\"\n            :value=\"patient.userId\"\n          >\n            {{ patient.name }} {{ patient.family_name }}\n          </option>\n        </select>\n\n        <label for=\"operationDate\">Data dell'operazione:</label>\n        <input\n          type=\"date\"\n          v-model=\"operationDate\"\n          id=\"operationDate\"\n          :min=\"minDate\"\n        />\n\n        <label for=\"operationTime\">Ora dell'operazione:</label>\n        <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\n\n        <label for=\"description\">Descrizione:</label>\n        <textarea v-model=\"description\" id=\"description\"></textarea>\n\n        <button @click=\"scheduleOperation\" class=\"btn btn-success\">\n          Salva\n        </button>\n        <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\n          Annulla\n        </button>\n      </div>\n    </div>\n    <!-- Verifica se l'utente è un paziente o un dottore -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <!-- Header con i giorni della settimana -->\n        <div class=\"calendar-weekdays\">\n          <div v-for=\"day in daysOfWeek\" :key=\"day\" class=\"calendar-weekday\">\n            {{ day }}\n          </div>\n        </div>\n        <div class=\"calendar-grid\">\n          <!-- Giorni del mese -->\n          <div\n            v-for=\"day in daysInMonth\"\n            :key=\"day.fullDate\"\n            class=\"calendar-day\"\n            :class=\"{ 'not-current-month': !day.isCurrentMonth }\"\n            @click=\"day.isCurrentMonth && showDayDetails(day)\"\n          >\n            <div class=\"date\">{{ day.date }}</div>\n\n            <!-- Icone Operazioni -->\n            <div class=\"icon-row operations\">\n              <img\n                v-for=\"n in day.operations.length\"\n                :key=\"'operation-' + n + '-' + day.fullDate\"\n                :src=\"operationIcon\"\n                alt=\"Operazione\"\n                class=\"icon\"\n              />\n            </div>\n\n            <!-- Icone Radiografie -->\n            <div class=\"icon-row radiographs\">\n              <img\n                v-for=\"n in day.radiographs.length\"\n                :key=\"'radiograph-' + n + '-' + day.fullDate\"\n                :src=\"radiographIcon\"\n                alt=\"Radiografia\"\n                class=\"icon\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <p>\n            <strong>Paziente:</strong> {{ selectedPatient.name }}\n            {{ selectedPatient.family_name }}\n          </p>\n          <div v-if=\"selectedDay.radiographs.length > 0\">\n            <h3>Radiografie caricate:</h3>\n            <ul>\n              <li\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <strong>{{ radiograph.name }}</strong\n                ><br />\n                <span>{{ radiograph.date }}</span\n                ><br />\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </li>\n            </ul>\n          </div>\n          <div v-else>\n            <p>Nessuna radiografia caricata per questa data.</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n\n    <!-- Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti -->\n    <div v-else>\n      <div v-if=\"isDoctor\">\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"changeMonth(-1)\">&#8249;</button>\n            <span>{{ monthNames[month] }} {{ year }}</span>\n            <button @click=\"changeMonth(1)\">&#8250;</button>\n          </div>\n\n          <!-- Header con i giorni della settimana -->\n          <div class=\"calendar-weekdays\">\n            <div v-for=\"day in daysOfWeek\" :key=\"day\" class=\"calendar-weekday\">\n              {{ day }}\n            </div>\n          </div>\n\n          <!-- Giorni del calendario -->\n          <div class=\"calendar-grid\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"day.fullDate\"\n              class=\"calendar-day\"\n              :class=\"{ 'not-current-month': !day.isCurrentMonth }\"\n              @click=\"day.isCurrentMonth && showDayDetails(day)\"\n            >\n              <!-- Data -->\n              <div class=\"date\">{{ day.date }}</div>\n\n              <!-- Icone Operazioni -->\n              <div class=\"icon-row operations\">\n                <img\n                  v-for=\"n in day.operations.length\"\n                  :key=\"'operation-' + n + '-' + day.fullDate\"\n                  :src=\"operationIcon\"\n                  alt=\"Operazione\"\n                  class=\"icon\"\n                />\n              </div>\n\n              <!-- Icone Radiografie -->\n              <div class=\"icon-row radiographs\">\n                <img\n                  v-for=\"n in day.radiographs.length\"\n                  :key=\"'radiograph-' + n + '-' + day.fullDate\"\n                  :src=\"radiographIcon\"\n                  alt=\"Radiografia\"\n                  class=\"icon\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <div\n            v-for=\"radiograph in selectedDay.radiographs\"\n            :key=\"radiograph.name\"\n          >\n            <p>\n              <strong>{{ radiograph.patientName }}:</strong>\n              {{ radiograph.name }}\n            </p>\n            <button @click=\"enlargeRadiograph(radiograph.url)\">\n              Visualizza Immagine\n            </button>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      radiographs: [], // Le radiografie caricate\n      operations: [],\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      daysOfWeek: [\n        \"Lunedì\",\n        \"Martedì\",\n        \"Mercoledì\",\n        \"Giovedì\",\n        \"Venerdì\",\n        \"Sabato\",\n        \"Domenica\",\n      ],\n      currentDate: new Date(), // Data corrente\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      selectedPatient: null, // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [], // Pazienti associati al dottore\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\"),\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n      this.loadOperations();\n      this.refreshCalendar();\n    }\n  },\n  computed: {\n    weekDays() {\n      // Ottieni il primo giorno della settimana (Lunedì)\n      const startOfWeek = this.getStartOfWeek(this.currentDate);\n      let days = [];\n\n      // Aggiungi i giorni della settimana partendo dal lunedì\n      for (let i = 0; i < 7; i++) {\n        let currentDay = new Date(startOfWeek);\n        currentDay.setDate(startOfWeek.getDate() + i);\n        days.push(currentDay);\n      }\n\n      return days;\n    },\n    daysInMonth() {\n      // Crea un array per tenere traccia delle radiografie per ogni giorno\n      const radiographsPerDay = {};\n\n      // Crea un array per tenere traccia delle operazioni per ogni giorno\n      const operationsPerDay = {};\n\n      if (this.isDoctor) {\n        console.log(\"DEBUG: Utente loggato come medico.\");\n        // Aggrega tutte le radiografie dei pazienti associati al dottore\n        this.patients.forEach((patient) => {\n          console.log(\n            `DEBUG: Elaborazione paziente: ${patient.name} ${patient.family_name}`\n          );\n          if (patient.radiographs) {\n            patient.radiographs.forEach((radiograph) => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n\n          // Debug per le operazioni dei pazienti\n          if (patient.operations) {\n            console.log(\n              `DEBUG: Operazioni del paziente ${patient.name} ${patient.family_name}:`,\n              patient.operations\n            );\n            patient.operations.forEach((operation) => {\n              // Conversione esplicita della data\n              if (!operation.operationDate) {\n                console.warn(\n                  `DEBUG: Operazione senza data trovata:`,\n                  operation\n                );\n                return; // Salta questa operazione\n              }\n\n              // Conversione della data con parsing robusto\n              const operationDate = this.parseISODate(operation.operationDate);\n              console.log(\n                `DEBUG: Data operazione convertita: ${operationDate}, Operazione:`,\n                operation\n              );\n\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}`,\n                });\n              } else {\n                console.warn(\n                  `DEBUG: Operazione scartata a causa di una data non valida:`,\n                  operation\n                );\n              }\n            });\n          }\n          console.log(\"DEBUG: daysInMonth\", this.daysInMonth);\n        });\n      } else {\n        console.log(\"DEBUG: Utente loggato come paziente.\");\n        // Se l'utente è un paziente, usa le proprie radiografie\n        this.radiographs.forEach((radiograph) => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push(radiograph);\n        });\n\n        // Debug per le operazioni del paziente\n        console.log(\"DEBUG: Operazioni del paziente:\", this.operations);\n        this.operations.forEach((operation) => {\n          if (!operation.operationDate) {\n            console.warn(\"DEBUG: Operazione senza data trovata:\", operation);\n            return; // Salta questa operazione\n          }\n\n          const operationDate = this.parseISODate(operation.operationDate);\n          console.log(\n            `DEBUG: Data operazione convertita: ${operationDate}, Operazione:`,\n            operation\n          );\n\n          if (operationDate !== \"Invalid Date\") {\n            if (!operationsPerDay[operationDate]) {\n              operationsPerDay[operationDate] = [];\n            }\n            operationsPerDay[operationDate].push(operation);\n          } else {\n            console.warn(\n              `DEBUG: Operazione scartata a causa di una data non valida:`,\n              operation\n            );\n          }\n        });\n      }\n\n      // Trova il primo giorno del mese e il suo giorno della settimana\n      const days = [];\n      const currentMonth = new Date(this.year, this.month, 1); // Primo giorno del mese corrente\n\n      const firstDayOfWeek = currentMonth.getDay(); // Giorno della settimana (0 = Domenica, 1 = Lunedì, ..., 6 = Sabato)\n      const offsetStart = firstDayOfWeek === 0 ? -6 : 1 - firstDayOfWeek; // Sposta al lunedì più vicino (o rimane su lunedì)\n\n      const startDate = new Date(currentMonth); // Data di partenza del calendario\n      startDate.setDate(startDate.getDate() + offsetStart); // Vai al lunedì precedente\n\n      // Popola i giorni del mese\n      for (let i = 0; i < 42; i++) {\n        const currentDate = new Date(startDate);\n        currentDate.setDate(startDate.getDate() + i);\n\n        // Controlla se il giorno corrente appartiene al mese attuale\n        const isCurrentMonth = currentDate.getMonth() === this.month;\n\n        // Aggiungi le radiografie e le operazioni per ogni giorno\n        const dayString = new Date(this.year, this.month, i).toDateString();\n        const radiographsOnDay = this.radiographsPerDay?.[dayString] || [];\n        const operationsOnDay = this.operationsPerDay?.[dayString] || [];\n\n        // Debug per le operazioni aggregate per giorno\n        console.log(\n          `DEBUG: Giorno: ${dayDate}, Operazioni trovate:`,\n          operationsOnDay\n        );\n\n        // Aggiungi il giorno alla lista\n        days.push({\n          date: currentDate.getDate(), // Numero del giorno\n          fullDate: currentDate, // Oggetto Date completo\n          isCurrentMonth: isCurrentMonth, // Indica se è del mese corrente\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n        });\n      }\n\n      console.log(\"DEBUG: Struttura finale dei giorni:\", days);\n      return days;\n    },\n  },\n  methods: {\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (\n          !this.selectedPatientId ||\n          !this.operationDate ||\n          !this.operationTime ||\n          !this.description\n        ) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(\n          this.operationDate,\n          this.operationTime\n        );\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate, // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString(), // Timestamp di creazione\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\n          );\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\n          \"Errore durante la pianificazione dell'operazione:\",\n          error\n        );\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n    getStartOfWeek(date) {\n      // Calcola il lunedì della settimana\n      const day = date.getDay(),\n        diff = day == 0 ? -6 : 1 - day; // Se domenica, metti -6 per tornare al lunedì\n      const startOfWeek = new Date(date);\n      startOfWeek.setDate(date.getDate() + diff);\n      return startOfWeek;\n    },\n\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(\n          `DEBUG: Errore nella conversione della data ISO \"${isoString}\":`,\n          error\n        );\n        return \"Invalid Date\";\n      }\n    },\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n\n        // Carica le operazioni del paziente loggato\n        this.loadPatientOperations();\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n\n    // Modifica per caricare le radiografie dei pazienti\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie per ogni paziente\n          this.patients.forEach((patient) => {\n            this.loadRadiographs(patient.userId); // Carica le radiografie per ogni paziente\n            this.loadOperations(patient.userId);\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    async loadOperations(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/operations`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Log delle operazioni trovate\n          console.log(\n            `Operazioni trovate per il paziente con ID ${patientId}:`,\n            data\n          );\n\n          // Trova il paziente e aggiungi le operazioni al suo record\n          const patient = this.patients.find((p) => p.userId === patientId);\n          if (patient) {\n            patient.operations = data; // Aggiungi le operazioni al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    // Modifica per caricare le radiografie specifiche di un paziente\n    async loadRadiographs(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Trova il paziente e aggiungi le radiografie al suo record\n          const patient = this.patients.find((p) => p.userId === patientId);\n          if (patient) {\n            patient.radiographs = data; // Aggiungi le radiografie al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.calendar-weekdays,\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  width: 100%;\n}\n\n.calendar-weekday {\n  text-align: center;\n  font-weight: bold;\n}\n\n.calendar-day {\n  border: 1px solid #ddd;\n  padding: 10px;\n  text-align: center;\n  position: relative;\n}\n\n.calendar-day.not-current-month {\n  color: #bbb; /* Colore schiarito */\n  background-color: #f9f9f9; /* Sfondo diverso */\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.activity-icons {\n  display: flex;\n  flex-direction: column; /* Cambia la direzione per impilare le righe */\n  align-items: center;\n  gap: 10px; /* Spazio tra righe */\n  margin-top: 5px;\n}\n\n.icon-row {\n  display: flex;\n  justify-content: center;\n  gap: 2px; /* Spazio tra le icone nella stessa riga */\n}\n\n.operations {\n  margin-bottom: 5px; /* Aggiunge margine tra operazioni e radiografie */\n}\n\n.icon {\n  width: 10px;\n  height: 10px;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 0.7em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 20px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 0.7em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 400px;\n  text-align: center;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 10px;\n  text-align: left;\n}\n\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n}\n\n.btn {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}