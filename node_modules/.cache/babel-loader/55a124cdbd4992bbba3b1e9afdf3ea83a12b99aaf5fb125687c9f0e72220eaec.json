{"ast":null,"code":"export default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(),\n      // Mese corrente\n      year: new Date().getFullYear(),\n      // Anno corrente\n      radiographs: [],\n      // Le radiografie caricate\n      selectedDay: null,\n      // Giorno selezionato\n      monthNames: [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"],\n      isPatient: false,\n      // Indica se l'utente è un paziente\n      isDoctor: false,\n      // Indica se l'utente è un dottore\n      patientId: null,\n      // ID del paziente\n      selectedPatient: null,\n      // Paziente selezionato (loggato)\n      patients: [] // Pazienti associati al dottore\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      // Crea un array per tenere traccia delle radiografie per ogni giorno\n      const radiographsPerDay = {};\n      if (this.isDoctor) {\n        // Aggrega tutte le radiografie dei pazienti associati al dottore\n        this.patients.forEach(patient => {\n          if (patient.radiographs) {\n            patient.radiographs.forEach(radiograph => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`\n              });\n            });\n          }\n        });\n      } else {\n        // Se l'utente è un paziente, usa le proprie radiografie\n        this.radiographs.forEach(radiograph => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push(radiograph);\n        });\n      }\n\n      // Popola i giorni del mese\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i).toDateString();\n        const radiographsOnDay = radiographsPerDay[dayDate] || [];\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay\n        });\n      }\n      return days;\n    }\n  },\n  methods: {\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n    // Modifica per caricare le radiografie di tutti i pazienti\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie per ogni paziente\n          this.patients.forEach(patient => {\n            this.loadRadiographs(patient.userId); // Carica le radiografie per ogni paziente\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n    // Modifica per caricare le radiografie specifiche di un paziente\n    async loadRadiographs(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Trova il paziente e aggiungi le radiografie al suo record\n          const patient = this.patients.find(p => p.userId === patientId);\n          if (patient) {\n            patient.radiographs = data; // Aggiungi le radiografie al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    }\n  }\n};","map":{"version":3,"names":["name","data","loadingPrediction","successMessage","month","Date","getMonth","year","getFullYear","radiographs","selectedDay","monthNames","isPatient","isDoctor","patientId","selectedPatient","patients","mounted","checkUserRole","loadPatients","loadRadiographs","computed","daysInMonth","days","lastDayOfMonth","totalDays","getDate","radiographsPerDay","forEach","patient","radiograph","radiographDate","date","toDateString","push","patientName","family_name","i","dayDate","radiographsOnDay","methods","userData","JSON","parse","localStorage","getItem","role","userId","console","log","doctorId","response","fetch","json","error","ok","find","p","showDayDetails","day","enlargeRadiograph","url","modalImageUrl","isModalOpen","changeMonth","direction","beforeEnter","el","style","opacity","enter","done","offsetHeight","transition","leave"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n\n    <!-- Verifica se l'utente è un paziente o un dottore -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <div class=\"calendar-grid\">\n          <div\n            v-for=\"day in daysInMonth\"\n            :key=\"day.date\"\n            class=\"calendar-day\"\n            @click=\"showDayDetails(day)\"\n          >\n            <div class=\"date\">{{ day.date }}</div>\n            <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n              {{ day.radiographs.length }}\n              {{\n                day.radiographs.length === 1\n                  ? \"caricamento radiografia\"\n                  : \"caricamenti radiografie\"\n              }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <p>\n            <strong>Paziente:</strong> {{ selectedPatient.name }}\n            {{ selectedPatient.family_name }}\n          </p>\n          <div v-if=\"selectedDay.radiographs.length > 0\">\n            <h3>Radiografie caricate:</h3>\n            <ul>\n              <li\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <strong>{{ radiograph.name }}</strong\n                ><br />\n                <span>{{ radiograph.date }}</span\n                ><br />\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </li>\n            </ul>\n          </div>\n          <div v-else>\n            <p>Nessuna radiografia caricate per questa data.</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n\n    <!-- Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti -->\n    <div v-else>\n      <div v-if=\"isDoctor\">\n        <div v-if=\"patients.length > 0\">\n          <h2>Elenco Pazienti</h2>\n          <ul class=\"patient-list\">\n            <li\n              v-for=\"patient in patients\"\n              :key=\"patient.userId\"\n              @click=\"selectPatient(patient)\"\n              class=\"patient-item\"\n            >\n              {{ patient.name }} {{ patient.family_name }}\n            </li>\n          </ul>\n        </div>\n        <div v-else>\n          <p class=\"no-patients\">Nessun paziente associato trovato.</p>\n        </div>\n\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"changeMonth(-1)\">&#8249;</button>\n            <span>{{ monthNames[month] }} {{ year }}</span>\n            <button @click=\"changeMonth(1)\">&#8250;</button>\n          </div>\n\n          <div class=\"calendar-grid\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"day.date\"\n              class=\"calendar-day\"\n              @click=\"showDayDetails(day)\"\n            >\n              <div class=\"date\">{{ day.date }}</div>\n              <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n                {{ day.radiographs.length }}\n                {{\n                  day.radiographs.length === 1\n                    ? \"caricamento radiografia\"\n                    : \"caricamenti radiografie\"\n                }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <div\n            v-for=\"radiograph in selectedDay.radiographs\"\n            :key=\"radiograph.name\"\n          >\n            <p>\n              <strong>{{ radiograph.patientName }}:</strong>\n              {{ radiograph.name }}\n            </p>\n            <button @click=\"enlargeRadiograph(radiograph.url)\">\n              Visualizza Immagine\n            </button>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      patientId: null, // ID del paziente\n      selectedPatient: null, // Paziente selezionato (loggato)\n      patients: [], // Pazienti associati al dottore\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      // Crea un array per tenere traccia delle radiografie per ogni giorno\n      const radiographsPerDay = {};\n\n      if (this.isDoctor) {\n        // Aggrega tutte le radiografie dei pazienti associati al dottore\n        this.patients.forEach(patient => {\n          if (patient.radiographs) {\n            patient.radiographs.forEach(radiograph => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n        });\n      } else {\n        // Se l'utente è un paziente, usa le proprie radiografie\n        this.radiographs.forEach(radiograph => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push(radiograph);\n        });\n      }\n\n      // Popola i giorni del mese\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i).toDateString();\n        const radiographsOnDay = radiographsPerDay[dayDate] || [];\n\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay,\n        });\n      }\n\n      return days;\n    },\n  },\n  methods: {\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n\n    // Modifica per caricare le radiografie di tutti i pazienti\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie per ogni paziente\n          this.patients.forEach(patient => {\n            this.loadRadiographs(patient.userId); // Carica le radiografie per ogni paziente\n          });\n\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    // Modifica per caricare le radiografie specifiche di un paziente\n    async loadRadiographs(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n          \n          // Trova il paziente e aggiungi le radiografie al suo record\n          const patient = this.patients.find(p => p.userId === patientId);\n          if (patient) {\n            patient.radiographs = data; // Aggiungi le radiografie al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.radiograph-count {\n  position: absolute;\n  bottom: 10px;\n  left: 5px;\n  font-size: 0.9em;\n  color: #007bff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 1.5em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 20px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1.5em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}