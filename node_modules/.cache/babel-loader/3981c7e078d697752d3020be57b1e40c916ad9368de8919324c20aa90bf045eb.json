{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  class: \"calendar\"\n};\nconst _hoisted_4 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_5 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  class: \"date\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"radiograph-count\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_10 = {\n  key: 0\n};\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = {\n  key: 1\n};\nconst _hoisted_13 = {\n  key: 0\n};\nconst _hoisted_14 = {\n  key: 0\n};\nconst _hoisted_15 = {\n  class: \"patient-list\"\n};\nconst _hoisted_16 = [\"onClick\"];\nconst _hoisted_17 = {\n  key: 1\n};\nconst _hoisted_18 = {\n  class: \"calendar\"\n};\nconst _hoisted_19 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_20 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_21 = [\"onClick\"];\nconst _hoisted_22 = {\n  class: \"date\"\n};\nconst _hoisted_23 = {\n  key: 0,\n  class: \"radiograph-count\"\n};\nconst _hoisted_24 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_25 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[11] || (_cache[11] = _createElementVNode(\"h1\", null, \"Calendario Attività\", -1 /* HOISTED */)), _createCommentVNode(\" Verifica se l'utente è un paziente o un dottore \"), $data.isPatient ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => $options.showDayDetails(day)\n    }, [_createElementVNode(\"div\", _hoisted_7, _toDisplayString(day.date), 1 /* TEXT */), day.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, _toDisplayString(day.radiographs.length) + \" \" + _toDisplayString(day.radiographs.length === 1 ? \"caricamento radiografia\" : \"caricamenti radiografie\"), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"strong\", null, \"Paziente:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.selectedPatient.name) + \" \" + _toDisplayString($data.selectedPatient.family_name), 1 /* TEXT */)]), $data.selectedDay.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_cache[7] || (_cache[7] = _createElementVNode(\"h3\", null, \"Radiografie caricate:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.name), 1 /* TEXT */), _cache[5] || (_cache[5] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString(radiograph.date), 1 /* TEXT */), _cache[6] || (_cache[6] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_11)]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_12, _cache[8] || (_cache[8] = [_createElementVNode(\"p\", null, \"Nessuna radiografia caricate per questa data.\", -1 /* HOISTED */)])))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti \"), _createElementVNode(\"div\", null, [$data.isDoctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [$data.patients.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [_cache[9] || (_cache[9] = _createElementVNode(\"h2\", null, \"Elenco Pazienti\", -1 /* HOISTED */)), _createElementVNode(\"ul\", _hoisted_15, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.patients, patient => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: patient.userId,\n      onClick: $event => _ctx.selectPatient(patient),\n      class: \"patient-item\"\n    }, _toDisplayString(patient.name) + \" \" + _toDisplayString(patient.family_name), 9 /* TEXT, PROPS */, _hoisted_16);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_17, _cache[10] || (_cache[10] = [_createElementVNode(\"p\", {\n    class: \"no-patients\"\n  }, \"Nessun paziente associato trovato.\", -1 /* HOISTED */)]))), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createElementVNode(\"div\", _hoisted_20, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => $options.showDayDetails(day)\n    }, [_createElementVNode(\"div\", _hoisted_22, _toDisplayString(day.date), 1 /* TEXT */), day.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, _toDisplayString(day.radiographs.length) + \" \" + _toDisplayString(day.radiographs.length === 1 ? \"caricamento radiografia\" : \"caricamenti radiografie\"), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_21);\n  }), 128 /* KEYED_FRAGMENT */))])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.patientName) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(radiograph.name), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_25)]);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","$data","isPatient","_hoisted_2","_hoisted_3","_hoisted_4","onClick","_cache","$event","$options","changeMonth","_toDisplayString","monthNames","month","year","_hoisted_5","_Fragment","_renderList","daysInMonth","day","date","showDayDetails","_hoisted_7","radiographs","length","_hoisted_8","_hoisted_6","_createVNode","_Transition","name","onBeforeEnter","beforeEnter","onEnter","enter","onLeave","leave","default","_withCtx","selectedDay","_hoisted_9","_createTextVNode","selectedPatient","family_name","_hoisted_10","radiograph","enlargeRadiograph","url","_hoisted_11","_hoisted_12","_","isDoctor","_hoisted_13","patients","_hoisted_14","_hoisted_15","patient","userId","_ctx","selectPatient","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_22","_hoisted_23","_hoisted_21","_hoisted_24","patientName","_hoisted_25"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n\n    <!-- Verifica se l'utente è un paziente o un dottore -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <div class=\"calendar-grid\">\n          <div\n            v-for=\"day in daysInMonth\"\n            :key=\"day.date\"\n            class=\"calendar-day\"\n            @click=\"showDayDetails(day)\"\n          >\n            <div class=\"date\">{{ day.date }}</div>\n            <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n              {{ day.radiographs.length }}\n              {{\n                day.radiographs.length === 1\n                  ? \"caricamento radiografia\"\n                  : \"caricamenti radiografie\"\n              }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <p>\n            <strong>Paziente:</strong> {{ selectedPatient.name }}\n            {{ selectedPatient.family_name }}\n          </p>\n          <div v-if=\"selectedDay.radiographs.length > 0\">\n            <h3>Radiografie caricate:</h3>\n            <ul>\n              <li\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <strong>{{ radiograph.name }}</strong\n                ><br />\n                <span>{{ radiograph.date }}</span\n                ><br />\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </li>\n            </ul>\n          </div>\n          <div v-else>\n            <p>Nessuna radiografia caricate per questa data.</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n\n    <!-- Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti -->\n    <div v-else>\n      <div v-if=\"isDoctor\">\n        <div v-if=\"patients.length > 0\">\n          <h2>Elenco Pazienti</h2>\n          <ul class=\"patient-list\">\n            <li\n              v-for=\"patient in patients\"\n              :key=\"patient.userId\"\n              @click=\"selectPatient(patient)\"\n              class=\"patient-item\"\n            >\n              {{ patient.name }} {{ patient.family_name }}\n            </li>\n          </ul>\n        </div>\n        <div v-else>\n          <p class=\"no-patients\">Nessun paziente associato trovato.</p>\n        </div>\n\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"changeMonth(-1)\">&#8249;</button>\n            <span>{{ monthNames[month] }} {{ year }}</span>\n            <button @click=\"changeMonth(1)\">&#8250;</button>\n          </div>\n\n          <div class=\"calendar-grid\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"day.date\"\n              class=\"calendar-day\"\n              @click=\"showDayDetails(day)\"\n            >\n              <div class=\"date\">{{ day.date }}</div>\n              <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n                {{ day.radiographs.length }}\n                {{\n                  day.radiographs.length === 1\n                    ? \"caricamento radiografia\"\n                    : \"caricamenti radiografie\"\n                }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <div v-for=\"radiograph in selectedDay.radiographs\" :key=\"radiograph.name\">\n            <p><strong>{{ radiograph.patientName }}:</strong> {{ radiograph.name }}</p>\n            <button @click=\"enlargeRadiograph(radiograph.url)\">\n              Visualizza Immagine\n            </button>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      patientId: null, // ID del paziente\n      selectedPatient: null, // Paziente selezionato (loggato)\n      patients: [], // Pazienti associati al dottore\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients();\n    }\n    if (this.isPatient) {\n      this.loadRadiographs();\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      // Crea un array per tenere traccia delle radiografie per ogni giorno\n      const radiographsPerDay = {};\n\n      if (this.isDoctor) {\n        // Aggrega tutte le radiografie dei pazienti associati al dottore\n        this.patients.forEach(patient => {\n          if (patient.radiographs) {\n            patient.radiographs.forEach(radiograph => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n        });\n      } else {\n        // Se l'utente è un paziente, usa le proprie radiografie\n        this.radiographs.forEach(radiograph => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push(radiograph);\n        });\n      }\n\n      // Popola i giorni del mese\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i).toDateString();\n        const radiographsOnDay = radiographsPerDay[dayDate] || [];\n\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay,\n        });\n      }\n\n      return days;\n    },\n  },\n  methods: {\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    async loadRadiographs() {\n      if (!this.patientId) {\n        console.error(\"ID paziente non trovato.\");\n        return;\n      }\n\n      try {\n        const response = await fetch(\n          `/api/patients/${this.patientId}/radiographs`\n        );\n        if (response.ok) {\n          const data = await response.json();\n          this.radiographs = data;\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.radiograph-count {\n  position: absolute;\n  bottom: 10px;\n  left: 5px;\n  font-size: 0.9em;\n  color: #007bff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 1.5em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 20px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1.5em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}