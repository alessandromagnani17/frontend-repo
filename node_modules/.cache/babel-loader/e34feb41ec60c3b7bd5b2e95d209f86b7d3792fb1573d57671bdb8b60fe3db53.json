{"ast":null,"code":"import { createRouter, createWebHistory } from \"vue-router\";\nimport HomePage from \"./views/HomePage.vue\";\nimport UserLogin from \"./components/UserLogin.vue\";\nimport UserRegister from \"./components/UserRegister.vue\";\nimport WelcomePage from \"./components/WelcomePage.vue\";\nimport DoctorDashboard from \"./components/DoctorDashboard.vue\";\nimport PatientDashboard from \"./components/PatientDashboard.vue\";\nimport DashboardPage from \"./components/DashboardPage.vue\";\nimport VerifyEmail from \"./components/VerifyEmail.vue\";\nimport PredictRadiograph from \"./components/PredictRadiograph.vue\";\nimport RadiographDetail from \"./components/RadiographDetail.vue\";\nimport ResetPassword from \"./components/ResetPassword.vue\";\nimport ProfilePage from \"./views/ProfilePage.vue\";\nimport ViewRadiographs from \"./views/ViewRadiographs.vue\";\nimport ActivityCalendar from \"@/components/ActivityCalendar.vue\";\nimport UserNotifications from \"@/views/UserNotifications.vue\";\nconst routes = [{\n  path: \"/\",\n  name: \"HomePage\",\n  component: HomePage\n}, {\n  path: \"/login\",\n  name: \"UserLogin\",\n  component: UserLogin,\n  meta: {\n    requiresGuest: true\n  }\n}, {\n  path: \"/register\",\n  name: \"UserRegister\",\n  component: UserRegister,\n  meta: {\n    requiresGuest: true\n  }\n}, {\n  path: \"/welcome\",\n  name: \"WelcomePage\",\n  component: WelcomePage,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/dashboard\",\n  name: \"DashboardPage\",\n  component: DashboardPage,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/notifications\",\n  name: \"UserNotifications\",\n  component: UserNotifications,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/profile\",\n  name: \"ProfilePage\",\n  component: ProfilePage,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/view-radiographs\",\n  name: \"ViewRadiographs\",\n  component: ViewRadiographs,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/doctor-dashboard\",\n  name: \"DoctorDashboard\",\n  component: DoctorDashboard,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/patient-dashboard\",\n  name: \"PatientDashboard\",\n  component: PatientDashboard,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/verify-email/:uid\",\n  name: \"VerifyEmail\",\n  component: VerifyEmail\n}, {\n  path: \"/reset-password/:uid\",\n  name: \"ResetPassword\",\n  component: ResetPassword\n}, {\n  path: \"/predict\",\n  name: \"PredictRadiograph\",\n  component: PredictRadiograph,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/radiograph-detail\",\n  name: \"RadiographDetail\",\n  component: RadiographDetail,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/activity-calendar\",\n  name: \"ActivityCalendar\",\n  component: ActivityCalendar,\n  meta: {\n    requiresAuth: true\n  }\n}];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\n\n// Route guard to protect authenticated routes and redirect guests\nrouter.beforeEach((to, from, next) => {\n  const authToken = localStorage.getItem(\"authToken\");\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // Check if the user is authenticated\n    if (!authToken) {\n      // If no token, redirect to login\n      return next({\n        name: \"UserLogin\"\n      });\n    }\n  }\n  if (to.matched.some(record => record.meta.requiresGuest)) {\n    // Prevent logged-in users from accessing login/register routes\n    if (authToken) {\n      return next({\n        name: \"WelcomePage\"\n      }); // Redirect to the welcome page if already logged in\n    }\n  }\n  next(); // Always proceed to the next route if checks pass\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomePage","UserLogin","UserRegister","WelcomePage","DoctorDashboard","PatientDashboard","DashboardPage","VerifyEmail","PredictRadiograph","RadiographDetail","ResetPassword","ProfilePage","ViewRadiographs","ActivityCalendar","UserNotifications","routes","path","name","component","meta","requiresGuest","requiresAuth","router","history","beforeEach","to","from","next","authToken","localStorage","getItem","matched","some","record"],"sources":["/Users/alessandromagnani/Desktop/UniversitaÌ€/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/router.js"],"sourcesContent":["import { createRouter, createWebHistory } from \"vue-router\";\nimport HomePage from \"./views/HomePage.vue\";\nimport UserLogin from \"./components/UserLogin.vue\";\nimport UserRegister from \"./components/UserRegister.vue\";\nimport WelcomePage from \"./components/WelcomePage.vue\";\nimport DoctorDashboard from \"./components/DoctorDashboard.vue\";\nimport PatientDashboard from \"./components/PatientDashboard.vue\";\nimport DashboardPage from \"./components/DashboardPage.vue\";\nimport VerifyEmail from \"./components/VerifyEmail.vue\";\nimport PredictRadiograph from \"./components/PredictRadiograph.vue\";\nimport RadiographDetail from \"./components/RadiographDetail.vue\";\nimport ResetPassword from \"./components/ResetPassword.vue\";\nimport ProfilePage from \"./views/ProfilePage.vue\";\nimport ViewRadiographs from \"./views/ViewRadiographs.vue\";\nimport ActivityCalendar from \"@/components/ActivityCalendar.vue\";\nimport UserNotifications from \"@/views/UserNotifications.vue\";\n\nconst routes = [\n  {\n    path: \"/\",\n    name: \"HomePage\",\n    component: HomePage,\n  },\n  {\n    path: \"/login\",\n    name: \"UserLogin\",\n    component: UserLogin,\n    meta: { requiresGuest: true },\n  },\n  {\n    path: \"/register\",\n    name: \"UserRegister\",\n    component: UserRegister,\n    meta: { requiresGuest: true },\n  },\n  {\n    path: \"/welcome\",\n    name: \"WelcomePage\",\n    component: WelcomePage,\n    meta: { requiresAuth: true },\n  },\n  {\n    path: \"/dashboard\",\n    name: \"DashboardPage\",\n    component: DashboardPage,\n    meta: { requiresAuth: true },\n  },\n  {\n    path: \"/notifications\",\n    name: \"UserNotifications\",\n    component: UserNotifications,\n    meta: { requiresAuth: true },\n  },\n  {\n    path: \"/profile\",\n    name: \"ProfilePage\",\n    component: ProfilePage,\n    meta: { requiresAuth: true },\n  },\n  {\n    path: \"/view-radiographs\",\n    name: \"ViewRadiographs\",\n    component: ViewRadiographs,\n    meta: { requiresAuth: true },\n  },\n  {\n    path: \"/doctor-dashboard\",\n    name: \"DoctorDashboard\",\n    component: DoctorDashboard,\n    meta: { requiresAuth: true },\n  },\n  {\n    path: \"/patient-dashboard\",\n    name: \"PatientDashboard\",\n    component: PatientDashboard,\n    meta: { requiresAuth: true },\n  },\n  {\n    path: \"/verify-email/:uid\",\n    name: \"VerifyEmail\",\n    component: VerifyEmail,\n  },\n  {\n    path: \"/reset-password/:uid\",\n    name: \"ResetPassword\",\n    component: ResetPassword,\n  },\n  {\n    path: \"/predict\",\n    name: \"PredictRadiograph\",\n    component: PredictRadiograph,\n    meta: { requiresAuth: true },\n  },\n  {\n    path: \"/radiograph-detail\",\n    name: \"RadiographDetail\",\n    component: RadiographDetail,\n    meta: { requiresAuth: true },\n  },\n  {\n    path: \"/activity-calendar\",\n    name: \"ActivityCalendar\",\n    component: ActivityCalendar,\n    meta: { requiresAuth: true },\n  },\n];\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n});\n\n// Route guard to protect authenticated routes and redirect guests\nrouter.beforeEach((to, from, next) => {\n  const authToken = localStorage.getItem(\"authToken\");\n\n  if (to.matched.some((record) => record.meta.requiresAuth)) {\n    // Check if the user is authenticated\n    if (!authToken) {\n      // If no token, redirect to login\n      return next({ name: \"UserLogin\" });\n    }\n  }\n\n  if (to.matched.some((record) => record.meta.requiresGuest)) {\n    // Prevent logged-in users from accessing login/register routes\n    if (authToken) {\n      return next({ name: \"WelcomePage\" }); // Redirect to the welcome page if already logged in\n    }\n  }\n\n  next(); // Always proceed to the next route if checks pass\n});\n\nexport default router;\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,YAAY,MAAM,+BAA+B;AACxD,OAAOC,WAAW,MAAM,8BAA8B;AACtD,OAAOC,eAAe,MAAM,kCAAkC;AAC9D,OAAOC,gBAAgB,MAAM,mCAAmC;AAChE,OAAOC,aAAa,MAAM,gCAAgC;AAC1D,OAAOC,WAAW,MAAM,8BAA8B;AACtD,OAAOC,iBAAiB,MAAM,oCAAoC;AAClE,OAAOC,gBAAgB,MAAM,mCAAmC;AAChE,OAAOC,aAAa,MAAM,gCAAgC;AAC1D,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,gBAAgB,MAAM,mCAAmC;AAChE,OAAOC,iBAAiB,MAAM,+BAA+B;AAE7D,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAElB;AACb,CAAC,EACD;EACEgB,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEjB,SAAS;EACpBkB,IAAI,EAAE;IAAEC,aAAa,EAAE;EAAK;AAC9B,CAAC,EACD;EACEJ,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,cAAc;EACpBC,SAAS,EAAEhB,YAAY;EACvBiB,IAAI,EAAE;IAAEC,aAAa,EAAE;EAAK;AAC9B,CAAC,EACD;EACEJ,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,aAAa;EACnBC,SAAS,EAAEf,WAAW;EACtBgB,IAAI,EAAE;IAAEE,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,eAAe;EACrBC,SAAS,EAAEZ,aAAa;EACxBa,IAAI,EAAE;IAAEE,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,mBAAmB;EACzBC,SAAS,EAAEJ,iBAAiB;EAC5BK,IAAI,EAAE;IAAEE,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,aAAa;EACnBC,SAAS,EAAEP,WAAW;EACtBQ,IAAI,EAAE;IAAEE,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,mBAAmB;EACzBC,IAAI,EAAE,iBAAiB;EACvBC,SAAS,EAAEN,eAAe;EAC1BO,IAAI,EAAE;IAAEE,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,mBAAmB;EACzBC,IAAI,EAAE,iBAAiB;EACvBC,SAAS,EAAEd,eAAe;EAC1Be,IAAI,EAAE;IAAEE,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,oBAAoB;EAC1BC,IAAI,EAAE,kBAAkB;EACxBC,SAAS,EAAEb,gBAAgB;EAC3Bc,IAAI,EAAE;IAAEE,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,oBAAoB;EAC1BC,IAAI,EAAE,aAAa;EACnBC,SAAS,EAAEX;AACb,CAAC,EACD;EACES,IAAI,EAAE,sBAAsB;EAC5BC,IAAI,EAAE,eAAe;EACrBC,SAAS,EAAER;AACb,CAAC,EACD;EACEM,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,mBAAmB;EACzBC,SAAS,EAAEV,iBAAiB;EAC5BW,IAAI,EAAE;IAAEE,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,oBAAoB;EAC1BC,IAAI,EAAE,kBAAkB;EACxBC,SAAS,EAAET,gBAAgB;EAC3BU,IAAI,EAAE;IAAEE,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,oBAAoB;EAC1BC,IAAI,EAAE,kBAAkB;EACxBC,SAAS,EAAEL,gBAAgB;EAC3BM,IAAI,EAAE;IAAEE,YAAY,EAAE;EAAK;AAC7B,CAAC,CACF;AAED,MAAMC,MAAM,GAAGxB,YAAY,CAAC;EAC1ByB,OAAO,EAAExB,gBAAgB,CAAC,CAAC;EAC3BgB;AACF,CAAC,CAAC;;AAEF;AACAO,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAEnD,IAAIL,EAAE,CAACM,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACd,IAAI,CAACE,YAAY,CAAC,EAAE;IACzD;IACA,IAAI,CAACO,SAAS,EAAE;MACd;MACA,OAAOD,IAAI,CAAC;QAAEV,IAAI,EAAE;MAAY,CAAC,CAAC;IACpC;EACF;EAEA,IAAIQ,EAAE,CAACM,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACd,IAAI,CAACC,aAAa,CAAC,EAAE;IAC1D;IACA,IAAIQ,SAAS,EAAE;MACb,OAAOD,IAAI,CAAC;QAAEV,IAAI,EAAE;MAAc,CAAC,CAAC,CAAC,CAAC;IACxC;EACF;EAEAU,IAAI,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC;AAEF,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}