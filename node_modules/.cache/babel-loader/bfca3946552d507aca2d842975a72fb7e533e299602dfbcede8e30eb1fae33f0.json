{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container mt-4\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"badge badge-warning\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  class: \"list-group\"\n};\nconst _hoisted_5 = {\n  class: \"badge badge-success float-right\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, [_cache[0] || (_cache[0] = _createTextVNode(\" Notifiche \")), $data.unreadCount > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, _toDisplayString($data.unreadCount), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), $data.notifications.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.notifications, (notification, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: _normalizeClass([\"list-group-item\", {\n        'unread-notification': !notification.read\n      }])\n    }, [_createTextVNode(_toDisplayString(notification.message) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_5, _toDisplayString(notification.date) + \" - \" + _toDisplayString(notification.time), 1 /* TEXT */), !notification.read ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      class: \"btn btn-sm btn-primary ml-3\",\n      onClick: $event => $options.markAsRead(notification.id)\n    }, \" Segna come letta \", 8 /* PROPS */, _hoisted_6)) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_7, _cache[1] || (_cache[1] = [_createElementVNode(\"p\", null, \"Non ci sono notifiche.\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createTextVNode","$data","unreadCount","_hoisted_2","_toDisplayString","_createCommentVNode","notifications","length","_hoisted_3","_hoisted_4","_Fragment","_renderList","notification","index","_normalizeClass","read","message","_hoisted_5","date","time","onClick","$event","$options","markAsRead","id","_hoisted_6","_hoisted_7","_cache"],"sources":["/Users/alessandromagnani/Desktop/UniversitaÌ€/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/views/UserNotifications.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-4\">\n    <h2>\n      Notifiche\n      <span v-if=\"unreadCount > 0\" class=\"badge badge-warning\">{{ unreadCount }}</span>\n    </h2>\n    <div v-if=\"notifications.length\">\n      <ul class=\"list-group\">\n        <li\n          v-for=\"(notification, index) in notifications\"\n          :key=\"index\"\n          class=\"list-group-item\"\n          :class=\"{ 'unread-notification': !notification.read }\"\n        >\n          {{ notification.message }}\n          <span class=\"badge badge-success float-right\">\n            {{ notification.date }} - {{ notification.time }}\n          </span>\n          <button\n            v-if=\"!notification.read\"\n            class=\"btn btn-sm btn-primary ml-3\"\n            @click=\"markAsRead(notification.id)\"\n          >\n            Segna come letta\n          </button>\n        </li>\n      </ul>\n    </div>\n    <div v-else>\n      <p>Non ci sono notifiche.</p>\n    </div>\n  </div>\n</template>\n\n\n<script>\nexport default {\n  name: \"UserNotifications\",\n  data() {\n    return {\n      notifications: [], // Lista delle notifiche\n      unreadCount: 0,    // Conteggio delle notifiche non lette\n    };\n  },\n\n  mounted() {\n    this.fetchNotifications();\n  },\n\n  methods: {\n    async fetchNotifications() {\n      try {\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\n        const userId = userData.userId;\n\n        console.log(\"Fetching notifications...\");\n        console.log(\"Selected patient ID:\", userId);\n\n        // Recupera le notifiche dal backend\n        const response = await fetch(`/api/notifications?patientId=${userId}`);\n        if (!response.ok) {\n          throw new Error(\"Errore nel recupero delle notifiche\");\n        }\n\n        const data = await response.json();\n        console.log(\"Notifications data:\", data);\n\n        // Imposta le notifiche e calcola quelle non lette\n        this.notifications = data;\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel recupero delle notifiche:\", error);\n      }\n    },\n\n    updateUnreadCount() {\n      this.unreadCount = this.notifications.filter(\n        (notification) => !notification.read\n      ).length;\n    },\n\n    async markAsRead(notificationId) {\n      try {\n        const response = await fetch(`/api/notifications/${notificationId}`, {\n          method: \"PATCH\", // Endpoint per segnare come letta\n        });\n        if (response.ok) {\n          console.log(\"Notifica contrassegnata come letta.\");\n          // Aggiorna lo stato locale\n          const notification = this.notifications.find(\n            (n) => n.id === notificationId\n          );\n          if (notification) {\n            notification.read = true; // Aggiorna lo stato locale\n          }\n          this.updateUnreadCount(); // Aggiorna il conteggio delle notifiche non lette\n        } else {\n          console.error(\"Errore nel segnare la notifica come letta.\");\n        }\n      } catch (error) {\n        console.error(\"Errore durante l'aggiornamento della notifica:\", error);\n      }\n    },\n  },\n};\n\n</script>\n\n<style scoped>\n.list-group-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.float-right {\n  margin-left: 10px;\n}\n\n.unread-notification {\n  font-weight: bold;\n  background-color: #f8f9fa;\n}\n\n.badge-warning {\n  background-color: #ffc107;\n  color: #fff;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAD7BC,GAAA;EAImCD,KAAK,EAAC;;;EAJzCC,GAAA;AAAA;;EAOUD,KAAK,EAAC;AAAY;;EAQZA,KAAK,EAAC;AAAiC;mBAfvD;;EAAAC,GAAA;AAAA;;uBACEC,mBAAA,CA8BM,OA9BNC,UA8BM,GA7BJC,mBAAA,CAGK,a,0BALTC,gBAAA,CAEQ,aAEF,IAAYC,KAAA,CAAAC,WAAW,Q,cAAvBL,mBAAA,CAAiF,QAAjFM,UAAiF,EAAAC,gBAAA,CAArBH,KAAA,CAAAC,WAAW,oBAJ7EG,mBAAA,e,GAMeJ,KAAA,CAAAK,aAAa,CAACC,MAAM,I,cAA/BV,mBAAA,CAqBM,OA3BVW,UAAA,GAOMT,mBAAA,CAmBK,MAnBLU,UAmBK,I,kBAlBHZ,mBAAA,CAiBKa,SAAA,QAzBbC,WAAA,CAS0CV,KAAA,CAAAK,aAAa,EATvD,CASkBM,YAAY,EAAEC,KAAK;yBAD7BhB,mBAAA,CAiBK;MAfFD,GAAG,EAAEiB,KAAK;MACXlB,KAAK,EAXfmB,eAAA,EAWgB,iBAAiB;QAAA,wBACWF,YAAY,CAACG;MAAI;QAZ7Df,gBAAA,CAAAI,gBAAA,CAcaQ,YAAY,CAACI,OAAO,IAAG,GAC1B,iBAAAjB,mBAAA,CAEO,QAFPkB,UAEO,EAAAb,gBAAA,CADFQ,YAAY,CAACM,IAAI,IAAG,KAAG,GAAAd,gBAAA,CAAGQ,YAAY,CAACO,IAAI,kB,CAGvCP,YAAY,CAACG,IAAI,I,cAD1BlB,mBAAA,CAMS;MAxBnBD,GAAA;MAoBYD,KAAK,EAAC,6BAA6B;MAClCyB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU,CAACX,YAAY,CAACY,EAAE;OACnC,oBAED,iBAxBVC,UAAA,KAAApB,mBAAA,e;uDA4BIR,mBAAA,CAEM,OA9BV6B,UAAA,EAAAC,MAAA,QAAAA,MAAA,OA6BM5B,mBAAA,CAA6B,WAA1B,wBAAsB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}