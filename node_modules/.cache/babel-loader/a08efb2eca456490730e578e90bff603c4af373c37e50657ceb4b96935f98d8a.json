{"ast":null,"code":"export default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(),\n      // Mese corrente\n      year: new Date().getFullYear(),\n      // Anno corrente\n      radiographs: [],\n      // Le radiografie caricate\n      monthNames: [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"],\n      isPatient: false // Indica se l'utente è un paziente\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    const userData = JSON.parse(localStorage.getItem(\"userData\")); // Recupera le informazioni dell'utente loggato\n\n    if (userData && userData.role === \"patient\") {\n      selectedPatient.value = userData; // Imposta selectedPatient con userData\n      console.log(\"Informazioni utente loggato:\", userData); // Stampa le informazioni dell'utente\n    } else {\n      console.error(\"Nessun ID paziente trovato nel localStorage.\");\n    }\n    if (this.isPatient) {\n      this.loadRadiographs();\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i);\n        const radiographsOnDay = this.radiographs.filter(radiograph => new Date(radiograph.date).toDateString() === dayDate.toDateString());\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay\n        });\n      }\n      return days;\n    }\n  },\n  methods: {\n    checkUserRole() {\n      // Verifica il ruolo dell'utente\n      const userRole = localStorage.getItem(\"userRole\");\n      if (userRole === \"patient\") {\n        this.isPatient = true;\n      } else {\n        this.isPatient = false;\n      }\n    },\n    async loadRadiographs() {\n      // Carica le radiografie dal backend solo per il paziente loggato\n      try {\n        const patientId = localStorage.getItem(\"patientId\"); // Recupera l'ID del paziente dal localStorage\n        console.log(\"PAIENTID: \", patientId);\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n          this.radiographs = data;\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n    changeMonth(direction) {\n      // Cambia mese\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","loadingPrediction","successMessage","month","Date","getMonth","year","getFullYear","radiographs","monthNames","isPatient","mounted","checkUserRole","userData","JSON","parse","localStorage","getItem","role","selectedPatient","value","console","log","error","loadRadiographs","computed","daysInMonth","days","lastDayOfMonth","totalDays","getDate","i","dayDate","radiographsOnDay","filter","radiograph","date","toDateString","push","methods","userRole","patientId","response","fetch","ok","json","changeMonth","direction"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n\n    <!-- Verifica se l'utente è un paziente -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <div class=\"calendar-grid\">\n          <div v-for=\"day in daysInMonth\" :key=\"day.date\" class=\"calendar-day\">\n            <div class=\"date\">{{ day.date }}</div>\n            <div\n              v-for=\"radiograph in day.radiographs\"\n              :key=\"radiograph.name\"\n              class=\"radiograph-name\"\n            >\n              {{ radiograph.name }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Messaggio per gli altri ruoli (es. medico) -->\n    <div v-else>\n      <p>Solo i pazienti possono vedere le loro radiografie nel calendario.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    const userData = JSON.parse(localStorage.getItem(\"userData\")); // Recupera le informazioni dell'utente loggato\n\n    if (userData && userData.role === \"patient\") {\n      selectedPatient.value = userData; // Imposta selectedPatient con userData\n      console.log(\"Informazioni utente loggato:\", userData); // Stampa le informazioni dell'utente\n    } else {\n      console.error(\"Nessun ID paziente trovato nel localStorage.\");\n    }\n    if (this.isPatient) {\n      this.loadRadiographs();\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i);\n        const radiographsOnDay = this.radiographs.filter(\n          (radiograph) =>\n            new Date(radiograph.date).toDateString() === dayDate.toDateString()\n        );\n\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay,\n        });\n      }\n      return days;\n    },\n  },\n  methods: {\n    checkUserRole() {\n      // Verifica il ruolo dell'utente\n      const userRole = localStorage.getItem(\"userRole\");\n      if (userRole === \"patient\") {\n        this.isPatient = true;\n      } else {\n        this.isPatient = false;\n      }\n    },\n\n    async loadRadiographs() {\n      // Carica le radiografie dal backend solo per il paziente loggato\n      try {\n        const patientId = localStorage.getItem(\"patientId\"); // Recupera l'ID del paziente dal localStorage\n        console.log(\"PAIENTID: \", patientId);\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n\n        if (response.ok) {\n          const data = await response.json();\n          this.radiographs = data;\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    changeMonth(direction) {\n      // Cambia mese\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.radiograph-name {\n  position: absolute;\n  bottom: 10px;\n  left: 5px;\n  font-size: 0.9em;\n  color: #007bff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 1.5em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}