{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UploadRadiograph = _resolveComponent(\"UploadRadiograph\");\n  const _component_PatientRadiographs = _resolveComponent(\"PatientRadiographs\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[9] || (_cache[9] = _createElementVNode(\"h1\", null, \"Dashboard Dottore\", -1 /* HOISTED */)), $setup.patients.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", null, \"Elenco Pazienti\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.patients, patient => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: patient.userId,\n      onClick: $event => $setup.selectPatient(patient),\n      style: {\n        \"cursor\": \"pointer\",\n        \"text-decoration\": \"underline\"\n      }\n    }, _toDisplayString(patient.name) + \" \" + _toDisplayString(patient.family_name), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[1] || (_cache[1] = [_createElementVNode(\"p\", null, \"Nessun paziente associato trovato.\", -1 /* HOISTED */)]))), $setup.selectedPatient ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", null, \"Dettagli Paziente\", -1 /* HOISTED */)), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Nome:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.selectedPatient.name), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Cognome:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.selectedPatient.family_name), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"strong\", null, \"Email:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.selectedPatient.email), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"strong\", null, \"Data di nascita:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.selectedPatient.birthdate), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"strong\", null, \"Numero di telefono:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.selectedPatient.phone_number), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[7] || (_cache[7] = _createElementVNode(\"strong\", null, \"Indirizzo:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.selectedPatient.address), 1 /* TEXT */)]), _createCommentVNode(\" Aggiungi qui ulteriori attributi del paziente se necessario \")]), _createVNode(_component_UploadRadiograph, {\n    onUploadSuccess: $setup.handleUploadSuccess,\n    patientId: $setup.selectedPatient.userId\n  }, null, 8 /* PROPS */, [\"onUploadSuccess\", \"patientId\"]), _createVNode(_component_PatientRadiographs, {\n    radiographs: $setup.selectedPatientRadiographs,\n    patientId: $setup.selectedPatient.userId,\n    patientName: $setup.selectedPatient.name\n  }, null, 8 /* PROPS */, [\"radiographs\", \"patientId\", \"patientName\"])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","$setup","patients","length","_hoisted_1","_Fragment","_renderList","patient","userId","onClick","$event","selectPatient","style","name","_toDisplayString","family_name","_hoisted_2","_hoisted_3","_cache","selectedPatient","_hoisted_4","_createTextVNode","email","birthdate","phone_number","address","_createCommentVNode","_createVNode","_component_UploadRadiograph","onUploadSuccess","handleUploadSuccess","patientId","_component_PatientRadiographs","radiographs","selectedPatientRadiographs","patientName"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/DoctorDashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Dashboard Dottore</h1>\n\n    <div v-if=\"patients.length > 0\">\n      <h2>Elenco Pazienti</h2>\n      <ul>\n        <li\n          v-for=\"patient in patients\"\n          :key=\"patient.userId\"\n          @click=\"selectPatient(patient)\"\n          style=\"cursor: pointer; text-decoration: underline\"\n        >\n          {{ patient.name }} {{ patient.family_name }}\n        </li>\n      </ul>\n    </div>\n    <div v-else>\n      <p>Nessun paziente associato trovato.</p>\n    </div>\n\n    <div v-if=\"selectedPatient\">\n      <h2>Dettagli Paziente</h2>\n      <div>\n        <p><strong>Nome:</strong> {{ selectedPatient.name }}</p>\n        <p><strong>Cognome:</strong> {{ selectedPatient.family_name }}</p>\n        <p><strong>Email:</strong> {{ selectedPatient.email }}</p>\n        <p><strong>Data di nascita:</strong> {{ selectedPatient.birthdate }}</p>\n        <p>\n          <strong>Numero di telefono:</strong>\n          {{ selectedPatient.phone_number }}\n        </p>\n        <p><strong>Indirizzo:</strong> {{ selectedPatient.address }}</p>\n        <!-- Aggiungi qui ulteriori attributi del paziente se necessario -->\n      </div>\n\n      <UploadRadiograph\n        @uploadSuccess=\"handleUploadSuccess\"\n        :patientId=\"selectedPatient.userId\"\n      />\n\n      <PatientRadiographs\n        :radiographs=\"selectedPatientRadiographs\"\n        :patientId=\"selectedPatient.userId\"\n        :patientName=\"selectedPatient.name\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport PatientRadiographs from \"./PatientRadiographs.vue\";\nimport UploadRadiograph from \"./UploadRadiographs.vue\";\nimport { ref, onMounted } from \"vue\";\nimport { getPatientsFromDoctor, getRadiographs } from \"../services/api-service\";\n\nexport default {\n  components: {\n    PatientRadiographs,\n    UploadRadiograph,\n  },\n  setup() {\n    const patients = ref([]);\n    const selectedPatient = ref(null);\n    const selectedPatientRadiographs = ref([]); // Qui hai definito la proprietà\n\n    // Ottieni il DoctorID dal localStorage\n    const doctorId = localStorage.getItem(\"doctorId\");\n\n    onMounted(async () => {\n      console.log(\"Cerco pazienti associati a: \" + doctorId);\n      if (doctorId) {\n        // Ottieni i pazienti associati\n        try {\n          patients.value = await getPatientsFromDoctor(doctorId);\n          console.log(\"patients.value: \", patients.value); // Stampa dopo l'assegnazione\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      } else {\n        console.error(\"Nessun DoctorID trovato nel localStorage.\");\n      }\n    });\n\n    // Seleziona un paziente e ottieni le sue radiografie\n    const selectPatient = async (patient) => {\n      console.log(\"Paziente selezionato:\", patient); // Log del paziente selezionato\n      selectedPatient.value = patient;\n\n      // Usa userId al posto di id\n      if (!patient.userId) {\n        console.error(\"ID paziente non trovato.\"); // Log dell'errore\n        return;\n      }\n\n      try {\n        // Imposta le radiografie su un array vuoto se non ci sono radiografie\n        selectedPatientRadiographs.value =\n          (await getRadiographs(patient.userId)) || []; // Cambiato da patient.id a patient.userId\n        console.log(\"Radiografie caricate:\", selectedPatientRadiographs.value); // Log delle radiografie caricate\n      } catch (error) {\n        console.error(\n          \"Errore nel caricamento delle radiografie per il paziente:\",\n          error\n        );\n      }\n    };\n\n    const handleUploadSuccess = () => {\n      selectPatient(selectedPatient.value); // Ricarica le radiografie\n    };\n\n    return {\n      patients,\n      selectPatient,\n      handleUploadSuccess,\n      selectedPatient,\n      selectedPatientRadiographs,\n    };\n  },\n};\n</script>\n\n<style scoped>\n.dashboard {\n  background: #ffffff; /* Sfondo bianco */\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  padding-top: 50px;\n}\n\n.container {\n  max-width: 800px;\n  padding: 40px;\n  border-radius: 15px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  margin-top: 20px;\n}\n\nh1 {\n  font-size: 24px;\n  margin-bottom: 30px;\n}\n\nh2 {\n  font-size: 18px;\n  margin-bottom: 20px;\n}\n\nul {\n  list-style: none;\n  padding: 0;\n}\n\nli {\n  font-size: 14px;\n  margin-bottom: 10px;\n  cursor: pointer;\n  text-decoration: underline;\n  color: #007bff;\n}\n\nli:hover {\n  color: #0056b3;\n}\n\n.details {\n  margin-top: 20px;\n}\n\n.details p {\n  font-size: 14px;\n  margin-bottom: 10px;\n}\n\n.upload-section {\n  margin-top: 30px;\n}\n\n.radiographs-section {\n  margin-top: 30px;\n}\n\n.btn-next {\n  width: 100%;\n  margin-top: 10px;\n  padding: 0.4rem;\n  cursor: pointer;\n  font-size: 13px;\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(255, 255, 255, 0.8);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.loading-icon {\n  width: 50px;\n  height: 50px;\n}\n\n.error-message {\n  color: red;\n  font-size: 12px;\n  margin-top: 10px;\n}\n</style>\n"],"mappings":";;EAAAA,GAAA;AAAA;mBAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;;uBACEC,mBAAA,CA8CM,c,0BA7CJC,mBAAA,CAA0B,YAAtB,mBAAiB,sBAEVC,MAAA,CAAAC,QAAQ,CAACC,MAAM,Q,cAA1BJ,mBAAA,CAYM,OAhBVK,UAAA,G,0BAKMJ,mBAAA,CAAwB,YAApB,iBAAe,sBACnBA,mBAAA,CASK,c,kBARHD,mBAAA,CAOKM,SAAA,QAdbC,WAAA,CAQ4BL,MAAA,CAAAC,QAAQ,EAAnBK,OAAO;yBADhBR,mBAAA,CAOK;MALFD,GAAG,EAAES,OAAO,CAACC,MAAM;MACnBC,OAAK,EAAAC,MAAA,IAAET,MAAA,CAAAU,aAAa,CAACJ,OAAO;MAC7BK,KAAmD,EAAnD;QAAA;QAAA;MAAA;wBAEGL,OAAO,CAACM,IAAI,IAAG,GAAC,GAAAC,gBAAA,CAAGP,OAAO,CAACQ,WAAW,wBAbnDC,UAAA;uDAiBIjB,mBAAA,CAEM,OAnBVkB,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAkBMlB,mBAAA,CAAyC,WAAtC,oCAAkC,oB,KAG5BC,MAAA,CAAAkB,eAAe,I,cAA1BpB,mBAAA,CAyBM,OA9CVqB,UAAA,G,0BAsBMpB,mBAAA,CAA0B,YAAtB,mBAAiB,sBACrBA,mBAAA,CAWM,cAVJA,mBAAA,CAAwD,Y,0BAArDA,mBAAA,CAAsB,gBAAd,OAAK,sBAxBxBqB,gBAAA,CAwBiC,GAAC,GAAAP,gBAAA,CAAGb,MAAA,CAAAkB,eAAe,CAACN,IAAI,iB,GACjDb,mBAAA,CAAkE,Y,0BAA/DA,mBAAA,CAAyB,gBAAjB,UAAQ,sBAzB3BqB,gBAAA,CAyBoC,GAAC,GAAAP,gBAAA,CAAGb,MAAA,CAAAkB,eAAe,CAACJ,WAAW,iB,GAC3Df,mBAAA,CAA0D,Y,0BAAvDA,mBAAA,CAAuB,gBAAf,QAAM,sBA1BzBqB,gBAAA,CA0BkC,GAAC,GAAAP,gBAAA,CAAGb,MAAA,CAAAkB,eAAe,CAACG,KAAK,iB,GACnDtB,mBAAA,CAAwE,Y,0BAArEA,mBAAA,CAAiC,gBAAzB,kBAAgB,sBA3BnCqB,gBAAA,CA2B4C,GAAC,GAAAP,gBAAA,CAAGb,MAAA,CAAAkB,eAAe,CAACI,SAAS,iB,GACjEvB,mBAAA,CAGI,Y,0BAFFA,mBAAA,CAAoC,gBAA5B,qBAAmB,sBA7BrCqB,gBAAA,CA6B8C,GACpC,GAAAP,gBAAA,CAAGb,MAAA,CAAAkB,eAAe,CAACK,YAAY,iB,GAEjCxB,mBAAA,CAAgE,Y,0BAA7DA,mBAAA,CAA2B,gBAAnB,YAAU,sBAhC7BqB,gBAAA,CAgCsC,GAAC,GAAAP,gBAAA,CAAGb,MAAA,CAAAkB,eAAe,CAACM,OAAO,iB,GACzDC,mBAAA,iEAAoE,C,GAGtEC,YAAA,CAGEC,2BAAA;IAFCC,eAAa,EAAE5B,MAAA,CAAA6B,mBAAmB;IAClCC,SAAS,EAAE9B,MAAA,CAAAkB,eAAe,CAACX;6DAG9BmB,YAAA,CAIEK,6BAAA;IAHCC,WAAW,EAAEhC,MAAA,CAAAiC,0BAA0B;IACvCH,SAAS,EAAE9B,MAAA,CAAAkB,eAAe,CAACX,MAAM;IACjC2B,WAAW,EAAElC,MAAA,CAAAkB,eAAe,CAACN;4EA5CtCa,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}