{"ast":null,"code":"import PatientList from \"./PatientList.vue\";\nimport PatientRadiographs from \"./PatientRadiographs.vue\";\nimport UploadRadiograph from \"./UploadRadiographs.vue\";\nimport { ref, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { getRadiographs } from \"../services/api-service\";\nexport default {\n  components: {\n    PatientList,\n    PatientRadiographs,\n    UploadRadiograph\n  },\n  setup() {\n    const store = useStore(); // Crea un'istanza dello store\n    const patients = ref([]);\n    const selectedPatient = ref(null);\n    const selectedPatientRadiographs = ref([]);\n\n    // Ottieni l'ID del dottore loggato\n    const doctorId = store.state.user.id;\n    onMounted(async () => {\n      // Ottieni i pazienti associati\n      console.log(\"Cerco pazienti associati a: \" + doctorId);\n      //patients.value = await getPatients(doctorId);\n    });\n\n    // Seleziona un paziente e ottieni le sue radiografie\n    const selectPatient = async patient => {\n      selectedPatient.value = patient;\n      selectedPatientRadiographs.value = await getRadiographs(patient.id);\n    };\n    const handleUploadSuccess = () => {\n      selectPatient(selectedPatient.value); // Ricarica le radiografie\n    };\n    return {\n      patients,\n      selectPatient,\n      handleUploadSuccess,\n      selectedPatient,\n      selectedPatientRadiographs\n    };\n  }\n};","map":{"version":3,"names":["PatientList","PatientRadiographs","UploadRadiograph","ref","onMounted","useStore","getRadiographs","components","setup","store","patients","selectedPatient","selectedPatientRadiographs","doctorId","state","user","id","console","log","selectPatient","patient","value","handleUploadSuccess"],"sources":["C:\\Users\\Utente\\Desktop\\osteoarthritis-project\\frontend\\src\\components\\DoctorDashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Dashboard Dottore</h1>\n    <PatientList :patients=\"patients\" @selectPatient=\"selectPatient\" />\n    <UploadRadiograph\n      v-if=\"selectedPatient\"\n      @uploadSuccess=\"handleUploadSuccess\"\n      :patientId=\"selectedPatient.id\"\n    />\n    <PatientRadiographs\n      :radiographs=\"selectedPatientRadiographs\"\n      v-if=\"selectedPatient\"\n    />\n  </div>\n</template>\n\n<script>\nimport PatientList from \"./PatientList.vue\";\nimport PatientRadiographs from \"./PatientRadiographs.vue\";\nimport UploadRadiograph from \"./UploadRadiographs.vue\";\nimport { ref, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { getRadiographs } from \"../services/api-service\";\n\nexport default {\n  components: {\n    PatientList,\n    PatientRadiographs,\n    UploadRadiograph,\n  },\n  setup() {\n    const store = useStore(); // Crea un'istanza dello store\n    const patients = ref([]);\n    const selectedPatient = ref(null);\n    const selectedPatientRadiographs = ref([]);\n\n    // Ottieni l'ID del dottore loggato\n    const doctorId = store.state.user.id;\n\n    onMounted(async () => {\n      // Ottieni i pazienti associati\n      console.log(\"Cerco pazienti associati a: \" + doctorId);\n      //patients.value = await getPatients(doctorId);\n    });\n\n    // Seleziona un paziente e ottieni le sue radiografie\n    const selectPatient = async (patient) => {\n      selectedPatient.value = patient;\n      selectedPatientRadiographs.value = await getRadiographs(patient.id);\n    };\n\n    const handleUploadSuccess = () => {\n      selectPatient(selectedPatient.value); // Ricarica le radiografie\n    };\n\n    return {\n      patients,\n      selectPatient,\n      handleUploadSuccess,\n      selectedPatient,\n      selectedPatientRadiographs,\n    };\n  },\n};\n</script>\n\n<style scoped>\n/* Puoi aggiungere qui il tuo stile personalizzato per la dashboard */\n</style>\n"],"mappings":"AAiBA,OAAOA,WAAU,MAAO,mBAAmB;AAC3C,OAAOC,kBAAiB,MAAO,0BAA0B;AACzD,OAAOC,gBAAe,MAAO,yBAAyB;AACtD,SAASC,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,SAASC,QAAO,QAAS,MAAM;AAC/B,SAASC,cAAa,QAAS,yBAAyB;AAExD,eAAe;EACbC,UAAU,EAAE;IACVP,WAAW;IACXC,kBAAkB;IAClBC;EACF,CAAC;EACDM,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIJ,QAAQ,CAAC,CAAC,EAAE;IAC1B,MAAMK,QAAO,GAAIP,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMQ,eAAc,GAAIR,GAAG,CAAC,IAAI,CAAC;IACjC,MAAMS,0BAAyB,GAAIT,GAAG,CAAC,EAAE,CAAC;;IAE1C;IACA,MAAMU,QAAO,GAAIJ,KAAK,CAACK,KAAK,CAACC,IAAI,CAACC,EAAE;IAEpCZ,SAAS,CAAC,YAAY;MACpB;MACAa,OAAO,CAACC,GAAG,CAAC,8BAA6B,GAAIL,QAAQ,CAAC;MACtD;IACF,CAAC,CAAC;;IAEF;IACA,MAAMM,aAAY,GAAI,MAAOC,OAAO,IAAK;MACvCT,eAAe,CAACU,KAAI,GAAID,OAAO;MAC/BR,0BAA0B,CAACS,KAAI,GAAI,MAAMf,cAAc,CAACc,OAAO,CAACJ,EAAE,CAAC;IACrE,CAAC;IAED,MAAMM,mBAAkB,GAAIA,CAAA,KAAM;MAChCH,aAAa,CAACR,eAAe,CAACU,KAAK,CAAC,EAAE;IACxC,CAAC;IAED,OAAO;MACLX,QAAQ;MACRS,aAAa;MACbG,mBAAmB;MACnBX,eAAe;MACfC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}