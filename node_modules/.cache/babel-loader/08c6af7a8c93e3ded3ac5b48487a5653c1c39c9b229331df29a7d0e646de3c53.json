{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass } from \"vue\";\nimport _imports_0 from '@/assets/zoom.svg';\nimport _imports_1 from '@/assets/download.svg';\nconst _hoisted_1 = {\n  class: \"radiograph-list\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0,\n  class: \"radiograph-preview\"\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = {\n  class: \"radiograph-controls\"\n};\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = [\"href\"];\nconst _hoisted_9 = {\n  key: 1\n};\nconst _hoisted_10 = {\n  key: 2,\n  class: \"modal\"\n};\nconst _hoisted_11 = {\n  class: \"modal-content\"\n};\nconst _hoisted_12 = [\"src\"];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, \"Radiografie di \" + _toDisplayString(_ctx.patientName), 1 /* TEXT */), _ctx.radiographs.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.radiographs, radiograph => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: radiograph.name,\n      class: \"radiograph-item\"\n    }, [_createElementVNode(\"div\", null, [_createTextVNode(_toDisplayString(radiograph.date) + \" - \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => _ctx.toggleRadiograph(radiograph),\n      class: \"view-link\"\n    }, \" Visualizza \", 8 /* PROPS */, _hoisted_3)]), _createCommentVNode(\" Se l'immagine è selezionata, mostriamo l'anteprima \"), _ctx.selectedRadiograph === radiograph ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createCommentVNode(\" Aggiungiamo una classe che gestisce l'animazione (sliding up/down) \"), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"content-with-animation\", {\n        'slide-down': _ctx.isSlidingDown,\n        'slide-up': _ctx.isSlidingUp\n      }])\n    }, [_ctx.isImageVisible ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      src: radiograph.url,\n      alt: \"Radiografia\",\n      class: \"radiograph-image\"\n    }, null, 8 /* PROPS */, _hoisted_5)) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"button\", {\n      onClick: $event => _ctx.enlargeRadiograph(radiograph.url),\n      class: \"control-button\"\n    }, [...(_cache[2] || (_cache[2] = [_createElementVNode(\"img\", {\n      src: _imports_0,\n      alt: \"Zoom\",\n      class: \"icon\"\n    }, null, -1 /* HOISTED */)]))], 8 /* PROPS */, _hoisted_7), _createElementVNode(\"a\", {\n      href: radiograph.url,\n      download: \"\",\n      class: \"control-button\"\n    }, [...(_cache[3] || (_cache[3] = [_createElementVNode(\"img\", {\n      src: _imports_1,\n      alt: \"Download\",\n      class: \"icon\"\n    }, null, -1 /* HOISTED */)]))], 8 /* PROPS */, _hoisted_8)])])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_9, \"Nessuna radiografia trovata per questo paziente.\")), _createCommentVNode(\" Modale per ingrandire l'immagine \"), _ctx.isModalOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"span\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.closeModal && _ctx.closeModal(...args)),\n    class: \"close-button\"\n  }, \"×\"), _createElementVNode(\"img\", {\n    src: _ctx.modalImageUrl,\n    alt: \"Immagine ingrandita\",\n    class: \"modal-image\"\n  }, null, 8 /* PROPS */, _hoisted_12), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.closeModal && _ctx.closeModal(...args)),\n    class: \"close-button\"\n  }, \"Rimpicciolisci\")])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_imports_0","_imports_1","class","key","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","_ctx","patientName","radiographs","length","_hoisted_2","_Fragment","_renderList","radiograph","name","_createTextVNode","date","onClick","$event","toggleRadiograph","_hoisted_3","_createCommentVNode","selectedRadiograph","_hoisted_4","_normalizeClass","isSlidingDown","isSlidingUp","isImageVisible","src","url","alt","_hoisted_5","_hoisted_6","enlargeRadiograph","_hoisted_7","href","download","_hoisted_8","_hoisted_9","isModalOpen","_hoisted_10","_hoisted_11","_cache","args","closeModal","modalImageUrl","_hoisted_12"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/PatientRadiographs.vue"],"sourcesContent":["<template>\n  <div class=\"radiograph-list\">\n    <h2>Radiografie di {{ patientName }}</h2>\n    <ul v-if=\"radiographs.length\">\n      <li\n        v-for=\"radiograph in radiographs\"\n        :key=\"radiograph.name\"\n        class=\"radiograph-item\"\n      >\n        <div>\n          {{ radiograph.date }} -\n          <button @click=\"toggleRadiograph(radiograph)\" class=\"view-link\">\n            Visualizza\n          </button>\n        </div>\n\n        <!-- Se l'immagine è selezionata, mostriamo l'anteprima -->\n        <div\n          v-if=\"selectedRadiograph === radiograph\"\n          class=\"radiograph-preview\"\n        >\n          <!-- Aggiungiamo una classe che gestisce l'animazione (sliding up/down) -->\n          <div\n            class=\"content-with-animation\"\n            :class=\"{ 'slide-down': isSlidingDown, 'slide-up': isSlidingUp }\"\n          >\n            <img\n              :src=\"radiograph.url\"\n              alt=\"Radiografia\"\n              class=\"radiograph-image\"\n              v-if=\"isImageVisible\"\n            />\n          </div>\n          <div class=\"radiograph-controls\">\n            <button\n              @click=\"enlargeRadiograph(radiograph.url)\"\n              class=\"control-button\"\n            >\n              <img src=\"@/assets/zoom.svg\" alt=\"Zoom\" class=\"icon\" />\n            </button>\n            <a :href=\"radiograph.url\" download class=\"control-button\">\n              <img src=\"@/assets/download.svg\" alt=\"Download\" class=\"icon\" />\n            </a>\n          </div>\n        </div>\n      </li>\n    </ul>\n    <p v-else>Nessuna radiografia trovata per questo paziente.</p>\n\n    <!-- Modale per ingrandire l'immagine -->\n    <div v-if=\"isModalOpen\" class=\"modal\">\n      <div class=\"modal-content\">\n        <span @click=\"closeModal\" class=\"close-button\">&times;</span>\n        <img\n          :src=\"modalImageUrl\"\n          alt=\"Immagine ingrandita\"\n          class=\"modal-image\"\n        />\n        <button @click=\"closeModal\" class=\"close-button\">Rimpicciolisci</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"PatientRadiographs\",\n  props: {\n    patientId: {\n      type: String,\n      required: true,\n    },\n    patientName: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      radiographs: [],\n      selectedRadiograph: null, // Per tracciare quale radiografia è stata selezionata\n      isModalOpen: false, // Stato per il modale\n      modalImageUrl: \"\", // URL dell'immagine ingrandita\n      isImageVisible: false, // Stato per la visibilità dell'immagine\n      isSlidingDown: false, // Stato per l'animazione di apertura\n      isSlidingUp: false, // Stato per l'animazione di chiusura\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch(\n        /api/patients/${this.patientId}/radiographs,\n        {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (response.ok) {\n        this.radiographs = await response.json();\n      } else {\n        console.error(\"Errore nel recupero delle radiografie.\");\n      }\n    } catch (error) {\n      console.error(\"Errore:\", error);\n    }\n  },\n  methods: {\n    toggleRadiograph(radiograph) {\n      if (this.selectedRadiograph === radiograph) {\n        // Se l'immagine è già selezionata, esegui l'animazione di chiusura\n        this.isSlidingDown = false; // Disattiviamo l'animazione di apertura\n        this.isSlidingUp = true; // Inizio dell'animazione di chiusura\n        setTimeout(() => {\n          this.isImageVisible = false; // Nascondiamo l'immagine dopo l'animazione\n          this.selectedRadiograph = null; // Deselezioniamo la radiografia\n          this.isSlidingUp = false; // Reset dello stato dell'animazione di chiusura\n        }, 300); // Ritardo per permettere il completamento dell'animazione\n      } else {\n        // Seleziona l'immagine e esegui l'animazione di apertura\n        this.selectedRadiograph = radiograph;\n        this.isSlidingUp = false; // Disattiviamo l'animazione di chiusura\n        this.isSlidingDown = true; // Inizio dell'animazione di apertura\n        setTimeout(() => {\n          this.isImageVisible = true; // Mostriamo l'immagine dopo l'animazione\n        }, 300); // Leggero ritardo per garantire la transizione CSS\n      }\n    },\n    enlargeRadiograph(url) {\n      // Apri il modale e mostra l'immagine ingrandita\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    closeModal() {\n      // Chiudi il modale\n      this.isModalOpen = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.radiograph-list {\n  max-width: 800px;\n  margin: 20px auto;\n}\n\nh2 {\n  font-size: 18px;\n  color: #333;\n  margin-bottom: 15px;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli.radiograph-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #ccc;\n  font-size: 12px;\n  color: #444;\n  display: flex;\n  flex-direction: column;\n}\n\n.view-link {\n  color: #007bff;\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-weight: bold;\n  transition: color 0.5s ease; /* Animazione più lenta */\n  padding: 0;\n  margin: 0;\n}\n\n.view-link:hover {\n  color: #0056b3;\n}\n\n.radiograph-preview {\n  margin-top: 10px;\n}\n\n.radiograph-image {\n  width: 100%;\n  max-width: 400px;\n  display: block;\n  margin-bottom: 10px;\n}\n\n/* Sezione per l'animazione */\n.content-with-animation {\n  overflow: hidden;\n  transition: max-height 0.3s ease, padding 0.3s ease; /* Aggiunta di padding */\n  max-height: 0; /* Impostazione predefinita: l'immagine è nascosta */\n}\n\n/* Classe per l'animazione di apertura (mostrare l'immagine) */\n.content-with-animation.slide-down {\n  max-height: 400px; /* Consente il display completo dell'immagine */\n}\n\n/* Classe per l'animazione di chiusura (nascondere l'immagine) */\n.content-with-animation.slide-up {\n  max-height: 0; /* Ritorna alla modalità nascosta */\n}\n\n.radiograph-controls {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.control-button {\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  margin-left: 10px;\n}\n\n.icon {\n  width: 24px; /* Dimensione dell'icona */\n  height: 24px; /* Dimensione dell'icona */\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  position: relative;\n  max-width: 80%;\n  max-height: 80%;\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  text-align: center;\n}\n\n.modal-image {\n  max-width: 100%;\n  max-height: 70vh;\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  cursor: pointer;\n  font-size: 24px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}