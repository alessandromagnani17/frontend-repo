{"ast":null,"code":"import { ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { Auth } from \"@aws-amplify/auth\";\nexport default {\n  name: \"UserLogin\",\n  setup() {\n    // Stato del form\n    const form = ref({\n      email: \"\",\n      password: \"\",\n      rememberMe: false\n    });\n\n    // Stato degli errori\n    const errors = ref({\n      email: \"\",\n      password: \"\"\n    });\n    const currentStep = ref(1); // Step iniziale\n    const router = useRouter();\n\n    // Funzione per validare il form\n    const validateForm = () => {\n      if (currentStep.value === 1) {\n        errors.value.email = form.value.email ? \"\" : \"Email richiesta\";\n      } else if (currentStep.value === 2) {\n        errors.value.password = form.value.password ? \"\" : \"Password richiesta\";\n      }\n      return Object.values(errors.value).every(error => !error);\n    };\n\n    // Funzione per gestire il submit del form\n    const onSubmit = async () => {\n      if (!validateForm()) return;\n      try {\n        // Effettua il login con AWS Cognito\n        const user = await Auth.signIn(form.value.email, form.value.password);\n        alert(\"Login eseguito! Benvenuto \" + user.username);\n\n        // Naviga alla pagina di benvenuto\n        router.push({\n          name: \"Welcome\",\n          query: {\n            username: form.value.email\n          }\n        });\n      } catch (error) {\n        console.error(\"Errore di login:\", error);\n        alert(`Errore di login: ${error.message || error}`);\n      }\n    };\n\n    // Navigazione tra step\n    const goToNextStep = () => {\n      if (validateForm()) currentStep.value++;\n    };\n    const goToPreviousStep = () => {\n      currentStep.value--;\n    };\n\n    // Controlla se lo step corrente è valido\n    const isStepValid = step => {\n      if (step === 1) {\n        return !!form.value.email;\n      } else if (step === 2) {\n        return !!form.value.password;\n      }\n      return false;\n    };\n    return {\n      form,\n      onSubmit,\n      errors,\n      currentStep,\n      goToNextStep,\n      goToPreviousStep,\n      isStepValid\n    };\n  }\n};","map":{"version":3,"names":["ref","useRouter","Auth","name","setup","form","email","password","rememberMe","errors","currentStep","router","validateForm","value","Object","values","every","error","onSubmit","user","signIn","alert","username","push","query","console","message","goToNextStep","goToPreviousStep","isStepValid","step"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/UserLogin.vue"],"sourcesContent":["<template>\n  <div class=\"login\">\n    <div class=\"container mt-5\">\n      <div class=\"header\">\n        <button\n          v-if=\"currentStep > 1\"\n          class=\"back-button\"\n          @click=\"goToPreviousStep\"\n        >\n          <img src=\"@/assets/back-icon.svg\" alt=\"Indietro\" class=\"back-icon\" />\n        </button>\n      </div>\n\n      <span class=\"step-title\">Passaggio {{ currentStep }} di 2</span>\n      <h2 class=\"mb-4\">Login al tuo Account</h2>\n\n      <form @submit.prevent=\"onSubmit\">\n        <!-- Step 1: Email -->\n        <div v-if=\"currentStep === 1\">\n          <div class=\"mb-3\">\n            <label for=\"email\" class=\"form-label\">Email</label>\n            <input\n              id=\"email\"\n              v-model=\"form.email\"\n              type=\"email\"\n              class=\"form-control\"\n              :class=\"{ 'is-invalid': errors.email }\"\n              required\n            />\n            <div class=\"invalid-feedback\">{{ errors.email }}</div>\n          </div>\n        </div>\n\n        <!-- Step 2: Password -->\n        <div v-if=\"currentStep === 2\">\n          <div class=\"mb-3\">\n            <label for=\"password\" class=\"form-label\">Password</label>\n            <input\n              id=\"password\"\n              v-model=\"form.password\"\n              type=\"password\"\n              class=\"form-control\"\n              :class=\"{ 'is-invalid': errors.password }\"\n              required\n            />\n            <div class=\"invalid-feedback\">{{ errors.password }}</div>\n          </div>\n          <div class=\"mb-3 form-check\">\n            <input\n              id=\"rememberMe\"\n              v-model=\"form.rememberMe\"\n              type=\"checkbox\"\n              class=\"form-check-input\"\n            />\n            <label for=\"rememberMe\" class=\"form-check-label\">Remember Me</label>\n          </div>\n        </div>\n\n        <!-- Bottone di avanzamento o submit -->\n        <div v-if=\"currentStep < 2\">\n          <button\n            type=\"button\"\n            class=\"btn btn-primary btn-next\"\n            :disabled=\"!isStepValid(currentStep)\"\n            @click=\"goToNextStep\"\n          >\n            Avanti\n          </button>\n        </div>\n\n        <!-- Bottone submit al secondo step -->\n        <div v-if=\"currentStep === 2\">\n          <button type=\"submit\" class=\"btn btn-primary\">Login</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { Auth } from \"@aws-amplify/auth\";\n\nexport default {\n  name: \"UserLogin\",\n  setup() {\n    // Stato del form\n    const form = ref({\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    });\n\n    // Stato degli errori\n    const errors = ref({\n      email: \"\",\n      password: \"\",\n    });\n\n    const currentStep = ref(1); // Step iniziale\n    const router = useRouter();\n\n    // Funzione per validare il form\n    const validateForm = () => {\n      if (currentStep.value === 1) {\n        errors.value.email = form.value.email ? \"\" : \"Email richiesta\";\n      } else if (currentStep.value === 2) {\n        errors.value.password = form.value.password ? \"\" : \"Password richiesta\";\n      }\n      return Object.values(errors.value).every((error) => !error);\n    };\n\n    // Funzione per gestire il submit del form\n    const onSubmit = async () => {\n      if (!validateForm()) return;\n\n      try {\n        // Effettua il login con AWS Cognito\n        const user = await Auth.signIn(form.value.email, form.value.password);\n        alert(\"Login eseguito! Benvenuto \" + user.username);\n\n        // Naviga alla pagina di benvenuto\n        router.push({\n          name: \"Welcome\",\n          query: { username: form.value.email },\n        });\n      } catch (error) {\n        console.error(\"Errore di login:\", error);\n        alert(`Errore di login: ${error.message || error}`);\n      }\n    };\n\n    // Navigazione tra step\n    const goToNextStep = () => {\n      if (validateForm()) currentStep.value++;\n    };\n\n    const goToPreviousStep = () => {\n      currentStep.value--;\n    };\n\n    // Controlla se lo step corrente è valido\n    const isStepValid = (step) => {\n      if (step === 1) {\n        return !!form.value.email;\n      } else if (step === 2) {\n        return !!form.value.password;\n      }\n      return false;\n    };\n\n    return {\n      form,\n      onSubmit,\n      errors,\n      currentStep,\n      goToNextStep,\n      goToPreviousStep,\n      isStepValid,\n    };\n  },\n};\n</script>\n\n<style scoped>\n.login {\n  background: linear-gradient(135deg, #f7f7f7, #e0e0e0);\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.container {\n  max-width: 600px;\n  padding: 40px;\n  border-radius: 15px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n  animation: slideIn 1s ease-out;\n}\n\nh2 {\n  font-size: 18px;\n  color: #343a40;\n}\n\n.form-label {\n  color: #495057;\n}\n\n.invalid-feedback {\n  color: #dc3545;\n}\n\n.btn {\n  margin-top: 20px;\n  background-color: #007bff;\n  border: none;\n}\n\n.btn-next {\n  width: 100%;\n  padding: 10px;\n}\n\n.back-button {\n  background: transparent;\n  border: none;\n  cursor: pointer;\n}\n\n.back-icon {\n  width: 30px;\n}\n\n.step-title {\n  font-size: 12px;\n}\n</style>\n"],"mappings":"AAgFA,SAASA,GAAE,QAAS,KAAK;AACzB,SAASC,SAAQ,QAAS,YAAY;AACtC,SAASC,IAAG,QAAS,mBAAmB;AAExC,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAKA,CAAA,EAAG;IACN;IACA,MAAMC,IAAG,GAAIL,GAAG,CAAC;MACfM,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE;IACd,CAAC,CAAC;;IAEF;IACA,MAAMC,MAAK,GAAIT,GAAG,CAAC;MACjBM,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,MAAMG,WAAU,GAAIV,GAAG,CAAC,CAAC,CAAC,EAAE;IAC5B,MAAMW,MAAK,GAAIV,SAAS,CAAC,CAAC;;IAE1B;IACA,MAAMW,YAAW,GAAIA,CAAA,KAAM;MACzB,IAAIF,WAAW,CAACG,KAAI,KAAM,CAAC,EAAE;QAC3BJ,MAAM,CAACI,KAAK,CAACP,KAAI,GAAID,IAAI,CAACQ,KAAK,CAACP,KAAI,GAAI,EAAC,GAAI,iBAAiB;MAChE,OAAO,IAAII,WAAW,CAACG,KAAI,KAAM,CAAC,EAAE;QAClCJ,MAAM,CAACI,KAAK,CAACN,QAAO,GAAIF,IAAI,CAACQ,KAAK,CAACN,QAAO,GAAI,EAAC,GAAI,oBAAoB;MACzE;MACA,OAAOO,MAAM,CAACC,MAAM,CAACN,MAAM,CAACI,KAAK,CAAC,CAACG,KAAK,CAAEC,KAAK,IAAK,CAACA,KAAK,CAAC;IAC7D,CAAC;;IAED;IACA,MAAMC,QAAO,GAAI,MAAAA,CAAA,KAAY;MAC3B,IAAI,CAACN,YAAY,CAAC,CAAC,EAAE;MAErB,IAAI;QACF;QACA,MAAMO,IAAG,GAAI,MAAMjB,IAAI,CAACkB,MAAM,CAACf,IAAI,CAACQ,KAAK,CAACP,KAAK,EAAED,IAAI,CAACQ,KAAK,CAACN,QAAQ,CAAC;QACrEc,KAAK,CAAC,4BAA2B,GAAIF,IAAI,CAACG,QAAQ,CAAC;;QAEnD;QACAX,MAAM,CAACY,IAAI,CAAC;UACVpB,IAAI,EAAE,SAAS;UACfqB,KAAK,EAAE;YAAEF,QAAQ,EAAEjB,IAAI,CAACQ,KAAK,CAACP;UAAM;QACtC,CAAC,CAAC;MACJ,EAAE,OAAOW,KAAK,EAAE;QACdQ,OAAO,CAACR,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QACxCI,KAAK,CAAC,oBAAoBJ,KAAK,CAACS,OAAM,IAAKT,KAAK,EAAE,CAAC;MACrD;IACF,CAAC;;IAED;IACA,MAAMU,YAAW,GAAIA,CAAA,KAAM;MACzB,IAAIf,YAAY,CAAC,CAAC,EAAEF,WAAW,CAACG,KAAK,EAAE;IACzC,CAAC;IAED,MAAMe,gBAAe,GAAIA,CAAA,KAAM;MAC7BlB,WAAW,CAACG,KAAK,EAAE;IACrB,CAAC;;IAED;IACA,MAAMgB,WAAU,GAAKC,IAAI,IAAK;MAC5B,IAAIA,IAAG,KAAM,CAAC,EAAE;QACd,OAAO,CAAC,CAACzB,IAAI,CAACQ,KAAK,CAACP,KAAK;MAC3B,OAAO,IAAIwB,IAAG,KAAM,CAAC,EAAE;QACrB,OAAO,CAAC,CAACzB,IAAI,CAACQ,KAAK,CAACN,QAAQ;MAC9B;MACA,OAAO,KAAK;IACd,CAAC;IAED,OAAO;MACLF,IAAI;MACJa,QAAQ;MACRT,MAAM;MACNC,WAAW;MACXiB,YAAY;MACZC,gBAAgB;MAChBC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}