{"ast":null,"code":"export default {\n  name: \"PatientRadiographs\",\n  props: {\n    patientId: {\n      type: String,\n      required: true\n    },\n    patientName: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      radiographs: [],\n      selectedRadiograph: null,\n      isModalOpen: false,\n      modalImageUrl: \"\",\n      isImageVisible: false,\n      isSlidingDown: false,\n      isSlidingUp: false,\n      errorMessage: \"\",\n      currentPatientId: this.patientId // Variabile locale per gestire il patientId\n    };\n  },\n  async mounted() {\n    await this.loadRadiographs(); // Carica le radiografie iniziali, se necessario\n  },\n  watch: {\n    patientId(newPatientId) {\n      this.currentPatientId = newPatientId; // Aggiorna la variabile locale quando cambia la prop\n      this.loadRadiographs(); // Ricarica le radiografie quando la prop cambia\n    }\n  },\n  methods: {\n    async loadRadiographs() {\n      try {\n        console.log(\"Props patientId:\", this.patientId);\n        console.log(\"Props patientName:\", this.patientName);\n        const response = await fetch(`/api/patients/${this.currentPatientId}/radiographs`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          console.log(\"[DEBUG] Radiografie ricevute dal backend:\", data);\n          this.radiographs = data;\n        } else {\n          this.errorMessage = \"Errore nel recupero delle radiografie.\";\n          console.error(\"[ERROR] Errore nella risposta del server:\", response.status);\n        }\n      } catch (error) {\n        this.errorMessage = \"Errore di connessione al server.\";\n        console.error(\"[ERROR] Errore durante la connessione al server:\", error);\n      }\n    },\n    // Rimuovi la logica che cerca di modificare il patientId\n    async selectPatient(patient) {\n      this.selectedPatient = patient;\n      this.currentPatientId = patient.userId; // Aggiorna la variabile locale\n      this.radiographs = []; // Svuota le radiografie precedenti\n      await this.loadRadiographs(); // Carica le radiografie del nuovo paziente\n    },\n    toggleRadiograph(radiograph) {\n      if (this.selectedRadiograph === radiograph) {\n        this.isSlidingDown = false;\n        this.isSlidingUp = true;\n        setTimeout(() => {\n          this.isImageVisible = false;\n          this.selectedRadiograph = null;\n          this.isSlidingUp = false;\n        }, 300);\n      } else {\n        this.selectedRadiograph = radiograph;\n        this.isSlidingUp = false;\n        this.isSlidingDown = true;\n        this.isImageVisible = true;\n      }\n    },\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    closeModal() {\n      this.isModalOpen = false;\n    }\n  }\n};","map":{"version":3,"names":["name","props","patientId","type","String","required","patientName","data","radiographs","selectedRadiograph","isModalOpen","modalImageUrl","isImageVisible","isSlidingDown","isSlidingUp","errorMessage","currentPatientId","mounted","loadRadiographs","watch","newPatientId","methods","console","log","response","fetch","method","headers","ok","json","error","status","selectPatient","patient","selectedPatient","userId","toggleRadiograph","radiograph","setTimeout","enlargeRadiograph","url","closeModal"],"sources":["C:\\Users\\Utente\\Desktop\\osteoarthritis-project\\frontend\\src\\components\\PatientRadiographs.vue"],"sourcesContent":["<template>\r\n  <div class=\"radiograph-list\">\r\n    <div class=\"line-container\">\r\n      <div class=\"line\"></div>\r\n    </div>\r\n    <h2>Radiografie di {{ patientName }}</h2>\r\n    <ul v-if=\"radiographs.length\">\r\n      <li\r\n        v-for=\"radiograph in radiographs\"\r\n        :key=\"radiograph.name\"\r\n        class=\"radiograph-item\"\r\n      >\r\n        <div>\r\n          {{ radiograph.date }} -\r\n          <button @click=\"toggleRadiograph(radiograph)\" class=\"view-link\">\r\n            Visualizza\r\n          </button>\r\n        </div>\r\n\r\n        <div\r\n          v-if=\"selectedRadiograph === radiograph\"\r\n          class=\"radiograph-preview\"\r\n        >\r\n          <div\r\n            class=\"content-with-animation\"\r\n            :class=\"{ 'slide-down': isSlidingDown, 'slide-up': isSlidingUp }\"\r\n          >\r\n            <img\r\n              :src=\"radiograph.url\"\r\n              alt=\"Radiografia\"\r\n              class=\"radiograph-image\"\r\n              v-show=\"isImageVisible\"\r\n            />\r\n          </div>\r\n          <div class=\"radiograph-controls\">\r\n            <button\r\n              @click=\"enlargeRadiograph(radiograph.url)\"\r\n              class=\"control-button\"\r\n            >\r\n              <img src=\"@/assets/zoom.svg\" alt=\"Zoom\" class=\"icon\" />\r\n            </button>\r\n            <a\r\n              :href=\"`/api/download-radiograph?url=${encodeURIComponent(\r\n                radiograph.url\r\n              )}&filename=radiografia_${radiograph.date}.png`\"\r\n              class=\"control-button\"\r\n              download\r\n            >\r\n              <img src=\"@/assets/download.svg\" alt=\"Download\" class=\"icon\" />\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    <p v-else>Nessuna radiografia trovata per questo paziente.</p>\r\n\r\n    <div v-if=\"isModalOpen\" class=\"modal\">\r\n      <div class=\"modal-content\">\r\n        <span @click=\"closeModal\" class=\"close-button\">\r\n          <img src=\"@/assets/cross.svg\" alt=\"Chiudi\" class=\"close-icon\" />\r\n        </span>\r\n        <img\r\n          :src=\"modalImageUrl\"\r\n          alt=\"Immagine ingrandita\"\r\n          class=\"modal-image\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"errorMessage\" class=\"error-alert\">\r\n      {{ errorMessage }}\r\n      <button @click=\"errorMessage = ''\" class=\"close-error\">Ã—</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"PatientRadiographs\",\r\n  props: {\r\n    patientId: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    patientName: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      radiographs: [],\r\n      selectedRadiograph: null,\r\n      isModalOpen: false,\r\n      modalImageUrl: \"\",\r\n      isImageVisible: false,\r\n      isSlidingDown: false,\r\n      isSlidingUp: false,\r\n      errorMessage: \"\",\r\n      currentPatientId: this.patientId, // Variabile locale per gestire il patientId\r\n    };\r\n  },\r\n  async mounted() {\r\n    await this.loadRadiographs(); // Carica le radiografie iniziali, se necessario\r\n  },\r\n\r\n  watch: {\r\n    patientId(newPatientId) {\r\n      this.currentPatientId = newPatientId; // Aggiorna la variabile locale quando cambia la prop\r\n      this.loadRadiographs(); // Ricarica le radiografie quando la prop cambia\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    async loadRadiographs() {\r\n      try {\r\n        console.log(\"Props patientId:\", this.patientId);\r\n        console.log(\"Props patientName:\", this.patientName);\r\n\r\n        const response = await fetch(\r\n          `/api/patients/${this.currentPatientId}/radiographs`,\r\n          {\r\n            method: \"GET\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          console.log(\"[DEBUG] Radiografie ricevute dal backend:\", data);\r\n          this.radiographs = data;\r\n        } else {\r\n          this.errorMessage = \"Errore nel recupero delle radiografie.\";\r\n          console.error(\r\n            \"[ERROR] Errore nella risposta del server:\",\r\n            response.status\r\n          );\r\n        }\r\n      } catch (error) {\r\n        this.errorMessage = \"Errore di connessione al server.\";\r\n        console.error(\r\n          \"[ERROR] Errore durante la connessione al server:\",\r\n          error\r\n        );\r\n      }\r\n    },\r\n\r\n    // Rimuovi la logica che cerca di modificare il patientId\r\n    async selectPatient(patient) {\r\n      this.selectedPatient = patient;\r\n      this.currentPatientId = patient.userId; // Aggiorna la variabile locale\r\n      this.radiographs = []; // Svuota le radiografie precedenti\r\n      await this.loadRadiographs(); // Carica le radiografie del nuovo paziente\r\n    },\r\n\r\n    toggleRadiograph(radiograph) {\r\n      if (this.selectedRadiograph === radiograph) {\r\n        this.isSlidingDown = false;\r\n        this.isSlidingUp = true;\r\n        setTimeout(() => {\r\n          this.isImageVisible = false;\r\n          this.selectedRadiograph = null;\r\n          this.isSlidingUp = false;\r\n        }, 300);\r\n      } else {\r\n        this.selectedRadiograph = radiograph;\r\n        this.isSlidingUp = false;\r\n        this.isSlidingDown = true;\r\n        this.isImageVisible = true;\r\n      }\r\n    },\r\n\r\n    enlargeRadiograph(url) {\r\n      this.modalImageUrl = url;\r\n      this.isModalOpen = true;\r\n    },\r\n\r\n    closeModal() {\r\n      this.isModalOpen = false;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.error-alert {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  background-color: #f44336;\r\n  color: white;\r\n  padding: 16px;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  z-index: 1000;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n  font-size: 14px;\r\n}\r\n\r\n.close-error {\r\n  background: none;\r\n  border: none;\r\n  color: white;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  padding: 0 4px;\r\n}\r\n\r\n.control-button:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.radiograph-list {\r\n  max-width: 800px;\r\n  margin: 20px auto;\r\n}\r\n\r\n.line-container {\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 2rem 0;\r\n}\r\n\r\n.line {\r\n  width: 90%;\r\n  height: 1px;\r\n  background-color: #ccc;\r\n  margin: 0 auto;\r\n}\r\n\r\nh2 {\r\n  font-size: 18px;\r\n  color: #333;\r\n  margin-top: 30px;\r\n  margin-bottom: 15px;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\nli.radiograph-item {\r\n  padding: 10px 0;\r\n  border-bottom: 1px solid #ccc;\r\n  font-size: 12px;\r\n  color: #444;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.view-link {\r\n  color: #007bff;\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  transition: color 0.5s ease;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.view-link:hover {\r\n  color: #0056b3;\r\n}\r\n\r\n.radiograph-preview {\r\n  margin-top: 15px;\r\n  width: 95%;\r\n  align-self: center;\r\n}\r\n\r\n.radiograph-image {\r\n  width: 100%;\r\n  display: block;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.content-with-animation {\r\n  overflow: hidden;\r\n  max-height: 0;\r\n  transition: max-height 0.5s ease-out, transform 0.5s ease-out;\r\n  transform: translateY(-20px);\r\n}\r\n\r\n.content-with-animation.slide-down {\r\n  max-height: 550px;\r\n  transform: translateY(0);\r\n}\r\n\r\n.content-with-animation.slide-up {\r\n  max-height: 0;\r\n  transform: translateY(-20px);\r\n}\r\n\r\n.radiograph-controls {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.control-button {\r\n  background-color: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n  margin-left: 10px;\r\n}\r\n\r\n.icon {\r\n  width: 20px;\r\n  height: 20px;\r\n}\r\n\r\n.modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.modal-content {\r\n  position: relative;\r\n  width: auto;\r\n  max-width: 90vmin; /* Adatta la dimensione al lato piÃ¹ piccolo del viewport */\r\n  max-height: 90vmin; /* Stessa dimensione del contenitore dell'immagine */\r\n  background: white;\r\n  border-radius: 6px;\r\n  padding: 0; /* Rimuove lo spazio interno */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.modal-image {\r\n  height: auto; /* Calcola l'altezza automaticamente */\r\n  width: 80vmin; /* Usa il lato minore tra altezza e larghezza della finestra */\r\n  max-width: 100%; /* Non supera la larghezza disponibile */\r\n  max-height: 100%; /* Non supera l'altezza disponibile */\r\n  display: block;\r\n  margin: 0 auto;\r\n  object-fit: cover; /* Assicura il mantenimento delle proporzioni */\r\n}\r\n\r\n.close-button {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 16px;\r\n  cursor: pointer;\r\n}\r\n\r\n.close-icon {\r\n  width: 22px;\r\n  height: 22px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}