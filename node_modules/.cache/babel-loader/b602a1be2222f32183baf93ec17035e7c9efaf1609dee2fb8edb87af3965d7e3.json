{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"VerifyEmail\",\n  data() {\n    return {\n      verificationMessage: \"Verificando la tua email...\",\n      errorMessage: null,\n      isLoading: true,\n      newPassword: \"\" // Valore della nuova password\n    };\n  },\n  async mounted() {\n    const uid = this.$route.params.uid; // Assicurati che l'UID sia presente nell'URL\n    try {\n      const response = await axios.get(`http://127.0.0.1:5000/verify-email/${uid}`);\n\n      // Imposta il messaggio di verifica basato sulla risposta del server\n      if (response.data.message === \"Email già verificata!\") {\n        this.verificationMessage = \"La tua email è già stata verificata!\";\n      } else if (response.data.message === \"Email verificata con successo!\") {\n        this.verificationMessage = \"Email verificata con successo!\";\n        this.isPasswordFieldVisible = true; // Mostra il campo password\n      }\n      console.log(\"Risposta server --> \" + response.data.message);\n    } catch (error) {\n      this.errorMessage = error.response?.data?.error || \"Errore durante la verifica dell'email.\";\n    } finally {\n      this.isLoading = false;\n    }\n  },\n  methods: {\n    async updatePassword() {\n      if (!this.newPassword) {\n        this.errorMessage = \"La password non può essere vuota.\";\n        return;\n      }\n      this.isLoading = true;\n      try {\n        const uid = this.$route.params.uid;\n        await axios.post(\"http://127.0.0.1:5000/update-password\", {\n          uid,\n          newPassword: this.newPassword\n        });\n        this.verificationMessage = \"Password aggiornata con successo!\";\n        this.isPasswordFieldVisible = false;\n      } catch (error) {\n        this.errorMessage = error.response?.data?.error || \"Errore durante l'aggiornamento della password.\";\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    goToLogin() {\n      this.$router.push(\"/login\");\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","verificationMessage","errorMessage","isLoading","newPassword","mounted","uid","$route","params","response","get","message","isPasswordFieldVisible","console","log","error","methods","updatePassword","post","goToLogin","$router","push"],"sources":["C:\\Users\\Utente\\Desktop\\osteoarthritis-project\\frontend\\src\\components\\ResetPassword.vue"],"sourcesContent":["<template>\n  <div class=\"verify-email\">\n    <div class=\"container mt-5\">\n      <h2 class=\"mb-4\">Reimposta la tua password</h2>\n      <p v-if=\"errorMessage\">{{ errorMessage }}</p>\n\n      <!-- Campo per inserire la nuova password -->\n      <div>\n        <label for=\"new-password\">Inserisci la nuova password:</label>\n        <input\n          type=\"password\"\n          id=\"new-password\"\n          class=\"form-control mt-3\"\n          v-model=\"newPassword\"\n          placeholder=\"Nuova password\"\n        />\n        <button\n          class=\"btn btn-primary mt-4\"\n          :disabled=\"isLoading\"\n          @click=\"updatePassword\"\n        >\n          Aggiorna Password\n        </button>\n      </div>\n\n      <!-- Bottone per il login se non ci sono errori -->\n      <div\n        class=\"btn-group mt-4\"\n        v-if=\"!isLoading && !errorMessage && !isPasswordFieldVisible\"\n      >\n        <button class=\"btn btn-primary btn-next\" @click=\"goToLogin\">\n          Esegui il login\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: \"VerifyEmail\",\n  data() {\n    return {\n      verificationMessage: \"Verificando la tua email...\",\n      errorMessage: null,\n      isLoading: true,\n      newPassword: \"\", // Valore della nuova password\n    };\n  },\n  async mounted() {\n    const uid = this.$route.params.uid; // Assicurati che l'UID sia presente nell'URL\n    try {\n      const response = await axios.get(\n        `http://127.0.0.1:5000/verify-email/${uid}`\n      );\n\n      // Imposta il messaggio di verifica basato sulla risposta del server\n      if (response.data.message === \"Email già verificata!\") {\n        this.verificationMessage = \"La tua email è già stata verificata!\";\n      } else if (response.data.message === \"Email verificata con successo!\") {\n        this.verificationMessage = \"Email verificata con successo!\";\n        this.isPasswordFieldVisible = true; // Mostra il campo password\n      }\n\n      console.log(\"Risposta server --> \" + response.data.message);\n    } catch (error) {\n      this.errorMessage =\n        error.response?.data?.error || \"Errore durante la verifica dell'email.\";\n    } finally {\n      this.isLoading = false;\n    }\n  },\n  methods: {\n    async updatePassword() {\n      if (!this.newPassword) {\n        this.errorMessage = \"La password non può essere vuota.\";\n        return;\n      }\n\n      this.isLoading = true;\n      try {\n        const uid = this.$route.params.uid;\n        await axios.post(\"http://127.0.0.1:5000/update-password\", {\n          uid,\n          newPassword: this.newPassword,\n        });\n\n        this.verificationMessage = \"Password aggiornata con successo!\";\n        this.isPasswordFieldVisible = false;\n      } catch (error) {\n        this.errorMessage =\n          error.response?.data?.error ||\n          \"Errore durante l'aggiornamento della password.\";\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    goToLogin() {\n      this.$router.push(\"/login\");\n    },\n  },\n};\n</script>\n\n<style scoped>\n.verify-email {\n  background: #ffffff; /* Sfondo bianco, simile alla pagina di login */\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 0px 0px rgba(0, 0, 0, 0); /* Rimuove ombre esterne */\n}\n\n.container {\n  max-width: 80%;\n  padding: 40px;\n  border-radius: 15px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1); /* Simile alla shadow del login */\n  margin-top: 100px;\n  height: auto;\n  text-align: center; /* Centra il testo */\n  flex-grow: 1; /* Permette al contenuto principale di occupare lo spazio rimanente */\n  margin-left: 20px; /* Margine sinistro per distanziare il contenuto dalla sidebar */\n}\n\nh2 {\n  font-size: 18px; /* Uniforma il font size al login */\n  margin-bottom: 30px;\n}\n\np {\n  font-size: 14px;\n  color: #6c757d;\n}\n\n.btn-group .btn {\n  width: 100%; /* Assicura che i bottoni occupino l'intera larghezza */\n  margin-top: 20px;\n  padding: 10px;\n}\n\n.btn-primary {\n  background-color: #007bff;\n  color: white;\n  padding: 8px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  width: 80%;\n  max-width: 300px;\n  min-width: 200px;\n  font-size: 13px;\n  transition: background-color 0.3s ease;\n  text-align: center;\n  display: inline-block;\n}\n\n.btn-primary:hover {\n  background-color: #0056b3;\n}\n\n.sidebar {\n  top: 0;\n  width: 250px; /* Imposta la larghezza della sidebar */\n  height: 100vh; /* Imposta l'altezza della sidebar al 100% della viewport */\n  padding: 20px; /* Padding interno */\n  background: linear-gradient(180deg, #212529, #343a40);\n}\n\n.sidebar .nav-link {\n  color: #cfd2d6;\n}\n\n.sidebar .nav-link:hover {\n  background-color: #495057;\n  border-radius: 5px;\n}\n\n.nav-link {\n  padding: 10px 15px; /* Aggiunge padding ai link per migliorarne l'aspetto */\n}\n\n@media (max-width: 767.98px) {\n  .navbar-brand {\n    font-size: 1.5rem;\n  }\n\n  .sidebar {\n    display: none;\n  }\n}\n</style>\n"],"mappings":"AAuCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,mBAAmB,EAAE,6BAA6B;MAClDC,YAAY,EAAE,IAAI;MAClBC,SAAS,EAAE,IAAI;MACfC,WAAW,EAAE,EAAE,CAAE;IACnB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAMC,GAAE,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,GAAG,EAAE;IACpC,IAAI;MACF,MAAMG,QAAO,GAAI,MAAMX,KAAK,CAACY,GAAG,CAC9B,sCAAsCJ,GAAG,EAC3C,CAAC;;MAED;MACA,IAAIG,QAAQ,CAACT,IAAI,CAACW,OAAM,KAAM,uBAAuB,EAAE;QACrD,IAAI,CAACV,mBAAkB,GAAI,sCAAsC;MACnE,OAAO,IAAIQ,QAAQ,CAACT,IAAI,CAACW,OAAM,KAAM,gCAAgC,EAAE;QACrE,IAAI,CAACV,mBAAkB,GAAI,gCAAgC;QAC3D,IAAI,CAACW,sBAAqB,GAAI,IAAI,EAAE;MACtC;MAEAC,OAAO,CAACC,GAAG,CAAC,sBAAqB,GAAIL,QAAQ,CAACT,IAAI,CAACW,OAAO,CAAC;IAC7D,EAAE,OAAOI,KAAK,EAAE;MACd,IAAI,CAACb,YAAW,GACda,KAAK,CAACN,QAAQ,EAAET,IAAI,EAAEe,KAAI,IAAK,wCAAwC;IAC3E,UAAU;MACR,IAAI,CAACZ,SAAQ,GAAI,KAAK;IACxB;EACF,CAAC;EACDa,OAAO,EAAE;IACP,MAAMC,cAAcA,CAAA,EAAG;MACrB,IAAI,CAAC,IAAI,CAACb,WAAW,EAAE;QACrB,IAAI,CAACF,YAAW,GAAI,mCAAmC;QACvD;MACF;MAEA,IAAI,CAACC,SAAQ,GAAI,IAAI;MACrB,IAAI;QACF,MAAMG,GAAE,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,GAAG;QAClC,MAAMR,KAAK,CAACoB,IAAI,CAAC,uCAAuC,EAAE;UACxDZ,GAAG;UACHF,WAAW,EAAE,IAAI,CAACA;QACpB,CAAC,CAAC;QAEF,IAAI,CAACH,mBAAkB,GAAI,mCAAmC;QAC9D,IAAI,CAACW,sBAAqB,GAAI,KAAK;MACrC,EAAE,OAAOG,KAAK,EAAE;QACd,IAAI,CAACb,YAAW,GACda,KAAK,CAACN,QAAQ,EAAET,IAAI,EAAEe,KAAI,IAC1B,gDAAgD;MACpD,UAAU;QACR,IAAI,CAACZ,SAAQ,GAAI,KAAK;MACxB;IACF,CAAC;IACDgB,SAASA,CAAA,EAAG;MACV,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;IAC7B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}