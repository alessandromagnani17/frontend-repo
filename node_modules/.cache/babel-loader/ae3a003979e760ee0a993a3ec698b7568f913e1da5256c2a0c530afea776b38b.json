{"ast":null,"code":"export default {\n  name: \"PatientRadiographs\",\n  props: {\n    patientId: {\n      type: String,\n      required: true\n    },\n    patientName: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      radiographs: [],\n      selectedRadiograph: null,\n      isModalOpen: false,\n      modalImageUrl: \"\",\n      isImageVisible: false,\n      isSlidingDown: false,\n      isSlidingUp: false,\n      errorMessage: \"\",\n      currentPatientId: this.patientId // Variabile locale per gestire il patientId\n    };\n  },\n  async mounted() {\n    await this.loadRadiographs(); // Carica le radiografie iniziali, se necessario\n  },\n  watch: {\n    patientId(newPatientId) {\n      this.currentPatientId = newPatientId; // Aggiorna la variabile locale quando cambia la prop\n      this.loadRadiographs(); // Ricarica le radiografie quando la prop cambia\n    }\n  },\n  methods: {\n    async loadRadiographs() {\n      try {\n        console.log(\"Props patientId:\", this.patientId);\n        console.log(\"Props patientName:\", this.patientName);\n        const response = await fetch(`/api/patients/${this.currentPatientId}/radiographs`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (response.ok) {\n          this.radiographs = await response.json();\n        } else {\n          this.errorMessage = \"Errore nel recupero delle radiografie.\";\n        }\n      } catch (error) {\n        this.errorMessage = \"Errore di connessione al server.\";\n        console.error(\"Errore:\", error);\n      }\n    },\n    // Rimuovi la logica che cerca di modificare il patientId\n    async selectPatient(patient) {\n      this.selectedPatient = patient;\n      this.currentPatientId = patient.userId; // Aggiorna la variabile locale\n      this.radiographs = []; // Svuota le radiografie precedenti\n      await this.loadRadiographs(); // Carica le radiografie del nuovo paziente\n    },\n    toggleRadiograph(radiograph) {\n      if (this.selectedRadiograph === radiograph) {\n        this.isSlidingDown = false;\n        this.isSlidingUp = true;\n        setTimeout(() => {\n          this.isImageVisible = false;\n          this.selectedRadiograph = null;\n          this.isSlidingUp = false;\n        }, 300);\n      } else {\n        this.selectedRadiograph = radiograph;\n        this.isSlidingUp = false;\n        this.isSlidingDown = true;\n        this.isImageVisible = true;\n      }\n    },\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    closeModal() {\n      this.isModalOpen = false;\n    }\n  }\n};","map":{"version":3,"names":["name","props","patientId","type","String","required","patientName","data","radiographs","selectedRadiograph","isModalOpen","modalImageUrl","isImageVisible","isSlidingDown","isSlidingUp","errorMessage","currentPatientId","mounted","loadRadiographs","watch","newPatientId","methods","console","log","response","fetch","method","headers","ok","json","error","selectPatient","patient","selectedPatient","userId","toggleRadiograph","radiograph","setTimeout","enlargeRadiograph","url","closeModal"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/PatientRadiographs.vue"],"sourcesContent":["<template>\n  <div class=\"radiograph-list\">\n    <h2>Radiografie di {{ patientName }}</h2>\n    <ul v-if=\"radiographs.length\">\n      <li\n        v-for=\"radiograph in radiographs\"\n        :key=\"radiograph.name\"\n        class=\"radiograph-item\"\n      >\n        <div>\n          {{ radiograph.date }} -\n          <button @click=\"toggleRadiograph(radiograph)\" class=\"view-link\">\n            Visualizza\n          </button>\n        </div>\n\n        <div\n          v-if=\"selectedRadiograph === radiograph\"\n          class=\"radiograph-preview\"\n        >\n          <div\n            class=\"content-with-animation\"\n            :class=\"{ 'slide-down': isSlidingDown, 'slide-up': isSlidingUp }\"\n          >\n            <img\n              :src=\"radiograph.url\"\n              alt=\"Radiografia\"\n              class=\"radiograph-image\"\n              v-show=\"isImageVisible\"\n            />\n          </div>\n          <div class=\"radiograph-controls\">\n            <button\n              @click=\"enlargeRadiograph(radiograph.url)\"\n              class=\"control-button\"\n            >\n              <img src=\"@/assets/zoom.svg\" alt=\"Zoom\" class=\"icon\" />\n            </button>\n            <a\n              :href=\"`/api/download-radiograph?url=${encodeURIComponent(\n                radiograph.url\n              )}&filename=radiografia_${radiograph.date}.png`\"\n              class=\"control-button\"\n              download\n            >\n              <img src=\"@/assets/download.svg\" alt=\"Download\" class=\"icon\" />\n            </a>\n          </div>\n        </div>\n      </li>\n    </ul>\n    <p v-else>Nessuna radiografia trovata per questo paziente.</p>\n\n    <div v-if=\"isModalOpen\" class=\"modal\">\n      <div class=\"modal-content\">\n        <span @click=\"closeModal\" class=\"close-button\">\n          <img src=\"@/assets/cross.svg\" alt=\"Chiudi\" class=\"close-icon\" />\n        </span>\n        <img\n          :src=\"modalImageUrl\"\n          alt=\"Immagine ingrandita\"\n          class=\"modal-image\"\n        />\n      </div>\n    </div>\n\n    <div v-if=\"errorMessage\" class=\"error-alert\">\n      {{ errorMessage }}\n      <button @click=\"errorMessage = ''\" class=\"close-error\">×</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"PatientRadiographs\",\n  props: {\n    patientId: {\n      type: String,\n      required: true,\n    },\n    patientName: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      radiographs: [],\n      selectedRadiograph: null,\n      isModalOpen: false,\n      modalImageUrl: \"\",\n      isImageVisible: false,\n      isSlidingDown: false,\n      isSlidingUp: false,\n      errorMessage: \"\",\n      currentPatientId: this.patientId, // Variabile locale per gestire il patientId\n    };\n  },\n  async mounted() {\n    await this.loadRadiographs(); // Carica le radiografie iniziali, se necessario\n  },\n\n  watch: {\n    patientId(newPatientId) {\n      this.currentPatientId = newPatientId; // Aggiorna la variabile locale quando cambia la prop\n      this.loadRadiographs(); // Ricarica le radiografie quando la prop cambia\n    },\n  },\n\n  methods: {\n    async loadRadiographs() {\n      try {\n        console.log(\"Props patientId:\", this.patientId);\n        console.log(\"Props patientName:\", this.patientName);\n\n        const response = await fetch(\n          `/api/patients/${this.currentPatientId}/radiographs`,\n          {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n\n        if (response.ok) {\n          this.radiographs = await response.json();\n        } else {\n          this.errorMessage = \"Errore nel recupero delle radiografie.\";\n        }\n      } catch (error) {\n        this.errorMessage = \"Errore di connessione al server.\";\n        console.error(\"Errore:\", error);\n      }\n    },\n\n    // Rimuovi la logica che cerca di modificare il patientId\n    async selectPatient(patient) {\n      this.selectedPatient = patient;\n      this.currentPatientId = patient.userId; // Aggiorna la variabile locale\n      this.radiographs = []; // Svuota le radiografie precedenti\n      await this.loadRadiographs(); // Carica le radiografie del nuovo paziente\n    },\n\n    toggleRadiograph(radiograph) {\n      if (this.selectedRadiograph === radiograph) {\n        this.isSlidingDown = false;\n        this.isSlidingUp = true;\n        setTimeout(() => {\n          this.isImageVisible = false;\n          this.selectedRadiograph = null;\n          this.isSlidingUp = false;\n        }, 300);\n      } else {\n        this.selectedRadiograph = radiograph;\n        this.isSlidingUp = false;\n        this.isSlidingDown = true;\n        this.isImageVisible = true;\n      }\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    closeModal() {\n      this.isModalOpen = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.error-alert {\n  position: fixed;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #f44336;\n  color: white;\n  padding: 16px;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n  font-size: 14px;\n}\n\n.close-error {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 16px;\n  cursor: pointer;\n  padding: 0 4px;\n}\n\n.control-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.radiograph-list {\n  max-width: 800px;\n  margin: 20px auto;\n}\n\nh2 {\n  font-size: 18px;\n  color: #333;\n  margin-bottom: 15px;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli.radiograph-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #ccc;\n  font-size: 12px;\n  color: #444;\n  display: flex;\n  flex-direction: column;\n}\n\n.view-link {\n  color: #007bff;\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-weight: bold;\n  transition: color 0.5s ease;\n  padding: 0;\n  margin: 0;\n}\n\n.view-link:hover {\n  color: #0056b3;\n}\n\n.radiograph-preview {\n  margin-top: 15px;\n  width: 95%;\n  align-self: center;\n}\n\n.radiograph-image {\n  width: 100%;\n  display: block;\n  margin-bottom: 10px;\n}\n\n.content-with-animation {\n  overflow: hidden;\n  max-height: 0;\n  transition: max-height 0.5s ease-out, transform 0.5s ease-out;\n  transform: translateY(-20px);\n}\n\n.content-with-animation.slide-down {\n  max-height: 550px;\n  transform: translateY(0);\n}\n\n.content-with-animation.slide-up {\n  max-height: 0;\n  transform: translateY(-20px);\n}\n\n.radiograph-controls {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.control-button {\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  margin-left: 10px;\n}\n\n.icon {\n  width: 20px;\n  height: 20px;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  position: relative;\n  max-width: 80%;\n  max-height: 80%;\n  background: white;\n  border-radius: 6px;\n  padding: 20px;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.modal-image {\n  width: 92%;\n  max-height: 80vh;\n  display: block;\n  margin: 0 auto;\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 16px;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 12px;\n  height: 12px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}