{"ast":null,"code":"import { format, parseISO } from \"date-fns\";\nimport { it } from \"date-fns/locale\"; // Importa la localizzazione italiana\nimport { formatDistanceToNow } from \"date-fns\";\nexport default {\n  name: \"UserNotifications\",\n  data() {\n    return {\n      notifications: [],\n      // Lista delle notifiche\n      unreadCount: 0 // Conteggio delle notifiche non lette\n    };\n  },\n  mounted() {\n    this.fetchNotifications();\n  },\n  methods: {\n    async fetchNotifications() {\n      try {\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\n        const userId = userData.userId;\n        const response = await fetch(`/api/notifications?patientId=${userId}`);\n        if (!response.ok) {\n          throw new Error(\"Errore nel recupero delle notifiche\");\n        }\n        const data = await response.json();\n        if (Array.isArray(data.notifications)) {\n          // Ordina le notifiche dalla più recente alla più vecchia\n          this.notifications = data.notifications.sort((a, b) => new Date(b.sentAt) - new Date(a.sentAt)) // Ordinamento in base a 'sentAt'\n          .map(notification => ({\n            ...notification,\n            relativeSentAt: formatDistanceToNow(new Date(notification.sentAt), {\n              addSuffix: true,\n              locale: it // Aggiunge la lingua italiana\n            }),\n            // Formattazione della data\n            formattedDate: format(parseISO(notification.date), \"d MMMM yyyy\", {\n              locale: it // Imposta la lingua italiana per la data\n            })\n          }));\n\n          // Calcola il numero di notifiche non lette\n          const unreadCount = this.notifications.filter(notification => !notification.isRead).length;\n          console.log(\"Numero di notifiche non lette = \", unreadCount);\n          // Emetti l'evento per aggiornare il conteggio delle notifiche non lette\n          this.$emit(\"unread-count-changed\", unreadCount); // Emissione dell'evento\n        } else {\n          throw new Error(\"Formato delle notifiche inatteso\");\n        }\n      } catch (error) {\n        console.error(\"Errore nel recupero delle notifiche:\", error);\n      }\n    },\n    updateUnreadCount() {\n      this.unreadCount = this.notifications.filter(notification => !notification.isRead).length;\n    },\n    async markAsRead(notificationId) {\n      if (!notificationId) {\n        console.error(\"No notification ID provided\");\n        return;\n      }\n      try {\n        const response = await fetch(`/api/notifications/${notificationId}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            isRead: true\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Errore nel segnare la notifica come letta.\");\n        }\n\n        // Aggiorna lo stato dopo aver segnato come letta\n        this.notifications = this.notifications.map(notification => notification.id === notificationId ? {\n          ...notification,\n          isRead: true\n        } : notification);\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel segnare la notifica come letta.\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["format","parseISO","it","formatDistanceToNow","name","data","notifications","unreadCount","mounted","fetchNotifications","methods","userData","JSON","parse","localStorage","getItem","userId","response","fetch","ok","Error","json","Array","isArray","sort","a","b","Date","sentAt","map","notification","relativeSentAt","addSuffix","locale","formattedDate","date","filter","isRead","length","console","log","$emit","error","updateUnreadCount","markAsRead","notificationId","method","headers","body","stringify","id"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/views/UserNotifications.vue"],"sourcesContent":["<template>\n  <div class=\"notifications-container\">\n    <h2 class=\"notifications-header\">\n      Notifiche\n      <span v-if=\"unreadCount > 0\" class=\"badge badge-warning\">\n        {{ unreadCount }}\n      </span>\n    </h2>\n    <div v-if=\"notifications.length\">\n      <ul class=\"list-group\">\n        <li\n          v-for=\"(notification, index) in notifications\"\n          :key=\"index\"\n          class=\"list-group-item\"\n          :class=\"{ 'notification-read': notification.isRead }\"\n        >\n          <!-- Messaggio della notifica -->\n          <div class=\"notification-message\">\n            <strong>{{ notification.message }}</strong>\n          </div>\n\n          <!-- Data e ora -->\n          <div class=\"notification-details\">\n            <div>\n              <span>Data: {{ notification.formattedDate }}</span>\n            </div>\n            <div>\n              <span>Ora: {{ notification.time }}</span>\n            </div>\n          </div>\n\n          <!-- Pulsante per segnare come letto (ora sopra \"Inviata:\") -->\n          <div class=\"mark-read-btn-container\" v-if=\"!notification.isRead\">\n            <button\n              @click=\"markAsRead(notification.id)\"\n              class=\"btn btn-sm btn-primary mark-read-btn\"\n            >\n              Segna come letta\n            </button>\n          </div>\n\n          <!-- Data e ora di invio -->\n          <div class=\"notification-sent-at\">\n            Inviata: {{ notification.relativeSentAt }}\n          </div>\n        </li>\n      </ul>\n    </div>\n    <div v-else class=\"no-notifications\">\n      <p>Non ci sono notifiche.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { format, parseISO } from \"date-fns\";\nimport { it } from \"date-fns/locale\"; // Importa la localizzazione italiana\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default {\n  name: \"UserNotifications\",\n  data() {\n    return {\n      notifications: [], // Lista delle notifiche\n      unreadCount: 0, // Conteggio delle notifiche non lette\n    };\n  },\n\n  mounted() {\n    this.fetchNotifications();\n  },\n\n  methods: {\n    async fetchNotifications() {\n      try {\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\n        const userId = userData.userId;\n\n        const response = await fetch(`/api/notifications?patientId=${userId}`);\n        if (!response.ok) {\n          throw new Error(\"Errore nel recupero delle notifiche\");\n        }\n\n        const data = await response.json();\n        if (Array.isArray(data.notifications)) {\n          // Ordina le notifiche dalla più recente alla più vecchia\n          this.notifications = data.notifications\n            .sort((a, b) => new Date(b.sentAt) - new Date(a.sentAt)) // Ordinamento in base a 'sentAt'\n            .map((notification) => ({\n              ...notification,\n              relativeSentAt: formatDistanceToNow(\n                new Date(notification.sentAt),\n                {\n                  addSuffix: true,\n                  locale: it, // Aggiunge la lingua italiana\n                }\n              ),\n              // Formattazione della data\n              formattedDate: format(\n                parseISO(notification.date),\n                \"d MMMM yyyy\",\n                {\n                  locale: it, // Imposta la lingua italiana per la data\n                }\n              ),\n            }));\n\n          // Calcola il numero di notifiche non lette\n          const unreadCount = this.notifications.filter(\n            (notification) => !notification.isRead\n          ).length;\n\n          console.log(\"Numero di notifiche non lette = \", unreadCount);\n          // Emetti l'evento per aggiornare il conteggio delle notifiche non lette\n          this.$emit(\"unread-count-changed\", unreadCount); // Emissione dell'evento\n        } else {\n          throw new Error(\"Formato delle notifiche inatteso\");\n        }\n      } catch (error) {\n        console.error(\"Errore nel recupero delle notifiche:\", error);\n      }\n    },\n\n    updateUnreadCount() {\n      this.unreadCount = this.notifications.filter(\n        (notification) => !notification.isRead\n      ).length;\n    },\n\n    async markAsRead(notificationId) {\n      if (!notificationId) {\n        console.error(\"No notification ID provided\");\n        return;\n      }\n\n      try {\n        const response = await fetch(`/api/notifications/${notificationId}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ isRead: true }),\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Errore nel segnare la notifica come letta.\");\n        }\n\n        // Aggiorna lo stato dopo aver segnato come letta\n        this.notifications = this.notifications.map((notification) =>\n          notification.id === notificationId\n            ? { ...notification, isRead: true }\n            : notification\n        );\n\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel segnare la notifica come letta.\", error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.notifications-container {\n  background: #ffffff;\n  max-width: 80%; /* La larghezza massima del container */\n  margin: 10% auto 0; /* Centra il container orizzontalmente con auto e imposta un margine in alto */\n  padding: 5%;\n  border-radius: 15px;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n  height: auto;\n}\n\n.notifications-header {\n  font-size: 18px;\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.list-group-item {\n  background: #f9f9f9;\n  border: 1px solid #eee;\n  border-radius: 10px;\n  margin-bottom: 10px;\n  padding: 15px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n  transition: background-color 0.3s, opacity 0.3s, color 0.3s;\n}\n\n/* Classe per notifiche lette */\n.notification-read {\n  opacity: 0.5; /* Maggiore opacità per notifiche lette */\n}\n\n/* Messaggio della notifica */\n.notification-message {\n  font-size: 13px; /* Dimensione del testo più piccola */\n  font-weight: bold;\n  color: #333;\n}\n\n.notification-details {\n  font-size: 11px; /* Testo più piccolo */\n  color: #666;\n  margin-top: 5px;\n  display: flex;\n  flex-direction: column; /* Disposizione verticale */\n  gap: 2px; /* Spazio tra le righe */\n}\n\n.notification-sent-at {\n  font-size: 10px; /* Testo più piccolo */\n  color: #999; /* Colore grigio per differenziare */\n  text-align: right; /* Allinea a destra */\n  margin-top: 5px; /* Spazio sopra */\n}\n\n/* Contenitore per il pulsante, allineato a destra sopra \"Inviata:\" */\n.mark-read-btn-container {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n/* Pulsante per segnare come letto */\n.mark-read-btn {\n  background: #007bff;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 8px 20px;\n  font-size: 11px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.mark-read-btn:hover {\n  background: #0056b3;\n}\n\n.no-notifications {\n  text-align: center;\n  color: #777;\n  font-size: 13px;\n}\n\n.badge-warning {\n  background-color: #ffc107;\n  color: #fff;\n  font-size: 12px; /* Riduce la dimensione del testo nel badge */\n  padding: 4px 8px; /* Riduce la dimensione del badge */\n  border-radius: 5px; /* Mantiene l'aspetto arrotondato */\n  font-weight: bold; /* Mantiene il testo in grassetto */\n  margin-left: 5px; /* Distanza dal testo principale */\n  position: relative; /* Per poter usare top */\n  top: -2px; /* Sposta il badge leggermente più in alto */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}