{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, createTextVNode as _createTextVNode, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"modal\"\n};\nconst _hoisted_3 = {\n  class: \"modal-content\"\n};\nconst _hoisted_4 = [\"min\"];\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = {\n  class: \"calendar\"\n};\nconst _hoisted_7 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_8 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_9 = [\"onClick\"];\nconst _hoisted_10 = {\n  class: \"date\"\n};\nconst _hoisted_11 = {\n  key: 0,\n  class: \"operation-count\",\n  style: {\n    \"background-color\": \"yellow\",\n    \"color\": \"black\"\n  }\n};\nconst _hoisted_12 = {\n  key: 1,\n  class: \"radiograph-count\"\n};\nconst _hoisted_13 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_14 = {\n  key: 0\n};\nconst _hoisted_15 = [\"onClick\"];\nconst _hoisted_16 = {\n  key: 1\n};\nconst _hoisted_17 = {\n  key: 0\n};\nconst _hoisted_18 = {\n  class: \"calendar\"\n};\nconst _hoisted_19 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_20 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_21 = [\"onClick\"];\nconst _hoisted_22 = {\n  class: \"date\"\n};\nconst _hoisted_23 = {\n  key: 0,\n  class: \"radiograph-count\"\n};\nconst _hoisted_24 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_25 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[19] || (_cache[19] = _createElementVNode(\"h1\", null, \"Calendario Attività\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.openScheduleModal && $options.openScheduleModal(...args)),\n    class: \"btn btn-primary\"\n  }, \" Pianifica Operazione DEBUG: Operazioni presenti per giorno \" + _toDisplayString(_ctx.day.date), 1 /* TEXT */), _createCommentVNode(\" Modale per inserire i dettagli dell'operazione \"), $data.showModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", null, \"Pianifica una nuova operazione\", -1 /* HOISTED */)), _cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    for: \"operationDate\"\n  }, \"Data dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.operationDate = $event),\n    id: \"operationDate\",\n    min: $data.minDate\n  }, null, 8 /* PROPS */, _hoisted_4), [[_vModelText, $data.operationDate]]), _cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    for: \"operationTime\"\n  }, \"Ora dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"time\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.operationTime = $event),\n    id: \"operationTime\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.operationTime]]), _cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    for: \"description\"\n  }, \"Descrizione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.description = $event),\n    id: \"description\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.description]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.scheduleOperation && $options.scheduleOperation(...args)),\n    class: \"btn btn-success\"\n  }, \" Salva \"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.closeScheduleModal && $options.closeScheduleModal(...args)),\n    class: \"btn btn-secondary\"\n  }, \" Annulla \")])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Verifica se l'utente è un paziente o un dottore \"), $data.isPatient ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createElementVNode(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => $options.showDayDetails(day)\n    }, [_createCommentVNode(\" Data \"), _createElementVNode(\"div\", _hoisted_10, _toDisplayString(day.date), 1 /* TEXT */), _createCommentVNode(\" Debug temporaneo \"), _createElementVNode(\"pre\", null, \"DEBUG: \" + _toDisplayString(day), 1 /* TEXT */), _createCommentVNode(\" Stampa tutto l'oggetto `day` \"), _createCommentVNode(\" Operazioni \"), day.operations.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, \" DEBUG: Operazioni presenti per giorno \" + _toDisplayString(day.date) + \" \" + _toDisplayString(day.operations.length) + \" \" + _toDisplayString(day.operations.length === 1 ? \"operazione pianificata\" : \"operazioni pianificate\"), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Radiografie \"), day.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, _toDisplayString(day.radiographs.length) + \" \" + _toDisplayString(day.radiographs.length === 1 ? \"caricamento radiografia\" : \"caricamenti radiografie\"), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[14] || (_cache[14] = _createElementVNode(\"strong\", null, \"Paziente:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.selectedPatient.name) + \" \" + _toDisplayString($data.selectedPatient.family_name), 1 /* TEXT */)]), $data.selectedDay.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [_cache[17] || (_cache[17] = _createElementVNode(\"h3\", null, \"Radiografie caricate:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.name), 1 /* TEXT */), _cache[15] || (_cache[15] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString(radiograph.date), 1 /* TEXT */), _cache[16] || (_cache[16] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_15)]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_16, _cache[18] || (_cache[18] = [_createElementVNode(\"p\", null, \"Nessuna radiografia caricata per questa data.\", -1 /* HOISTED */)])))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti \"), _createElementVNode(\"div\", null, [$data.isDoctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createElementVNode(\"div\", _hoisted_20, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => $options.showDayDetails(day)\n    }, [_createElementVNode(\"div\", _hoisted_22, _toDisplayString(day.date), 1 /* TEXT */), day.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, _toDisplayString(day.radiographs.length) + \" \" + _toDisplayString(day.radiographs.length === 1 ? \"caricamento radiografia\" : \"caricamenti radiografie\"), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_21);\n  }), 128 /* KEYED_FRAGMENT */))])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.patientName) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(radiograph.name), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_25)]);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","style","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","openScheduleModal","_toDisplayString","_ctx","day","date","_createCommentVNode","$data","showModal","_hoisted_2","_hoisted_3","for","type","$event","operationDate","id","min","minDate","_hoisted_4","operationTime","description","scheduleOperation","closeScheduleModal","isPatient","_hoisted_5","_hoisted_6","_hoisted_7","changeMonth","monthNames","month","year","_hoisted_8","_Fragment","_renderList","daysInMonth","showDayDetails","_hoisted_10","operations","length","_hoisted_11","radiographs","_hoisted_12","_hoisted_9","_createVNode","_Transition","name","onBeforeEnter","beforeEnter","onEnter","enter","onLeave","leave","default","_withCtx","selectedDay","_hoisted_13","_createTextVNode","selectedPatient","family_name","_hoisted_14","radiograph","enlargeRadiograph","url","_hoisted_15","_hoisted_16","_","isDoctor","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_22","_hoisted_23","_hoisted_21","_hoisted_24","patientName","_hoisted_25"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n    <button @click=\"openScheduleModal\" class=\"btn btn-primary\">\n      Pianifica Operazione DEBUG: Operazioni presenti per giorno {{ day.date }}\n    </button>\n\n    <!-- Modale per inserire i dettagli dell'operazione -->\n    <div v-if=\"showModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h2>Pianifica una nuova operazione</h2>\n        <label for=\"operationDate\">Data dell'operazione:</label>\n        <input\n          type=\"date\"\n          v-model=\"operationDate\"\n          id=\"operationDate\"\n          :min=\"minDate\"\n        />\n\n        <label for=\"operationTime\">Ora dell'operazione:</label>\n        <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\n\n        <label for=\"description\">Descrizione:</label>\n        <textarea v-model=\"description\" id=\"description\"></textarea>\n\n        <button @click=\"scheduleOperation\" class=\"btn btn-success\">\n          Salva\n        </button>\n        <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\n          Annulla\n        </button>\n      </div>\n    </div>\n    <!-- Verifica se l'utente è un paziente o un dottore -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <div class=\"calendar-grid\">\n          <div\n            v-for=\"day in daysInMonth\"\n            :key=\"day.date\"\n            class=\"calendar-day\"\n            @click=\"showDayDetails(day)\"\n          >\n            <!-- Data -->\n            <div class=\"date\">{{ day.date }}</div>\n            <!-- Debug temporaneo -->\n            <pre>DEBUG: {{ day }}</pre>\n            <!-- Stampa tutto l'oggetto `day` -->\n\n            <!-- Operazioni -->\n            <div\n              v-if=\"day.operations.length > 0\"\n              class=\"operation-count\"\n              style=\"background-color: yellow; color: black\"\n            >\n              DEBUG: Operazioni presenti per giorno {{ day.date }}\n              {{ day.operations.length }}\n              {{\n                day.operations.length === 1\n                  ? \"operazione pianificata\"\n                  : \"operazioni pianificate\"\n              }}\n            </div>\n\n            <!-- Radiografie -->\n            <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n              {{ day.radiographs.length }}\n              {{\n                day.radiographs.length === 1\n                  ? \"caricamento radiografia\"\n                  : \"caricamenti radiografie\"\n              }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <p>\n            <strong>Paziente:</strong> {{ selectedPatient.name }}\n            {{ selectedPatient.family_name }}\n          </p>\n          <div v-if=\"selectedDay.radiographs.length > 0\">\n            <h3>Radiografie caricate:</h3>\n            <ul>\n              <li\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <strong>{{ radiograph.name }}</strong\n                ><br />\n                <span>{{ radiograph.date }}</span\n                ><br />\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </li>\n            </ul>\n          </div>\n          <div v-else>\n            <p>Nessuna radiografia caricata per questa data.</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n\n    <!-- Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti -->\n    <div v-else>\n      <div v-if=\"isDoctor\">\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"changeMonth(-1)\">&#8249;</button>\n            <span>{{ monthNames[month] }} {{ year }}</span>\n            <button @click=\"changeMonth(1)\">&#8250;</button>\n          </div>\n\n          <div class=\"calendar-grid\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"day.date\"\n              class=\"calendar-day\"\n              @click=\"showDayDetails(day)\"\n            >\n              <div class=\"date\">{{ day.date }}</div>\n              <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n                {{ day.radiographs.length }}\n                {{\n                  day.radiographs.length === 1\n                    ? \"caricamento radiografia\"\n                    : \"caricamenti radiografie\"\n                }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <div\n            v-for=\"radiograph in selectedDay.radiographs\"\n            :key=\"radiograph.name\"\n          >\n            <p>\n              <strong>{{ radiograph.patientName }}:</strong>\n              {{ radiograph.name }}\n            </p>\n            <button @click=\"enlargeRadiograph(radiograph.url)\">\n              Visualizza Immagine\n            </button>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      operations: [],\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      patientId: null, // ID del paziente\n      selectedPatient: null, // Paziente selezionato (loggato)\n      patients: [], // Pazienti associati al dottore\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n      this.loadOperations();\n      this.refreshCalendar();\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      // Crea un array per tenere traccia delle radiografie per ogni giorno\n      const radiographsPerDay = {};\n\n      // Crea un array per tenere traccia delle operazioni per ogni giorno\n      const operationsPerDay = {};\n\n      if (this.isDoctor) {\n        console.log(\"DEBUG: Utente loggato come medico.\");\n        // Aggrega tutte le radiografie dei pazienti associati al dottore\n        this.patients.forEach((patient) => {\n          console.log(\n            `DEBUG: Elaborazione paziente: ${patient.name} ${patient.family_name}`\n          );\n          if (patient.radiographs) {\n            patient.radiographs.forEach((radiograph) => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n\n          // Debug per le operazioni dei pazienti\n          if (patient.operations) {\n            console.log(\n              `DEBUG: Operazioni del paziente ${patient.name} ${patient.family_name}:`,\n              patient.operations\n            );\n            patient.operations.forEach((operation) => {\n              // Conversione esplicita della data\n              if (!operation.operationDate) {\n                console.warn(\n                  `DEBUG: Operazione senza data trovata:`,\n                  operation\n                );\n                return; // Salta questa operazione\n              }\n\n              // Conversione della data con parsing robusto\n              const operationDate = this.parseISODate(operation.operationDate);\n              console.log(\n                `DEBUG: Data operazione convertita: ${operationDate}, Operazione:`,\n                operation\n              );\n\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}`,\n                });\n              } else {\n                console.warn(\n                  `DEBUG: Operazione scartata a causa di una data non valida:`,\n                  operation\n                );\n              }\n            });\n          }\n          console.log(\"DEBUG: daysInMonth\", this.daysInMonth);\n        });\n      } else {\n        console.log(\"DEBUG: Utente loggato come paziente.\");\n        // Se l'utente è un paziente, usa le proprie radiografie\n        this.radiographs.forEach((radiograph) => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push(radiograph);\n        });\n\n        // Debug per le operazioni del paziente\n        console.log(\"DEBUG: Operazioni del paziente:\", this.operations);\n        this.operations.forEach((operation) => {\n          if (!operation.operationDate) {\n            console.warn(\"DEBUG: Operazione senza data trovata:\", operation);\n            return; // Salta questa operazione\n          }\n\n          const operationDate = this.parseISODate(operation.operationDate);\n          console.log(\n            `DEBUG: Data operazione convertita: ${operationDate}, Operazione:`,\n            operation\n          );\n\n          if (operationDate !== \"Invalid Date\") {\n            if (!operationsPerDay[operationDate]) {\n              operationsPerDay[operationDate] = [];\n            }\n            operationsPerDay[operationDate].push(operation);\n          } else {\n            console.warn(\n              `DEBUG: Operazione scartata a causa di una data non valida:`,\n              operation\n            );\n          }\n        });\n      }\n\n      // Popola i giorni del mese\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i).toDateString();\n        const radiographsOnDay = radiographsPerDay[dayDate] || [];\n        const operationsOnDay = operationsPerDay[dayDate] || [];\n\n        // Debug per le operazioni aggregate per giorno\n        console.log(\n          `DEBUG: Giorno: ${dayDate}, Operazioni trovate:`,\n          operationsOnDay\n        );\n\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n        });\n      }\n\n      console.log(\"DEBUG: Struttura finale dei giorni:\", days);\n      return days;\n    },\n  },\n  methods: {\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (!this.operationDate || !this.operationTime || !this.description) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n        const patientId = this.selectedPatient?.userId || \"default_patient_id\"; // Sostituisci con un ID valido\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(\n          this.operationDate,\n          this.operationTime\n        );\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId,\n            operationDate: formattedDate, // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString(), // Timestamp di creazione\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\n          );\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\n          \"Errore durante la pianificazione dell'operazione:\",\n          error\n        );\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(\n          `DEBUG: Errore nella conversione della data ISO \"${isoString}\":`,\n          error\n        );\n        return \"Invalid Date\";\n      }\n    },\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n\n        // Carica le operazioni del paziente loggato\n        this.loadPatientOperations();\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n\n    // Modifica per caricare le radiografie dei pazienti\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie per ogni paziente\n          this.patients.forEach((patient) => {\n            this.loadRadiographs(patient.userId); // Carica le radiografie per ogni paziente\n            this.loadOperations(patient.userId);\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    async loadOperations(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/operations`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Log delle operazioni trovate\n          console.log(\n            `Operazioni trovate per il paziente con ID ${patientId}:`,\n            data\n          );\n\n          // Trova il paziente e aggiungi le operazioni al suo record\n          const patient = this.patients.find((p) => p.userId === patientId);\n          if (patient) {\n            patient.operations = data; // Aggiungi le operazioni al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    // Modifica per caricare le radiografie specifiche di un paziente\n    async loadRadiographs(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Trova il paziente e aggiungi le radiografie al suo record\n          const patient = this.patients.find((p) => p.userId === patientId);\n          if (patient) {\n            patient.radiographs = data; // Aggiungi le radiografie al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.radiograph-count {\n  position: absolute;\n  bottom: 10px;\n  left: 5px;\n  font-size: 0.7em;\n  color: #007bff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.operation-count {\n  position: absolute;\n  bottom: 10px;\n  left: 5px;\n  font-size: 0.7em;\n  color: red;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 0.7em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 20px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 0.7em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 400px;\n  text-align: center;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 10px;\n  text-align: left;\n}\n\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n}\n\n.btn {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}