{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"modal\"\n};\nconst _hoisted_3 = {\n  class: \"modal-content\"\n};\nconst _hoisted_4 = [\"min\"];\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = {\n  class: \"calendar\"\n};\nconst _hoisted_7 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"date\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"operations-count\",\n  style: {\n    color: 'red'\n  }\n};\nconst _hoisted_11 = {\n  key: 1,\n  class: \"radiograph-count\"\n};\nconst _hoisted_12 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_13 = {\n  key: 0\n};\nconst _hoisted_14 = [\"onClick\"];\nconst _hoisted_15 = {\n  key: 1\n};\nconst _hoisted_16 = {\n  key: 2\n};\nconst _hoisted_17 = {\n  key: 0\n};\nconst _hoisted_18 = {\n  class: \"calendar\"\n};\nconst _hoisted_19 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_20 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_21 = [\"onClick\"];\nconst _hoisted_22 = {\n  class: \"date\"\n};\nconst _hoisted_23 = {\n  key: 0,\n  class: \"radiograph-count\"\n};\nconst _hoisted_24 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_25 = [\"onClick\"];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[20] || (_cache[20] = _createElementVNode(\"h1\", null, \"Calendario Attività\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.openScheduleModal && _ctx.openScheduleModal(...args)),\n    class: \"btn btn-primary\"\n  }, \" Pianifica Operazione \"), _createCommentVNode(\" Modale per inserire i dettagli dell'operazione \"), _ctx.showModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", null, \"Pianifica una nuova operazione\", -1 /* HOISTED */)), _cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    for: \"operationDate\"\n  }, \"Data dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.operationDate = $event),\n    id: \"operationDate\",\n    min: _ctx.minDate\n  }, null, 8 /* PROPS */, _hoisted_4), [[_vModelText, _ctx.operationDate]]), _cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    for: \"operationTime\"\n  }, \"Ora dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"time\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.operationTime = $event),\n    id: \"operationTime\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.operationTime]]), _cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    for: \"description\"\n  }, \"Descrizione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.description = $event),\n    id: \"description\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.description]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => _ctx.scheduleOperation && _ctx.scheduleOperation(...args)),\n    class: \"btn btn-success\"\n  }, \" Salva \"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => _ctx.closeScheduleModal && _ctx.closeScheduleModal(...args)),\n    class: \"btn btn-secondary\"\n  }, \" Annulla \")])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Verifica se l'utente è un paziente o un dottore \"), _ctx.isPatient ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = $event => _ctx.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString(_ctx.monthNames[_ctx.month]) + \" \" + _toDisplayString(_ctx.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = $event => _ctx.changeMonth(1))\n  }, \"›\")]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => _ctx.showDayDetails(day)\n    }, [_createElementVNode(\"div\", _hoisted_9, _toDisplayString(day.date), 1 /* TEXT */), _createCommentVNode(\" Mostra il numero di operazioni programmate \"), day.operationsCount > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, _toDisplayString(day.operationsCount) + \" \" + _toDisplayString(day.operationsCount === 1 ? 'operazione' : 'operazioni'), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Mostra il numero di radiografie caricate (già esistente) \"), day.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, _toDisplayString(day.radiographs.length) + \" \" + _toDisplayString(day.radiographs.length === 1 ? \"caricamento radiografia\" : \"caricamenti radiografie\"), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: _ctx.beforeEnter,\n    onEnter: _ctx.enter,\n    onLeave: _ctx.leave\n  }, {\n    default: _withCtx(() => [_ctx.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString(_ctx.selectedDay.date) + \" \" + _toDisplayString(_ctx.monthNames[_ctx.month]) + \" \" + _toDisplayString(_ctx.year), 1 /* TEXT */), _createCommentVNode(\" Radiografie \"), _ctx.selectedDay.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_cache[16] || (_cache[16] = _createElementVNode(\"h3\", null, \"Radiografie caricate:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.name), 1 /* TEXT */), _cache[14] || (_cache[14] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString(radiograph.date), 1 /* TEXT */), _cache[15] || (_cache[15] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n        onClick: $event => _ctx.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_14)]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Operazioni \"), _ctx.selectedDay.operations.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_cache[18] || (_cache[18] = _createElementVNode(\"h3\", null, \"Operazioni pianificate:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.selectedDay.operations, operation => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: operation.id\n      }, [_createElementVNode(\"strong\", null, _toDisplayString(operation.description), 1 /* TEXT */), _cache[17] || (_cache[17] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, \"Ora: \" + _toDisplayString(new Date(operation.date).toLocaleTimeString()), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_16, _cache[19] || (_cache[19] = [_createElementVNode(\"p\", null, \"Nessuna attività pianificata per questa data.\", -1 /* HOISTED */)])))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti \"), _createElementVNode(\"div\", null, [_ctx.isDoctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = $event => _ctx.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString(_ctx.monthNames[_ctx.month]) + \" \" + _toDisplayString(_ctx.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = $event => _ctx.changeMonth(1))\n  }, \"›\")]), _createElementVNode(\"div\", _hoisted_20, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => _ctx.showDayDetails(day)\n    }, [_createElementVNode(\"div\", _hoisted_22, _toDisplayString(day.date), 1 /* TEXT */), day.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, _toDisplayString(day.radiographs.length) + \" \" + _toDisplayString(day.radiographs.length === 1 ? \"caricamento radiografia\" : \"caricamenti radiografie\"), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_21);\n  }), 128 /* KEYED_FRAGMENT */))])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: _ctx.beforeEnter,\n    onEnter: _ctx.enter,\n    onLeave: _ctx.leave\n  }, {\n    default: _withCtx(() => [_ctx.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString(_ctx.selectedDay.date) + \" \" + _toDisplayString(_ctx.monthNames[_ctx.month]) + \" \" + _toDisplayString(_ctx.year), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.patientName) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(radiograph.name), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n        onClick: $event => _ctx.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_25)]);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","style","color","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","_ctx","openScheduleModal","_createCommentVNode","showModal","_hoisted_2","_hoisted_3","for","type","$event","operationDate","id","min","minDate","_hoisted_4","operationTime","description","scheduleOperation","closeScheduleModal","isPatient","_hoisted_5","_hoisted_6","_hoisted_7","changeMonth","_toDisplayString","monthNames","month","year","_Fragment","_renderList","daysInMonth","day","date","showDayDetails","_hoisted_9","operationsCount","_hoisted_10","radiographs","length","_hoisted_11","_hoisted_8","_createVNode","_Transition","name","onBeforeEnter","beforeEnter","onEnter","enter","onLeave","leave","default","_withCtx","selectedDay","_hoisted_12","_hoisted_13","radiograph","enlargeRadiograph","url","_hoisted_14","operations","_hoisted_15","operation","Date","toLocaleTimeString","_hoisted_16","_","isDoctor","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_22","_hoisted_23","_hoisted_21","_hoisted_24","patientName","_createTextVNode","_hoisted_25"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n    <button @click=\"openScheduleModal\" class=\"btn btn-primary\">\n      Pianifica Operazione\n    </button>\n\n    <!-- Modale per inserire i dettagli dell'operazione -->\n    <div v-if=\"showModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h2>Pianifica una nuova operazione</h2>\n        <label for=\"operationDate\">Data dell'operazione:</label>\n        <input\n          type=\"date\"\n          v-model=\"operationDate\"\n          id=\"operationDate\"\n          :min=\"minDate\"\n        />\n\n        <label for=\"operationTime\">Ora dell'operazione:</label>\n        <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\n\n        <label for=\"description\">Descrizione:</label>\n        <textarea v-model=\"description\" id=\"description\"></textarea>\n\n        <button @click=\"scheduleOperation\" class=\"btn btn-success\">\n          Salva\n        </button>\n        <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\n          Annulla\n        </button>\n      </div>\n    </div>\n    <!-- Verifica se l'utente è un paziente o un dottore -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <div v-for=\"day in daysInMonth\" :key=\"day.date\" class=\"calendar-day\" @click=\"showDayDetails(day)\">\n          <div class=\"date\">{{ day.date }}</div>\n\n          <!-- Mostra il numero di operazioni programmate -->\n          <div v-if=\"day.operationsCount > 0\" class=\"operations-count\" :style=\"{ color: 'red' }\">\n            {{ day.operationsCount }} {{ day.operationsCount === 1 ? 'operazione' : 'operazioni' }}\n          </div>\n\n          <!-- Mostra il numero di radiografie caricate (già esistente) -->\n          <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n            {{ day.radiographs.length }}\n            {{ day.radiographs.length === 1 ? \"caricamento radiografia\" : \"caricamenti radiografie\" }}\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n\n          <!-- Radiografie -->\n          <div v-if=\"selectedDay.radiographs.length > 0\">\n            <h3>Radiografie caricate:</h3>\n            <ul>\n              <li\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <strong>{{ radiograph.name }}</strong\n                ><br />\n                <span>{{ radiograph.date }}</span\n                ><br />\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </li>\n            </ul>\n          </div>\n\n          <!-- Operazioni -->\n          <div v-if=\"selectedDay.operations.length > 0\">\n            <h3>Operazioni pianificate:</h3>\n            <ul>\n              <li\n                v-for=\"operation in selectedDay.operations\"\n                :key=\"operation.id\"\n              >\n                <strong>{{ operation.description }}</strong\n                ><br />\n                <span\n                  >Ora:\n                  {{ new Date(operation.date).toLocaleTimeString() }}</span\n                >\n              </li>\n            </ul>\n          </div>\n\n          <div v-else>\n            <p>Nessuna attività pianificata per questa data.</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n\n    <!-- Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti -->\n    <div v-else>\n      <div v-if=\"isDoctor\">\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"changeMonth(-1)\">&#8249;</button>\n            <span>{{ monthNames[month] }} {{ year }}</span>\n            <button @click=\"changeMonth(1)\">&#8250;</button>\n          </div>\n\n          <div class=\"calendar-grid\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"day.date\"\n              class=\"calendar-day\"\n              @click=\"showDayDetails(day)\"\n            >\n              <div class=\"date\">{{ day.date }}</div>\n              <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n                {{ day.radiographs.length }}\n                {{\n                  day.radiographs.length === 1\n                    ? \"caricamento radiografia\"\n                    : \"caricamenti radiografie\"\n                }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <div\n            v-for=\"radiograph in selectedDay.radiographs\"\n            :key=\"radiograph.name\"\n          >\n            <p>\n              <strong>{{ radiograph.patientName }}:</strong>\n              {{ radiograph.name }}\n            </p>\n            <button @click=\"enlargeRadiograph(radiograph.url)\">\n              Visualizza Immagine\n            </button>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      operations: [],\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      patientId: null, // ID del paziente\n      selectedPatient: null, // Paziente selezionato (loggato)\n      patients: [], // Pazienti associati al dottore\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n      this.loadOperations(); // Carica le operazioni del paziente loggato\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      // Crea un oggetto per tenere traccia delle operazioni per ogni giorno\n      const operationsPerDay = {};\n\n      if (this.isDoctor) {\n        // Se l'utente è un dottore, mostra tutte le operazioni assegnate ai pazienti\n        this.patients.forEach((patient) => {\n          if (patient.operations) {\n            patient.operations.forEach((operation) => {\n              const operationDate = new Date(operation.operationDate).toDateString();\n              if (!operationsPerDay[operationDate]) {\n                operationsPerDay[operationDate] = 0;\n              }\n              operationsPerDay[operationDate]++;\n            });\n          }\n        });\n      } else {\n        // Se l'utente è un paziente, mostra solo le operazioni del proprio account\n        if (this.selectedPatient && this.selectedPatient.operations) {\n          this.selectedPatient.operations.forEach((operation) => {\n            const operationDate = new Date(operation.operationDate).toDateString();\n            if (!operationsPerDay[operationDate]) {\n              operationsPerDay[operationDate] = 0;\n            }\n            operationsPerDay[operationDate]++;\n          });\n        }\n      }\n\n      // Popola i giorni del mese con il numero di operazioni\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i).toDateString();\n        const operationsOnDay = operationsPerDay[dayDate] || 0;\n\n        days.push({\n          date: i,\n          operationsCount: operationsOnDay,\n          radiographs: this.getRadiographsForDay(dayDate), // Funzione per ottenere le radiografie per il giorno\n        });\n      }\n\n      return days;\n    },\n  },\n\n\n  methods: {\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Verifica che tutti i campi siano compilati\n        if (!this.operationDate || !this.operationTime || !this.description) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        const doctorId = localStorage.getItem(\"doctorId\");\n        const patientId = this.selectedPatient?.userId || \"default_patient_id\"; // ID del paziente\n\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        const formattedDate = this.combineDateAndTime(this.operationDate, this.operationTime);\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId,\n            operationDate: formattedDate,\n            description: this.description,\n            createdAt: new Date().toISOString(),\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || \"Errore durante la pianificazione dell'operazione.\");\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        this.showActivityCalendar(); // Ricarica il calendario\n        this.closeScheduleModal(); // Chiudi la modale\n      } catch (error) {\n        console.error(\"Errore durante la pianificazione dell'operazione:\", error);\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n\n    // Modifica per caricare le radiografie di tutti i pazienti\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(/api/${doctorId}/patients);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie per ogni paziente\n          this.patients.forEach((patient) => {\n            this.loadRadiographs(patient.userId); // Carica le radiografie per ogni paziente\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    // Modifica per caricare le radiografie specifiche di un paziente\n    async loadRadiographs() {\n      try {\n        const response = await fetch(\n          `/api/patients/${this.patientId}/radiographs`\n        );\n        if (response.ok) {\n          const data = await response.json();\n          console.log(\"Radiografie caricate:\", data); // Log dei dati caricati\n          this.radiographs = data;\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.radiograph-count {\n  position: absolute;\n  bottom: 10px;\n  left: 5px;\n  font-size: 0.9em;\n  color: #007bff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 1.5em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 20px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1.5em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 400px;\n  text-align: center;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 10px;\n  text-align: left;\n}\n\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n}\n\n.btn {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}