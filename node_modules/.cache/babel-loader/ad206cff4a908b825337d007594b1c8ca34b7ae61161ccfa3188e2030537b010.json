{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"VerifyEmail\",\n  data() {\n    return {\n      verificationMessage: \"Verificando la tua email...\",\n      errorMessage: null,\n      isLoading: true,\n      isPasswordFieldVisible: false,\n      // Stato per mostrare il campo password\n      newPassword: \"\" // Valore della nuova password\n    };\n  },\n  async mounted() {\n    const uid = this.$route.params.uid; // Assicurati che l'UID sia presente nell'URL\n    try {\n      const response = await axios.get(`http://127.0.0.1:5000/verify-email/${uid}`);\n\n      // Imposta il messaggio di verifica basato sulla risposta del server\n      if (response.data.message === \"Email già verificata!\") {\n        this.verificationMessage = \"La tua email è già stata verificata!\";\n      } else if (response.data.message === \"Email verificata con successo!\") {\n        this.verificationMessage = \"Email verificata con successo!\";\n        this.isPasswordFieldVisible = true; // Mostra il campo password\n      }\n      console.log(\"Risposta server --> \" + response.data.message);\n    } catch (error) {\n      this.errorMessage = error.response?.data?.error || \"Errore durante la verifica dell'email.\";\n    } finally {\n      this.isLoading = false;\n    }\n  },\n  methods: {\n    async updatePassword() {\n      if (!this.newPassword) {\n        this.errorMessage = \"La password non può essere vuota.\";\n        return;\n      }\n      this.isLoading = true;\n      try {\n        const uid = this.$route.params.uid;\n        const response = await axios.post(\"http://127.0.0.1:5000/update-password\", {\n          uid,\n          newPassword: this.newPassword\n        });\n        this.verificationMessage = \"Password aggiornata con successo!\";\n        this.isPasswordFieldVisible = false;\n      } catch (error) {\n        this.errorMessage = error.response?.data?.error || \"Errore durante l'aggiornamento della password.\";\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    goToLogin() {\n      this.$router.push(\"/login\");\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","verificationMessage","errorMessage","isLoading","isPasswordFieldVisible","newPassword","mounted","uid","$route","params","response","get","message","console","log","error","methods","updatePassword","post","goToLogin","$router","push"],"sources":["C:\\Users\\Utente\\Desktop\\osteoarthritis-project\\frontend\\src\\components\\ResetPassword.vue"],"sourcesContent":["<template>\r\n    <div class=\"verify-email\">\r\n      <div class=\"container mt-5\">\r\n        <h2 class=\"mb-4\">{{ verificationMessage }}</h2>\r\n        <p v-if=\"errorMessage\">{{ errorMessage }}</p>\r\n  \r\n        <!-- Campo per inserire la nuova password -->\r\n        <div v-if=\"isPasswordFieldVisible\">\r\n          <label for=\"new-password\">Inserisci la nuova password:</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"new-password\"\r\n            class=\"form-control mt-3\"\r\n            v-model=\"newPassword\"\r\n            placeholder=\"Nuova password\"\r\n          />\r\n          <button\r\n            class=\"btn btn-primary mt-4\"\r\n            :disabled=\"isLoading\"\r\n            @click=\"updatePassword\"\r\n          >\r\n            Aggiorna Password\r\n          </button>\r\n        </div>\r\n  \r\n        <!-- Bottone per il login se non ci sono errori -->\r\n        <div class=\"btn-group mt-4\" v-if=\"!isLoading && !errorMessage && !isPasswordFieldVisible\">\r\n          <button class=\"btn btn-primary btn-next\" @click=\"goToLogin\">\r\n            Esegui il login\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from \"axios\";\r\n  \r\n  export default {\r\n    name: \"VerifyEmail\",\r\n    data() {\r\n      return {\r\n        verificationMessage: \"Verificando la tua email...\",\r\n        errorMessage: null,\r\n        isLoading: true,\r\n        isPasswordFieldVisible: false, // Stato per mostrare il campo password\r\n        newPassword: \"\", // Valore della nuova password\r\n      };\r\n    },\r\n    async mounted() {\r\n      const uid = this.$route.params.uid; // Assicurati che l'UID sia presente nell'URL\r\n      try {\r\n        const response = await axios.get(\r\n          `http://127.0.0.1:5000/verify-email/${uid}`\r\n        );\r\n  \r\n        // Imposta il messaggio di verifica basato sulla risposta del server\r\n        if (response.data.message === \"Email già verificata!\") {\r\n          this.verificationMessage = \"La tua email è già stata verificata!\";\r\n        } else if (response.data.message === \"Email verificata con successo!\") {\r\n          this.verificationMessage = \"Email verificata con successo!\";\r\n          this.isPasswordFieldVisible = true; // Mostra il campo password\r\n        }\r\n  \r\n        console.log(\"Risposta server --> \" + response.data.message);\r\n      } catch (error) {\r\n        this.errorMessage =\r\n          error.response?.data?.error || \"Errore durante la verifica dell'email.\";\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    methods: {\r\n      async updatePassword() {\r\n        if (!this.newPassword) {\r\n          this.errorMessage = \"La password non può essere vuota.\";\r\n          return;\r\n        }\r\n  \r\n        this.isLoading = true;\r\n        try {\r\n          const uid = this.$route.params.uid;\r\n          const response = await axios.post(\"http://127.0.0.1:5000/update-password\", {\r\n            uid,\r\n            newPassword: this.newPassword,\r\n          });\r\n  \r\n          this.verificationMessage = \"Password aggiornata con successo!\";\r\n          this.isPasswordFieldVisible = false;\r\n        } catch (error) {\r\n          this.errorMessage =\r\n            error.response?.data?.error || \"Errore durante l'aggiornamento della password.\";\r\n        } finally {\r\n          this.isLoading = false;\r\n        }\r\n      },\r\n      goToLogin() {\r\n        this.$router.push(\"/login\");\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .verify-email {\r\n    background: #ffffff; /* Sfondo bianco, simile alla pagina di login */\r\n    min-height: 100vh;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    box-shadow: 0 0px 0px rgba(0, 0, 0, 0); /* Rimuove ombre esterne */\r\n  }\r\n  \r\n  .container {\r\n    max-width: 80%;\r\n    padding: 40px;\r\n    border-radius: 15px;\r\n    background: #ffffff;\r\n    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1); /* Simile alla shadow del login */\r\n    margin-top: 100px;\r\n    height: auto;\r\n    text-align: center; /* Centra il testo */\r\n    flex-grow: 1; /* Permette al contenuto principale di occupare lo spazio rimanente */\r\n    margin-left: 20px; /* Margine sinistro per distanziare il contenuto dalla sidebar */\r\n  }\r\n  \r\n  h2 {\r\n    font-size: 18px; /* Uniforma il font size al login */\r\n    margin-bottom: 30px;\r\n  }\r\n  \r\n  p {\r\n    font-size: 14px;\r\n    color: #6c757d;\r\n  }\r\n  \r\n  .btn-group .btn {\r\n    width: 100%; /* Assicura che i bottoni occupino l'intera larghezza */\r\n    margin-top: 20px;\r\n    padding: 10px;\r\n  }\r\n  \r\n  .btn-primary {\r\n    background-color: #007bff;\r\n    color: white;\r\n    padding: 8px;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    width: 80%;\r\n    max-width: 300px;\r\n    min-width: 200px;\r\n    font-size: 13px;\r\n    transition: background-color 0.3s ease;\r\n    text-align: center;\r\n    display: inline-block;\r\n  }\r\n  \r\n  .btn-primary:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  \r\n  .sidebar {\r\n    top: 0;\r\n    width: 250px; /* Imposta la larghezza della sidebar */\r\n    height: 100vh; /* Imposta l'altezza della sidebar al 100% della viewport */\r\n    padding: 20px; /* Padding interno */\r\n    background: linear-gradient(180deg, #212529, #343a40);\r\n  }\r\n  \r\n  .sidebar .nav-link {\r\n    color: #cfd2d6;\r\n  }\r\n  \r\n  .sidebar .nav-link:hover {\r\n    background-color: #495057;\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  .nav-link {\r\n    padding: 10px 15px; /* Aggiunge padding ai link per migliorarne l'aspetto */\r\n  }\r\n  \r\n  @media (max-width: 767.98px) {\r\n    .navbar-brand {\r\n      font-size: 1.5rem;\r\n    }\r\n  \r\n    .sidebar {\r\n      display: none;\r\n    }\r\n  }\r\n  </style>\r\n  "],"mappings":"AAoCE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,mBAAmB,EAAE,6BAA6B;MAClDC,YAAY,EAAE,IAAI;MAClBC,SAAS,EAAE,IAAI;MACfC,sBAAsB,EAAE,KAAK;MAAE;MAC/BC,WAAW,EAAE,EAAE,CAAE;IACnB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAMC,GAAE,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,GAAG,EAAE;IACpC,IAAI;MACF,MAAMG,QAAO,GAAI,MAAMZ,KAAK,CAACa,GAAG,CAC9B,sCAAsCJ,GAAG,EAC3C,CAAC;;MAED;MACA,IAAIG,QAAQ,CAACV,IAAI,CAACY,OAAM,KAAM,uBAAuB,EAAE;QACrD,IAAI,CAACX,mBAAkB,GAAI,sCAAsC;MACnE,OAAO,IAAIS,QAAQ,CAACV,IAAI,CAACY,OAAM,KAAM,gCAAgC,EAAE;QACrE,IAAI,CAACX,mBAAkB,GAAI,gCAAgC;QAC3D,IAAI,CAACG,sBAAqB,GAAI,IAAI,EAAE;MACtC;MAEAS,OAAO,CAACC,GAAG,CAAC,sBAAqB,GAAIJ,QAAQ,CAACV,IAAI,CAACY,OAAO,CAAC;IAC7D,EAAE,OAAOG,KAAK,EAAE;MACd,IAAI,CAACb,YAAW,GACda,KAAK,CAACL,QAAQ,EAAEV,IAAI,EAAEe,KAAI,IAAK,wCAAwC;IAC3E,UAAU;MACR,IAAI,CAACZ,SAAQ,GAAI,KAAK;IACxB;EACF,CAAC;EACDa,OAAO,EAAE;IACP,MAAMC,cAAcA,CAAA,EAAG;MACrB,IAAI,CAAC,IAAI,CAACZ,WAAW,EAAE;QACrB,IAAI,CAACH,YAAW,GAAI,mCAAmC;QACvD;MACF;MAEA,IAAI,CAACC,SAAQ,GAAI,IAAI;MACrB,IAAI;QACF,MAAMI,GAAE,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,GAAG;QAClC,MAAMG,QAAO,GAAI,MAAMZ,KAAK,CAACoB,IAAI,CAAC,uCAAuC,EAAE;UACzEX,GAAG;UACHF,WAAW,EAAE,IAAI,CAACA;QACpB,CAAC,CAAC;QAEF,IAAI,CAACJ,mBAAkB,GAAI,mCAAmC;QAC9D,IAAI,CAACG,sBAAqB,GAAI,KAAK;MACrC,EAAE,OAAOW,KAAK,EAAE;QACd,IAAI,CAACb,YAAW,GACda,KAAK,CAACL,QAAQ,EAAEV,IAAI,EAAEe,KAAI,IAAK,gDAAgD;MACnF,UAAU;QACR,IAAI,CAACZ,SAAQ,GAAI,KAAK;MACxB;IACF,CAAC;IACDgB,SAASA,CAAA,EAAG;MACV,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;IAC7B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}