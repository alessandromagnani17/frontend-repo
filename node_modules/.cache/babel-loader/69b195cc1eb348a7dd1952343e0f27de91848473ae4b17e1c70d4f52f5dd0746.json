{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, vShow as _vShow, withDirectives as _withDirectives, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode } from \"vue\";\nimport _imports_0 from '@/assets/zoom.svg';\nimport _imports_1 from '@/assets/download.svg';\nimport _imports_2 from '@/assets/cross.svg';\nconst _hoisted_1 = {\n  class: \"radiograph-list\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0,\n  class: \"radiograph-preview\"\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = {\n  class: \"radiograph-controls\"\n};\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = [\"onClick\", \"disabled\"];\nconst _hoisted_9 = {\n  key: 1\n};\nconst _hoisted_10 = {\n  key: 2,\n  class: \"modal\"\n};\nconst _hoisted_11 = {\n  class: \"modal-content\"\n};\nconst _hoisted_12 = [\"src\"];\nconst _hoisted_13 = {\n  key: 3,\n  class: \"error-alert\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, \"Radiografie di \" + _toDisplayString($props.patientName), 1 /* TEXT */), $data.radiographs.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.radiographs, radiograph => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: radiograph.name,\n      class: \"radiograph-item\"\n    }, [_createElementVNode(\"div\", null, [_createTextVNode(_toDisplayString(radiograph.date) + \" - \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.toggleRadiograph(radiograph),\n      class: \"view-link\"\n    }, \" Visualizza \", 8 /* PROPS */, _hoisted_3)]), $data.selectedRadiograph === radiograph ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"div\", {\n      class: _normalizeClass([\"content-with-animation\", {\n        'slide-down': $data.isSlidingDown,\n        'slide-up': $data.isSlidingUp\n      }])\n    }, [_withDirectives(_createElementVNode(\"img\", {\n      src: radiograph.url,\n      alt: \"Radiografia\",\n      class: \"radiograph-image\",\n      crossorigin: \"anonymous\"\n    }, null, 8 /* PROPS */, _hoisted_5), [[_vShow, $data.isImageVisible]])], 2 /* CLASS */), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"button\", {\n      onClick: $event => $options.enlargeRadiograph(radiograph.url),\n      class: \"control-button\"\n    }, [...(_cache[2] || (_cache[2] = [_createElementVNode(\"img\", {\n      src: _imports_0,\n      alt: \"Zoom\",\n      class: \"icon\"\n    }, null, -1 /* HOISTED */)]))], 8 /* PROPS */, _hoisted_7), _createElementVNode(\"button\", {\n      onClick: $event => $options.downloadRadiograph(radiograph),\n      class: \"control-button\",\n      disabled: $data.isDownloading\n    }, [...(_cache[3] || (_cache[3] = [_createElementVNode(\"img\", {\n      src: _imports_1,\n      alt: \"Download\",\n      class: \"icon\"\n    }, null, -1 /* HOISTED */)]))], 8 /* PROPS */, _hoisted_8)])])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_9, \"Nessuna radiografia trovata per questo paziente.\")), $data.isModalOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"span\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.closeModal && $options.closeModal(...args)),\n    class: \"close-button\"\n  }, _cache[4] || (_cache[4] = [_createElementVNode(\"img\", {\n    src: _imports_2,\n    alt: \"Chiudi\",\n    class: \"close-icon\"\n  }, null, -1 /* HOISTED */)])), _createElementVNode(\"img\", {\n    src: $data.modalImageUrl,\n    alt: \"Immagine ingrandita\",\n    class: \"modal-image\",\n    crossorigin: \"anonymous\"\n  }, null, 8 /* PROPS */, _hoisted_12)])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Aggiungiamo un alert per gli errori \"), $data.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createTextVNode(_toDisplayString($data.errorMessage) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $data.errorMessage = ''),\n    class: \"close-error\"\n  }, \"×\")])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_imports_0","_imports_1","_imports_2","class","key","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$props","patientName","$data","radiographs","length","_hoisted_2","_Fragment","_renderList","radiograph","name","_createTextVNode","date","onClick","$event","$options","toggleRadiograph","_hoisted_3","selectedRadiograph","_hoisted_4","_normalizeClass","isSlidingDown","isSlidingUp","src","url","alt","crossorigin","_hoisted_5","isImageVisible","_hoisted_6","enlargeRadiograph","_hoisted_7","downloadRadiograph","disabled","isDownloading","_hoisted_8","_createCommentVNode","_hoisted_9","isModalOpen","_hoisted_10","_hoisted_11","_cache","args","closeModal","modalImageUrl","_hoisted_12","errorMessage","_hoisted_13"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/PatientRadiographs.vue"],"sourcesContent":["<template>\n  <div class=\"radiograph-list\">\n    <h2>Radiografie di {{ patientName }}</h2>\n    <ul v-if=\"radiographs.length\">\n      <li\n        v-for=\"radiograph in radiographs\"\n        :key=\"radiograph.name\"\n        class=\"radiograph-item\"\n      >\n        <div>\n          {{ radiograph.date }} -\n          <button @click=\"toggleRadiograph(radiograph)\" class=\"view-link\">\n            Visualizza\n          </button>\n        </div>\n\n        <div\n          v-if=\"selectedRadiograph === radiograph\"\n          class=\"radiograph-preview\"\n        >\n          <div\n            class=\"content-with-animation\"\n            :class=\"{ 'slide-down': isSlidingDown, 'slide-up': isSlidingUp }\"\n          >\n            <img\n              :src=\"radiograph.url\"\n              alt=\"Radiografia\"\n              class=\"radiograph-image\"\n              v-show=\"isImageVisible\"\n              crossorigin=\"anonymous\"\n            />\n          </div>\n          <div class=\"radiograph-controls\">\n            <button\n              @click=\"enlargeRadiograph(radiograph.url)\"\n              class=\"control-button\"\n            >\n              <img src=\"@/assets/zoom.svg\" alt=\"Zoom\" class=\"icon\" />\n            </button>\n            <button\n              @click=\"downloadRadiograph(radiograph)\"\n              class=\"control-button\"\n              :disabled=\"isDownloading\"\n            >\n              <img src=\"@/assets/download.svg\" alt=\"Download\" class=\"icon\" />\n            </button>\n          </div>\n        </div>\n      </li>\n    </ul>\n    <p v-else>Nessuna radiografia trovata per questo paziente.</p>\n\n    <div v-if=\"isModalOpen\" class=\"modal\">\n      <div class=\"modal-content\">\n        <span @click=\"closeModal\" class=\"close-button\">\n          <img src=\"@/assets/cross.svg\" alt=\"Chiudi\" class=\"close-icon\" />\n        </span>\n        <img\n          :src=\"modalImageUrl\"\n          alt=\"Immagine ingrandita\"\n          class=\"modal-image\"\n          crossorigin=\"anonymous\"\n        />\n      </div>\n    </div>\n\n    <!-- Aggiungiamo un alert per gli errori -->\n    <div v-if=\"errorMessage\" class=\"error-alert\">\n      {{ errorMessage }}\n      <button @click=\"errorMessage = ''\" class=\"close-error\">×</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"PatientRadiographs\",\n  props: {\n    patientId: {\n      type: String,\n      required: true,\n    },\n    patientName: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      radiographs: [],\n      selectedRadiograph: null,\n      isModalOpen: false,\n      modalImageUrl: \"\",\n      isImageVisible: false,\n      isSlidingDown: false,\n      isSlidingUp: false,\n      isDownloading: false,\n      errorMessage: \"\",\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch(\n        `/api/patients/${this.patientId}/radiographs`,\n        {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (response.ok) {\n        this.radiographs = await response.json();\n      } else {\n        this.errorMessage = \"Errore nel recupero delle radiografie.\";\n      }\n    } catch (error) {\n      this.errorMessage = \"Errore di connessione al server.\";\n      console.error(\"Errore:\", error);\n    }\n  },\n  methods: {\n    toggleRadiograph(radiograph) {\n      if (this.selectedRadiograph === radiograph) {\n        this.isSlidingDown = false;\n        this.isSlidingUp = true;\n        setTimeout(() => {\n          this.isImageVisible = false;\n          this.selectedRadiograph = null;\n          this.isSlidingUp = false;\n        }, 300);\n      } else {\n        this.selectedRadiograph = radiograph;\n        this.isSlidingUp = false;\n        this.isSlidingDown = true;\n        this.isImageVisible = true;\n      }\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    closeModal() {\n      this.isModalOpen = false;\n    },\n\n    async downloadRadiograph(radiograph) {\n      if (this.isDownloading) return;\n\n      this.isDownloading = true;\n      this.errorMessage = \"\";\n\n      try {\n        // Facciamo la richiesta attraverso il nostro backend\n        const response = await fetch(\n          `/api/radiographs/download/${radiograph.id}`,\n          {\n            method: \"GET\",\n            headers: {\n              Accept: \"application/json\",\n            },\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error(\"Errore nel download del file\");\n        }\n\n        const blob = await response.blob();\n        const fileName =\n          radiograph.name ||\n          `radiografia_${\n            new Date(radiograph.date).toISOString().split(\"T\")[0]\n          }.jpg`;\n\n        // Crea un URL oggetto per il blob\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.download = fileName;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n      } catch (error) {\n        this.errorMessage = \"Errore durante il download. Riprova più tardi.\";\n        console.error(\"Errore durante il download:\", error);\n      } finally {\n        this.isDownloading = false;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.error-alert {\n  position: fixed;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #f44336;\n  color: white;\n  padding: 16px;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n  font-size: 14px;\n}\n\n.close-error {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 16px;\n  cursor: pointer;\n  padding: 0 4px;\n}\n\n.control-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.radiograph-list {\n  max-width: 800px;\n  margin: 20px auto;\n}\n\nh2 {\n  font-size: 18px;\n  color: #333;\n  margin-bottom: 15px;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli.radiograph-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #ccc;\n  font-size: 12px;\n  color: #444;\n  display: flex;\n  flex-direction: column;\n}\n\n.view-link {\n  color: #007bff;\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-weight: bold;\n  transition: color 0.5s ease;\n  padding: 0;\n  margin: 0;\n}\n\n.view-link:hover {\n  color: #0056b3;\n}\n\n.radiograph-preview {\n  margin-top: 10px;\n  align-self: center;\n}\n\n.radiograph-image {\n  width: 100%;\n  display: block;\n  margin-bottom: 10px;\n}\n\n.content-with-animation {\n  overflow: hidden;\n  max-height: 0;\n  transition: max-height 0.5s ease-out, transform 0.5s ease-out;\n  transform: translateY(-20px);\n}\n\n.content-with-animation.slide-down {\n  max-height: 400px;\n  transform: translateY(0);\n}\n\n.content-with-animation.slide-up {\n  max-height: 0;\n  transform: translateY(-20px);\n}\n\n.radiograph-controls {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.control-button {\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  margin-left: 10px;\n}\n\n.icon {\n  width: 20px;\n  height: 20px;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  position: relative;\n  max-width: 80%;\n  max-height: 80%;\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.modal-image {\n  width: 80%;\n  max-height: 80vh;\n  display: block;\n  margin: 0 auto;\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 16px;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 12px;\n  height: 12px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}