{"ast":null,"code":"import axios from \"axios\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nconst API_URL = \"http://127.0.0.1:5000\"; // URL backend locale\n//const API_URL = \"http://34.121.167.35:5000\";\n\n// Funzione per caricare una radiografia\nexport const uploadRadiograph = async (patientId, file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"patientId\", patientId); // Aggiunto l'ID paziente ai formData\n  console.log(\"PatientID: \" + patientId);\n  try {\n    const response = await axios.post(`${API_URL}/api/patients/${patientId}/radiographs`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    // Aggiungi maggiori dettagli all'errore\n    console.error(\"Errore durante il caricamento:\", error);\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per ottenere i pazienti associati a un dottore specifico\nexport const getPatientsFromDoctor = async doctorId => {\n  try {\n    const response = await axios.get(`${API_URL}/api/${doctorId}/patients`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore:\", error);\n    return [];\n  }\n};\n\n// Funzione per ottenere le radiografie di un paziente\nexport const getRadiographs = async patientId => {\n  try {\n    const response = await axios.get(`${API_URL}/api/patients/${patientId}/radiographs`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\nexport const loadRadiographiesForPatient = async patientId => {\n  try {\n    const response = await axios.get(`${API_URL}/get_radiographs/${patientId}`);\n    return response.data;\n  } catch (error) {\n    console.log(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\n// Funzione per ottenere le informazioni della radiografia da un file info.txt\nexport const getRadiographyInformation = async (uid, idx) => {\n  try {\n    const response = await axios.get(`${API_URL}/get_radiographs_info/${uid}/${idx}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\n// Funzione per verificare l'email\nexport const verifyEmail = async uid => {\n  try {\n    const response = await axios.get(`${API_URL}/verify-email/${uid}`);\n    return response;\n  } catch (error) {\n    console.error(error.response?.data?.error || \"Errore durante la verifica dell'email.\");\n    throw error;\n  }\n};\n\n// Funzione per controllare se l'email è stata verificata\nexport const checkEmailVerification = async email => {\n  try {\n    await axios.post(`${API_URL}/check-email-verification`, {\n      email: email\n    });\n    return \"\";\n  } catch (error) {\n    if (error.response) {\n      switch (error.response.status) {\n        case 403:\n          return \"La tua email non è stata verificata. Verifica la tua email prima di accedere.\";\n        case 404:\n          return \"Utente non trovato. Controlla le credenziali.\";\n        case 400:\n          return \"Inserire email.\";\n        default:\n          return error.response.data.error || \"Errore nella verifica dell'email.\";\n      }\n    } else {\n      return \"Errore di connessione. Riprova più tardi.\";\n    }\n  }\n};\n\n// Funzione per decrementare i tentativi di login\nexport const decrementLoginAttempts = async email => {\n  try {\n    const response = await axios.post(`${API_URL}/decrement-attempts`, {\n      email: email\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore durante il decremento dei tentativi:\", error);\n    throw error;\n  }\n};\n\n// Funzione per il login\nexport const signInUser = async (auth, user, psw) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, user, psw);\n    const userData = userCredential.user;\n    return userData; // Return user object\n  } catch (error) {\n    console.error(\"Errore durante il login:\", error);\n    //handleError(error);\n    throw error;\n    //return null; // Return null if failed\n  }\n};\n\n// Funzione per il login con token\nexport const login = async token => {\n  const response = await axios.post(`${API_URL}/login`, {\n    idToken: token\n  });\n  return response;\n};\nexport const getAttemptsLeft = async email => {\n  const response = await axios.post(`${API_URL}/get-attempts-left`, {\n    email: email\n  });\n  return response.data.loginAttemptsLeft;\n};\nexport const sendPasswordResetEmail = async email => {\n  await axios.post(`${API_URL}/send-reset-email`, {\n    email: email\n  });\n};\nexport const resetPassword = async (uid, password) => {\n  await axios.post(`${API_URL}/reset-password`, {\n    uid: uid,\n    password: password\n  });\n};\n\n// Funzione per ottenere i dottori\nexport const fetchDoctors = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/api/doctors`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero dei dottori:\", error);\n    throw error;\n  }\n};\n\n// Funzione per ottenere i pazienti\nexport const fetchPatients = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/api/patients`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero dei pazienti:\", error);\n    throw error;\n  }\n};\n\n// Funzione per inviare una notifica\nexport const fetchNotifications = async data => {\n  try {\n    const response = await fetch(`${API_URL}/api/notifications`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: data\n    });\n    return response;\n  } catch (error) {\n    console.error(\"Errore nell'invio della notifica:\", error);\n    alert(\"Errore nell'invio della notifica.\");\n    throw error;\n  }\n};\n\n// Funzione per salvare un'operazione\nexport const saveOperations = async data => {\n  try {\n    const response = await fetch(`${API_URL}/api/operations`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: data\n    });\n    return response;\n  } catch (error) {\n    console.error(\"Errore durante la pianificazione dell'operazione:\", error);\n    alert(\"Errore: \" + error.message);\n    throw error;\n  }\n};\n\n// Funzione per caricare tutti i dati dei pazienti\nexport const loadPatientsData = async doctorId => {\n  try {\n    const response = await fetch(`${API_URL}/api/${doctorId}/patients`);\n    return response;\n  } catch (error) {\n    console.error(\"Errore nel caricamento dei pazienti:\", error);\n    throw error;\n  }\n};\n\n// Funzione per caricare operazioni e radiografie\nexport const loadOperationsAndRadiographs = async patientId => {\n  try {\n    const [operationsResponse, radiographsResponse, patientResponse] = await Promise.all([fetch(`${API_URL}/api/patients/${patientId}/operations`), fetch(`${API_URL}/api/patients/${patientId}/radiographs`), fetch(`${API_URL}/api/get_user/${patientId}`) // Nuova chiamata per recuperare i dettagli del paziente\n    ]);\n    return [operationsResponse, radiographsResponse, patientResponse];\n  } catch (error) {\n    console.error(\"Errore di connessione al server:\", error);\n    throw error;\n  }\n};\n\n// Funzione per recuperare le notifiche\nexport const getNotifications = async userId => {\n  try {\n    const response = await fetch(`${API_URL}/api/notifications?patientId=${userId}`);\n    return response;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle notifiche:\", error);\n    throw error;\n  }\n};\n\n// Funzione per segnare la notifiche come lette\nexport const patchNotifications = async (notificationId, isRead) => {\n  try {\n    const response = await fetch(`${API_URL}/api/notifications/${notificationId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: isRead\n    });\n    return response;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle notifiche:\", error);\n    throw error;\n  }\n};\n\n// Funzione per registrare un utente\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nella registrazione:\", error);\n    throw error;\n  }\n};\nexport async function predictImage(formData) {\n  try {\n    const response = await axios.post(`${API_URL}/predict`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error predicting image:\", error);\n    throw error;\n  }\n}\nexport async function uploadToDataset(formData) {\n  try {\n    await axios.post(`${API_URL}/upload-to-dataset`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    console.log(\"File caricato con successo nella cartella dataset.\");\n  } catch (error) {\n    console.error(\"Errore durante il caricamento del file:\", error);\n    throw error;\n  }\n}\n\n// Funzione per ottenere i dati dell'utente\nexport const getUserData = async userId => {\n  try {\n    const response = await axios.get(`${API_URL}/get_user/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero dei dati utente:\", error);\n    throw error;\n  }\n};\n\n// Funzione per aggiornare i dati dell'utente\nexport const updateUserData = async (userId, field, value) => {\n  try {\n    const payload = {\n      userId,\n      [field]: value\n    };\n    const response = await axios.patch(`${API_URL}/update_user`, payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore durante l'aggiornamento dei dati utente:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","signInWithEmailAndPassword","API_URL","uploadRadiograph","patientId","file","formData","FormData","append","console","log","response","post","headers","data","error","Error","message","getPatientsFromDoctor","doctorId","get","getRadiographs","loadRadiographiesForPatient","getRadiographyInformation","uid","idx","verifyEmail","checkEmailVerification","email","status","decrementLoginAttempts","signInUser","auth","user","psw","userCredential","userData","login","token","idToken","getAttemptsLeft","loginAttemptsLeft","sendPasswordResetEmail","resetPassword","password","fetchDoctors","fetchPatients","fetchNotifications","fetch","method","body","alert","saveOperations","loadPatientsData","loadOperationsAndRadiographs","operationsResponse","radiographsResponse","patientResponse","Promise","all","getNotifications","userId","patchNotifications","notificationId","isRead","registerUser","predictImage","uploadToDataset","getUserData","updateUserData","field","value","payload","patch"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/services/api-service.js"],"sourcesContent":["import axios from \"axios\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\n\nconst API_URL = \"http://127.0.0.1:5000\"; // URL backend locale\n//const API_URL = \"http://34.121.167.35:5000\";\n\n// Funzione per caricare una radiografia\nexport const uploadRadiograph = async (patientId, file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"patientId\", patientId); // Aggiunto l'ID paziente ai formData\n  console.log(\"PatientID: \" + patientId);\n\n  try {\n    const response = await axios.post(\n      `${API_URL}/api/patients/${patientId}/radiographs`,\n      formData,\n      {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    // Aggiungi maggiori dettagli all'errore\n    console.error(\"Errore durante il caricamento:\", error);\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per ottenere i pazienti associati a un dottore specifico\nexport const getPatientsFromDoctor = async (doctorId) => {\n  try {\n    const response = await axios.get(`${API_URL}/api/${doctorId}/patients`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore:\", error);\n    return [];\n  }\n};\n\n// Funzione per ottenere le radiografie di un paziente\nexport const getRadiographs = async (patientId) => {\n  try {\n    const response = await axios.get(\n      `${API_URL}/api/patients/${patientId}/radiographs`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\nexport const loadRadiographiesForPatient = async (patientId) => {\n  try {\n    const response = await axios.get(`${API_URL}/get_radiographs/${patientId}`);\n    return response.data;\n  } catch (error) {\n    console.log(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\n// Funzione per ottenere le informazioni della radiografia da un file info.txt\nexport const getRadiographyInformation = async (uid, idx) => {\n  try {\n    const response = await axios.get(\n      `${API_URL}/get_radiographs_info/${uid}/${idx}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\n// Funzione per verificare l'email\nexport const verifyEmail = async (uid) => {\n  try {\n    const response = await axios.get(`${API_URL}/verify-email/${uid}`);\n    return response;\n  } catch (error) {\n    console.error(\n      error.response?.data?.error || \"Errore durante la verifica dell'email.\"\n    );\n    throw error;\n  }\n};\n\n// Funzione per controllare se l'email è stata verificata\nexport const checkEmailVerification = async (email) => {\n  try {\n    await axios.post(`${API_URL}/check-email-verification`, {\n      email: email,\n    });\n    return \"\";\n  } catch (error) {\n    if (error.response) {\n      switch (error.response.status) {\n        case 403:\n          return \"La tua email non è stata verificata. Verifica la tua email prima di accedere.\";\n        case 404:\n          return \"Utente non trovato. Controlla le credenziali.\";\n        case 400:\n          return \"Inserire email.\";\n        default:\n          return (\n            error.response.data.error || \"Errore nella verifica dell'email.\"\n          );\n      }\n    } else {\n      return \"Errore di connessione. Riprova più tardi.\";\n    }\n  }\n};\n\n// Funzione per decrementare i tentativi di login\nexport const decrementLoginAttempts = async (email) => {\n  try {\n    const response = await axios.post(`${API_URL}/decrement-attempts`, {\n      email: email,\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore durante il decremento dei tentativi:\", error);\n    throw error;\n  }\n};\n\n// Funzione per il login\nexport const signInUser = async (auth, user, psw) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, user, psw);\n\n    const userData = userCredential.user;\n\n    return userData; // Return user object\n  } catch (error) {\n    console.error(\"Errore durante il login:\", error);\n    //handleError(error);\n    throw error;\n    //return null; // Return null if failed\n  }\n};\n\n// Funzione per il login con token\nexport const login = async (token) => {\n  const response = await axios.post(`${API_URL}/login`, {\n    idToken: token,\n  });\n  return response;\n};\n\nexport const getAttemptsLeft = async (email) => {\n  const response = await axios.post(`${API_URL}/get-attempts-left`, {\n    email: email,\n  });\n  return response.data.loginAttemptsLeft;\n};\n\nexport const sendPasswordResetEmail = async (email) => {\n  await axios.post(`${API_URL}/send-reset-email`, {\n    email: email,\n  });\n};\n\nexport const resetPassword = async (uid, password) => {\n  await axios.post(`${API_URL}/reset-password`, {\n    uid: uid,\n    password: password,\n  });\n};\n\n// Funzione per ottenere i dottori\nexport const fetchDoctors = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/api/doctors`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero dei dottori:\", error);\n    throw error;\n  }\n};\n\n// Funzione per ottenere i pazienti\nexport const fetchPatients = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/api/patients`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero dei pazienti:\", error);\n    throw error;\n  }\n};\n\n// Funzione per inviare una notifica\nexport const fetchNotifications = async (data) => {\n  try {\n    const response = await fetch(`${API_URL}/api/notifications`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: data,\n    });\n    return response;\n  } catch (error) {\n    console.error(\"Errore nell'invio della notifica:\", error);\n    alert(\"Errore nell'invio della notifica.\");\n    throw error;\n  }\n};\n\n// Funzione per salvare un'operazione\nexport const saveOperations = async (data) => {\n  try {\n    const response = await fetch(`${API_URL}/api/operations`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: data,\n    });\n    return response;\n  } catch (error) {\n    console.error(\"Errore durante la pianificazione dell'operazione:\", error);\n    alert(\"Errore: \" + error.message);\n    throw error;\n  }\n};\n\n// Funzione per caricare tutti i dati dei pazienti\nexport const loadPatientsData = async (doctorId) => {\n  try {\n    const response = await fetch(`${API_URL}/api/${doctorId}/patients`);\n    return response;\n  } catch (error) {\n    console.error(\"Errore nel caricamento dei pazienti:\", error);\n    throw error;\n  }\n};\n\n// Funzione per caricare operazioni e radiografie\nexport const loadOperationsAndRadiographs = async (patientId) => {\n  try {\n    const [operationsResponse, radiographsResponse, patientResponse] =\n      await Promise.all([\n        fetch(`${API_URL}/api/patients/${patientId}/operations`),\n        fetch(`${API_URL}/api/patients/${patientId}/radiographs`),\n        fetch(`${API_URL}/api/get_user/${patientId}`), // Nuova chiamata per recuperare i dettagli del paziente\n      ]);\n    return [operationsResponse, radiographsResponse, patientResponse];\n  } catch (error) {\n    console.error(\"Errore di connessione al server:\", error);\n    throw error;\n  }\n};\n\n// Funzione per recuperare le notifiche\nexport const getNotifications = async (userId) => {\n  try {\n    const response = await fetch(\n      `${API_URL}/api/notifications?patientId=${userId}`\n    );\n    return response;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle notifiche:\", error);\n    throw error;\n  }\n};\n\n// Funzione per segnare la notifiche come lette\nexport const patchNotifications = async (notificationId, isRead) => {\n  try {\n    const response = await fetch(\n      `${API_URL}/api/notifications/${notificationId}`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: isRead,\n      }\n    );\n    return response;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle notifiche:\", error);\n    throw error;\n  }\n};\n\n// Funzione per registrare un utente\nexport const registerUser = async (userData) => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nella registrazione:\", error);\n    throw error;\n  }\n};\n\nexport async function predictImage(formData) {\n  try {\n    const response = await axios.post(`${API_URL}/predict`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error predicting image:\", error);\n    throw error;\n  }\n}\n\nexport async function uploadToDataset(formData) {\n  try {\n    await axios.post(`${API_URL}/upload-to-dataset`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    console.log(\"File caricato con successo nella cartella dataset.\");\n  } catch (error) {\n    console.error(\"Errore durante il caricamento del file:\", error);\n    throw error;\n  }\n}\n\n// Funzione per ottenere i dati dell'utente\nexport const getUserData = async (userId) => {\n  try {\n    const response = await axios.get(`${API_URL}/get_user/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero dei dati utente:\", error);\n    throw error;\n  }\n};\n\n// Funzione per aggiornare i dati dell'utente\nexport const updateUserData = async (userId, field, value) => {\n  try {\n    const payload = { userId, [field]: value };\n    const response = await axios.patch(`${API_URL}/update_user`, payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore durante l'aggiornamento dei dati utente:\", error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}