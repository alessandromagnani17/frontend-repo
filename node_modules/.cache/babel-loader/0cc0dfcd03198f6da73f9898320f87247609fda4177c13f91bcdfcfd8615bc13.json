{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container mt-4\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"badge badge-warning\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  class: \"list-group\"\n};\nconst _hoisted_5 = {\n  class: \"badge badge-success float-right\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, [_cache[0] || (_cache[0] = _createTextVNode(\" Notifiche \")), $data.unreadCount > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, _toDisplayString($data.unreadCount), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), $data.notifications.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.notifications, (notification, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: \"list-group-item\"\n    }, [_createTextVNode(_toDisplayString(notification.message) + \" - ID: \" + _toDisplayString(notification.id) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_5, _toDisplayString(notification.date), 1 /* TEXT */), _createCommentVNode(\" Mostra il pulsante solo se isRead è false \"), !notification.isRead ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: $event => $options.markAsRead(notification.id),\n      class: \"btn btn-sm btn-primary\"\n    }, \" Segna come letta \", 8 /* PROPS */, _hoisted_6)) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_7, _cache[1] || (_cache[1] = [_createElementVNode(\"p\", null, \"Non ci sono notifiche.\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createTextVNode","$data","unreadCount","_hoisted_2","_toDisplayString","_createCommentVNode","notifications","length","_hoisted_3","_hoisted_4","_Fragment","_renderList","notification","index","message","id","_hoisted_5","date","isRead","onClick","$event","$options","markAsRead","_hoisted_6","_hoisted_7","_cache"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/views/UserNotifications.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-4\">\n    <h2>\n      Notifiche\n      <span v-if=\"unreadCount > 0\" class=\"badge badge-warning\">{{ unreadCount }}</span>\n    </h2>\n    <div v-if=\"notifications.length\">\n      <ul class=\"list-group\">\n        <li\n          v-for=\"(notification, index) in notifications\"\n          :key=\"index\"\n          class=\"list-group-item\"\n        >\n          {{ notification.message }} - ID: {{ notification.id }}\n          <span class=\"badge badge-success float-right\">{{ notification.date }}</span>\n          <!-- Mostra il pulsante solo se isRead è false -->\n          <button\n            v-if=\"!notification.isRead\"\n            @click=\"markAsRead(notification.id)\"\n            class=\"btn btn-sm btn-primary\"\n          >\n            Segna come letta\n          </button>\n        </li>\n      </ul>\n    </div>\n    <div v-else>\n      <p>Non ci sono notifiche.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"UserNotifications\",\n  data() {\n    return {\n      notifications: [], // Lista delle notifiche\n      unreadCount: 0, // Conteggio delle notifiche non lette\n    };\n  },\n\n  mounted() {\n    this.fetchNotifications();\n  },\n\n  methods: {\n    async fetchNotifications() {\n      try {\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\n        const userId = userData.userId;\n\n        console.log(\"Fetching notifications...\");\n        console.log(\"Selected patient ID:\", userId);\n\n        const response = await fetch(`/api/notifications?patientId=${userId}`);\n        if (!response.ok) {\n          throw new Error(\"Errore nel recupero delle notifiche\");\n        }\n\n        const data = await response.json();\n        console.log(\"Notifications raw data:\", data);\n\n        if (Array.isArray(data.notifications)) {\n          this.notifications = data.notifications;\n        } else {\n          throw new Error(\"Formato delle notifiche inatteso\");\n        }\n\n        console.log(\"Parsed notifications:\", this.notifications);\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel recupero delle notifiche:\", error);\n      }\n    },\n\n    updateUnreadCount() {\n      this.unreadCount = this.notifications.filter(\n        (notification) => !notification.isRead\n      ).length;\n    },\n\n    async markAsRead(notificationId) {\n      console.log(\"markAsRead called with notificationId:\", notificationId);\n\n      if (!notificationId) {\n        console.error(\"No notification ID provided\");\n        return;\n      }\n\n      try {\n        const response = await fetch(`/api/notifications/${notificationId}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ isRead: true }), // Cambia 'read' in 'isRead' se necessario\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Errore nel segnare la notifica come letta.\");\n        }\n\n        this.notifications = this.notifications.map((notification) =>\n          notification.id === notificationId\n            ? { ...notification, isRead: true }\n            : notification\n        );\n\n        console.log(\"Notification marked as read:\", notificationId);\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel segnare la notifica come letta.\", error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.list-group-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.float-right {\n  margin-left: 10px;\n}\n\n.unread-notification {\n  font-weight: bold;\n  background-color: #f8f9fa;\n}\n\n.badge-warning {\n  background-color: #ffc107;\n  color: #fff;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAD7BC,GAAA;EAImCD,KAAK,EAAC;;;EAJzCC,GAAA;AAAA;;EAOUD,KAAK,EAAC;AAAY;;EAOZA,KAAK,EAAC;AAAiC;mBAdvD;;EAAAC,GAAA;AAAA;;uBACEC,mBAAA,CA4BM,OA5BNC,UA4BM,GA3BJC,mBAAA,CAGK,a,0BALTC,gBAAA,CAEQ,aAEF,IAAYC,KAAA,CAAAC,WAAW,Q,cAAvBL,mBAAA,CAAiF,QAAjFM,UAAiF,EAAAC,gBAAA,CAArBH,KAAA,CAAAC,WAAW,oBAJ7EG,mBAAA,e,GAMeJ,KAAA,CAAAK,aAAa,CAACC,MAAM,I,cAA/BV,mBAAA,CAmBM,OAzBVW,UAAA,GAOMT,mBAAA,CAiBK,MAjBLU,UAiBK,I,kBAhBHZ,mBAAA,CAeKa,SAAA,QAvBbC,WAAA,CAS0CV,KAAA,CAAAK,aAAa,EATvD,CASkBM,YAAY,EAAEC,KAAK;yBAD7BhB,mBAAA,CAeK;MAbFD,GAAG,EAAEiB,KAAK;MACXlB,KAAK,EAAC;QAXhBK,gBAAA,CAAAI,gBAAA,CAaaQ,YAAY,CAACE,OAAO,IAAG,SAAO,GAAAV,gBAAA,CAAGQ,YAAY,CAACG,EAAE,IAAG,GACtD,iBAAAhB,mBAAA,CAA4E,QAA5EiB,UAA4E,EAAAZ,gBAAA,CAA3BQ,YAAY,CAACK,IAAI,kBAClEZ,mBAAA,+CAAkD,E,CAEzCO,YAAY,CAACM,MAAM,I,cAD5BrB,mBAAA,CAMS;MAtBnBD,GAAA;MAkBauB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU,CAACV,YAAY,CAACG,EAAE;MAClCpB,KAAK,EAAC;OACP,oBAED,iBAtBV4B,UAAA,KAAAlB,mBAAA,e;uDA0BIR,mBAAA,CAEM,OA5BV2B,UAAA,EAAAC,MAAA,QAAAA,MAAA,OA2BM1B,mBAAA,CAA6B,WAA1B,wBAAsB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}