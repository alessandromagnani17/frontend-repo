{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText } from \"vue\";\nconst _hoisted_1 = {\n  class: \"activity-calendar\"\n};\nconst _hoisted_2 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  class: \"calendar\"\n};\nconst _hoisted_5 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_6 = {\n  class: \"calendar-day-names\"\n};\nconst _hoisted_7 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"date\"\n};\nconst _hoisted_10 = {\n  class: \"icon-row operations\"\n};\nconst _hoisted_11 = [\"src\"];\nconst _hoisted_12 = {\n  class: \"icon-row radiographs\"\n};\nconst _hoisted_13 = [\"src\"];\nconst _hoisted_14 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_15 = {\n  key: 0\n};\nconst _hoisted_16 = {\n  key: 1\n};\nconst _hoisted_17 = {\n  key: 2\n};\nconst _hoisted_18 = [\"onClick\"];\nconst _hoisted_19 = {\n  key: 3\n};\nconst _hoisted_20 = {\n  key: 0\n};\nconst _hoisted_21 = {\n  key: 0,\n  class: \"modal\"\n};\nconst _hoisted_22 = {\n  class: \"modal-content\"\n};\nconst _hoisted_23 = [\"value\"];\nconst _hoisted_24 = [\"min\"];\nconst _hoisted_25 = {\n  class: \"calendar\"\n};\nconst _hoisted_26 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_27 = {\n  class: \"calendar-day-names\"\n};\nconst _hoisted_28 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_29 = [\"onClick\"];\nconst _hoisted_30 = {\n  class: \"date\"\n};\nconst _hoisted_31 = {\n  class: \"icon-row operations\"\n};\nconst _hoisted_32 = [\"src\"];\nconst _hoisted_33 = {\n  class: \"icon-row radiographs\"\n};\nconst _hoisted_34 = [\"src\"];\nconst _hoisted_35 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_36 = {\n  key: 0\n};\nconst _hoisted_37 = {\n  key: 1\n};\nconst _hoisted_38 = {\n  key: 2\n};\nconst _hoisted_39 = [\"onClick\"];\nconst _hoisted_40 = {\n  key: 3\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[33] || (_cache[33] = _createElementVNode(\"h1\", {\n    class: \"calendar\"\n  }, \"Calendario Attività\", -1 /* HOISTED */)), _createCommentVNode(\" Verifica se l'utente è un paziente o un dottore \"), $data.isPatient ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createCommentVNode(\" Riga per i nomi dei giorni \"), _createElementVNode(\"div\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.dayNames, dayName => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: dayName,\n      class: \"day-name\"\n    }, _toDisplayString(dayName), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: `${day.year}-${day.month}-${day.date}`,\n      class: _normalizeClass(['calendar-day', {\n        disabled: day.isDisabled,\n        today: `${day.year}-${String(day.month).padStart(2, '0')}-${String(day.date).padStart(2, '0')}` === $data.minDate\n      }]),\n      onClick: $event => !day.isDisabled && $options.showDayDetails(day)\n    }, [_createCommentVNode(\" Data \"), _createElementVNode(\"div\", _hoisted_9, _toDisplayString(day.date), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(day.operations.length, n => {\n      return _openBlock(), _createElementBlock(\"img\", {\n        key: 'operation-' + n + '-' + day.date,\n        src: $data.operationIcon,\n        alt: \"Operazione\",\n        class: \"icon\"\n      }, null, 8 /* PROPS */, _hoisted_11);\n    }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_12, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(day.radiographs.length, n => {\n      return _openBlock(), _createElementBlock(\"img\", {\n        key: 'radiograph-' + n + '-' + day.date,\n        src: $data.radiographIcon,\n        alt: \"Radiografia\",\n        class: \"icon\"\n      }, null, 8 /* PROPS */, _hoisted_13);\n    }), 128 /* KEYED_FRAGMENT */))])], 10 /* CLASS, PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), $data.selectedDay.operations.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_createElementVNode(\"p\", null, [_cache[11] || (_cache[11] = _createElementVNode(\"strong\", null, \"Paziente:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.selectedPatient.name) + \" \" + _toDisplayString($data.selectedPatient.family_name), 1 /* TEXT */)]), _cache[15] || (_cache[15] = _createElementVNode(\"h3\", null, \"Operazioni pianificate:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.operations, operation => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: operation.id\n      }, [_createElementVNode(\"strong\", null, _toDisplayString(operation.type), 1 /* TEXT */), _cache[12] || (_cache[12] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString(operation.date), 1 /* TEXT */), _cache[13] || (_cache[13] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString(operation.description), 1 /* TEXT */), _cache[14] || (_cache[14] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */))]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_16, _cache[16] || (_cache[16] = [_createElementVNode(\"p\", null, \"Nessuna operazione pianificata per questa data.\", -1 /* HOISTED */)]))), $data.selectedDay.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [_cache[19] || (_cache[19] = _createElementVNode(\"h3\", null, \"Radiografie caricate:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.name), 1 /* TEXT */), _cache[17] || (_cache[17] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString(radiograph.date), 1 /* TEXT */), _cache[18] || (_cache[18] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_18)]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_19, _cache[20] || (_cache[20] = [_createElementVNode(\"p\", null, \"Nessuna radiografia caricata per questa data.\", -1 /* HOISTED */)])))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti \"), _createElementVNode(\"div\", null, [$data.isDoctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.openScheduleModal && $options.openScheduleModal(...args)),\n    class: \"btn btn-primary\"\n  }, \" Pianifica Operazione \"), _createCommentVNode(\" Modale per inserire i dettagli dell'operazione \"), $data.showModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [_createElementVNode(\"div\", _hoisted_22, [_cache[22] || (_cache[22] = _createElementVNode(\"h2\", null, \"Pianifica una nuova operazione\", -1 /* HOISTED */)), _createCommentVNode(\" Menu a tendina per selezionare un paziente \"), _cache[23] || (_cache[23] = _createElementVNode(\"label\", {\n    for: \"patientSelect\"\n  }, \"Seleziona un paziente:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.selectedPatientId = $event),\n    id: \"patientSelect\",\n    class: \"form-select\"\n  }, [_cache[21] || (_cache[21] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"Seleziona un paziente\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.patients, patient => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: patient.userId,\n      value: patient.userId\n    }, _toDisplayString(patient.name) + \" \" + _toDisplayString(patient.family_name), 9 /* TEXT, PROPS */, _hoisted_23);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedPatientId]]), _cache[24] || (_cache[24] = _createElementVNode(\"label\", {\n    for: \"operationDate\"\n  }, \"Data dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.operationDate = $event),\n    id: \"operationDate\",\n    min: $data.minDate\n  }, null, 8 /* PROPS */, _hoisted_24), [[_vModelText, $data.operationDate]]), _cache[25] || (_cache[25] = _createElementVNode(\"label\", {\n    for: \"operationTime\"\n  }, \"Ora dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"time\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.operationTime = $event),\n    id: \"operationTime\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.operationTime]]), _cache[26] || (_cache[26] = _createElementVNode(\"label\", {\n    for: \"description\"\n  }, \"Descrizione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.description = $event),\n    id: \"description\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.description]]), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.scheduleOperation && $options.scheduleOperation(...args)),\n    class: \"btn btn-success\"\n  }, \" Salva \"), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => $options.closeScheduleModal && $options.closeScheduleModal(...args)),\n    class: \"btn btn-secondary\"\n  }, \" Annulla \")])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_25, [_createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createCommentVNode(\" Riga per i nomi dei giorni \"), _createElementVNode(\"div\", _hoisted_27, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.dayNames, dayName => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: dayName,\n      class: \"day-name\"\n    }, _toDisplayString(dayName), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_28, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: `${day.year}-${day.month}-${day.date}`,\n      class: _normalizeClass(['calendar-day', {\n        disabled: day.isDisabled,\n        today: `${day.year}-${String(day.month).padStart(2, '0')}-${String(day.date).padStart(2, '0')}` === $data.minDate\n      }]),\n      onClick: $event => !day.isDisabled && $options.showDayDetails(day)\n    }, [_createCommentVNode(\" Data \"), _createElementVNode(\"div\", _hoisted_30, _toDisplayString(day.date), 1 /* TEXT */), _createCommentVNode(\" Icone Operazioni \"), _createElementVNode(\"div\", _hoisted_31, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(day.operations.length, n => {\n      return _openBlock(), _createElementBlock(\"img\", {\n        key: 'operation-' + n + '-' + day.date,\n        src: $data.operationIcon,\n        alt: \"Operazione\",\n        class: \"icon\"\n      }, null, 8 /* PROPS */, _hoisted_32);\n    }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_33, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(day.radiographs.length, n => {\n      return _openBlock(), _createElementBlock(\"img\", {\n        key: 'radiograph-' + n + '-' + day.date,\n        src: $data.radiographIcon,\n        alt: \"Radiografia\",\n        class: \"icon\"\n      }, null, 8 /* PROPS */, _hoisted_34);\n    }), 128 /* KEYED_FRAGMENT */))])], 10 /* CLASS, PROPS */, _hoisted_29);\n  }), 128 /* KEYED_FRAGMENT */))])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_35, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createCommentVNode(\" Operazioni \"), $data.selectedDay.operations.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_36, [_cache[29] || (_cache[29] = _createElementVNode(\"h1\", {\n      class: \"calendar\"\n    }, \"Operazioni pianificate:\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.operations, operation => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: operation.id\n      }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, _toDisplayString(operation.patientName) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(operation.name), 1 /* TEXT */)]), _createElementVNode(\"span\", null, _toDisplayString(operation.operationDate), 1 /* TEXT */), _cache[27] || (_cache[27] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString(operation.description), 1 /* TEXT */), _cache[28] || (_cache[28] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */))]);\n    }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_37, _cache[30] || (_cache[30] = [_createElementVNode(\"p\", null, \"Nessuna operazione pianificata per questa data.\", -1 /* HOISTED */)]))), _createCommentVNode(\" Radiografie \"), $data.selectedDay.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_38, [_cache[31] || (_cache[31] = _createElementVNode(\"h1\", {\n      class: \"calendar\"\n    }, \"Radiografie caricate:\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.patientName) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(radiograph.name), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_39)]);\n    }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_40, _cache[32] || (_cache[32] = [_createElementVNode(\"p\", null, \"Nessuna radiografia caricata in questa data.\", -1 /* HOISTED */)])))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","$data","isPatient","_hoisted_3","_hoisted_4","_hoisted_5","onClick","_cache","$event","$options","changeMonth","_toDisplayString","monthNames","month","year","_hoisted_6","_Fragment","_renderList","dayNames","dayName","_hoisted_7","daysInMonth","day","date","_normalizeClass","isDisabled","String","padStart","minDate","showDayDetails","_hoisted_9","_hoisted_10","operations","length","n","src","operationIcon","alt","_hoisted_11","_hoisted_12","radiographs","radiographIcon","_hoisted_13","_hoisted_8","_createVNode","_Transition","name","onBeforeEnter","beforeEnter","onEnter","enter","onLeave","leave","default","_withCtx","selectedDay","_hoisted_14","_hoisted_15","_createTextVNode","selectedPatient","family_name","operation","id","type","description","_hoisted_16","_hoisted_17","radiograph","enlargeRadiograph","url","_hoisted_18","_hoisted_19","_","isDoctor","_hoisted_20","args","openScheduleModal","showModal","_hoisted_21","_hoisted_22","for","selectedPatientId","value","disabled","patients","patient","userId","_hoisted_23","operationDate","min","_hoisted_24","operationTime","scheduleOperation","closeScheduleModal","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_29","_hoisted_35","_hoisted_36","patientName","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"activity-calendar\">\n    <div class=\"calendar-container\">\n      <h1 class=\"calendar\">Calendario Attività</h1>\n\n      <!-- Verifica se l'utente è un paziente o un dottore -->\n      <div v-if=\"isPatient\">\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"changeMonth(-1)\">&#8249;</button>\n            <span>{{ monthNames[month] }} {{ year }}</span>\n            <button @click=\"changeMonth(1)\">&#8250;</button>\n          </div>\n\n          <!-- Riga per i nomi dei giorni -->\n          <div class=\"calendar-day-names\">\n            <div v-for=\"dayName in dayNames\" :key=\"dayName\" class=\"day-name\">\n              {{ dayName }}\n            </div>\n          </div>\n\n          <div class=\"calendar-grid\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"`${day.year}-${day.month}-${day.date}`\"\n              :class=\"[\n                'calendar-day',\n                {\n                  disabled: day.isDisabled,\n                  today:\n                    `${day.year}-${String(day.month).padStart(2, '0')}-${String(\n                      day.date\n                    ).padStart(2, '0')}` === minDate,\n                },\n              ]\"\n              @click=\"!day.isDisabled && showDayDetails(day)\"\n            >\n              <!-- Data -->\n              <div class=\"date\">{{ day.date }}</div>\n\n              <div class=\"icon-row operations\">\n                <img\n                  v-for=\"n in day.operations.length\"\n                  :key=\"'operation-' + n + '-' + day.date\"\n                  :src=\"operationIcon\"\n                  alt=\"Operazione\"\n                  class=\"icon\"\n                />\n              </div>\n\n              <div class=\"icon-row radiographs\">\n                <img\n                  v-for=\"n in day.radiographs.length\"\n                  :key=\"'radiograph-' + n + '-' + day.date\"\n                  :src=\"radiographIcon\"\n                  alt=\"Radiografia\"\n                  class=\"icon\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Dettagli del giorno selezionato con animazione -->\n        <transition\n          name=\"fade\"\n          @before-enter=\"beforeEnter\"\n          @enter=\"enter\"\n          @leave=\"leave\"\n        >\n          <div v-if=\"selectedDay\" class=\"day-details\">\n            <h2>\n              Dettagli del Giorno: {{ selectedDay.date }}\n              {{ monthNames[month] }}\n              {{ year }}\n            </h2>\n            <div v-if=\"selectedDay.operations.length > 0\">\n              <p>\n                <strong>Paziente:</strong> {{ selectedPatient.name }}\n                {{ selectedPatient.family_name }}\n              </p>\n              <h3>Operazioni pianificate:</h3>\n              <ul>\n                <li\n                  v-for=\"operation in selectedDay.operations\"\n                  :key=\"operation.id\"\n                >\n                  <strong>{{ operation.type }}</strong\n                  ><br />\n                  <span>{{ operation.date }}</span\n                  ><br />\n                  <span>{{ operation.description }}</span\n                  ><br />\n                </li>\n              </ul>\n            </div>\n            <div v-else>\n              <p>Nessuna operazione pianificata per questa data.</p>\n            </div>\n            <div v-if=\"selectedDay.radiographs.length > 0\">\n              <h3>Radiografie caricate:</h3>\n              <ul>\n                <li\n                  v-for=\"radiograph in selectedDay.radiographs\"\n                  :key=\"radiograph.name\"\n                >\n                  <strong>{{ radiograph.name }}</strong\n                  ><br />\n                  <span>{{ radiograph.date }}</span\n                  ><br />\n                  <button @click=\"enlargeRadiograph(radiograph.url)\">\n                    Visualizza Immagine\n                  </button>\n                </li>\n              </ul>\n            </div>\n            <div v-else>\n              <p>Nessuna radiografia caricata per questa data.</p>\n            </div>\n          </div>\n        </transition>\n      </div>\n\n      <!-- Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti -->\n      <div v-else>\n        <div v-if=\"isDoctor\">\n          <button @click=\"openScheduleModal\" class=\"btn btn-primary\">\n            Pianifica Operazione\n          </button>\n\n          <!-- Modale per inserire i dettagli dell'operazione -->\n          <div v-if=\"showModal\" class=\"modal\">\n            <div class=\"modal-content\">\n              <h2>Pianifica una nuova operazione</h2>\n              <!-- Menu a tendina per selezionare un paziente -->\n              <label for=\"patientSelect\">Seleziona un paziente:</label>\n              <select\n                v-model=\"selectedPatientId\"\n                id=\"patientSelect\"\n                class=\"form-select\"\n              >\n                <option value=\"\" disabled>Seleziona un paziente</option>\n                <option\n                  v-for=\"patient in patients\"\n                  :key=\"patient.userId\"\n                  :value=\"patient.userId\"\n                >\n                  {{ patient.name }} {{ patient.family_name }}\n                </option>\n              </select>\n\n              <label for=\"operationDate\">Data dell'operazione:</label>\n              <input\n                type=\"date\"\n                v-model=\"operationDate\"\n                id=\"operationDate\"\n                :min=\"minDate\"\n              />\n\n              <label for=\"operationTime\">Ora dell'operazione:</label>\n              <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\n\n              <label for=\"description\">Descrizione:</label>\n              <textarea v-model=\"description\" id=\"description\"></textarea>\n\n              <button @click=\"scheduleOperation\" class=\"btn btn-success\">\n                Salva\n              </button>\n              <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\n                Annulla\n              </button>\n            </div>\n          </div>\n          <div class=\"calendar\">\n            <div class=\"calendar-header\">\n              <button @click=\"changeMonth(-1)\">&#8249;</button>\n              <span>{{ monthNames[month] }} {{ year }}</span>\n              <button @click=\"changeMonth(1)\">&#8250;</button>\n            </div>\n\n            <!-- Riga per i nomi dei giorni -->\n            <div class=\"calendar-day-names\">\n              <div v-for=\"dayName in dayNames\" :key=\"dayName\" class=\"day-name\">\n                {{ dayName }}\n              </div>\n            </div>\n\n            <div class=\"calendar-grid\">\n              <div\n                v-for=\"day in daysInMonth\"\n                :key=\"`${day.year}-${day.month}-${day.date}`\"\n                :class=\"[\n                  'calendar-day',\n                  {\n                    disabled: day.isDisabled,\n                    today:\n                      `${day.year}-${String(day.month).padStart(\n                        2,\n                        '0'\n                      )}-${String(day.date).padStart(2, '0')}` === minDate,\n                  },\n                ]\"\n                @click=\"!day.isDisabled && showDayDetails(day)\"\n              >\n                <!-- Data -->\n                <div class=\"date\">{{ day.date }}</div>\n\n                <!-- Icone Operazioni -->\n                <div class=\"icon-row operations\">\n                  <img\n                    v-for=\"n in day.operations.length\"\n                    :key=\"'operation-' + n + '-' + day.date\"\n                    :src=\"operationIcon\"\n                    alt=\"Operazione\"\n                    class=\"icon\"\n                  />\n                </div>\n\n                <div class=\"icon-row radiographs\">\n                  <img\n                    v-for=\"n in day.radiographs.length\"\n                    :key=\"'radiograph-' + n + '-' + day.date\"\n                    :src=\"radiographIcon\"\n                    alt=\"Radiografia\"\n                    class=\"icon\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Dettagli del giorno selezionato con animazione -->\n        <transition\n          name=\"fade\"\n          @before-enter=\"beforeEnter\"\n          @enter=\"enter\"\n          @leave=\"leave\"\n        >\n          <div v-if=\"selectedDay\" class=\"day-details\">\n            <h2>\n              Dettagli del Giorno: {{ selectedDay.date }}\n              {{ monthNames[month] }}\n              {{ year }}\n            </h2>\n            <!-- Operazioni -->\n            <div v-if=\"selectedDay.operations.length > 0\">\n              <h1 class=\"calendar\">Operazioni pianificate:</h1>\n              <div\n                v-for=\"operation in selectedDay.operations\"\n                :key=\"operation.id\"\n              >\n                <p>\n                  <strong>{{ operation.patientName }}:</strong>\n                  {{ operation.name }}\n                </p>\n                <span>{{ operation.operationDate }}</span\n                ><br />\n                <span>{{ operation.description }}</span\n                ><br />\n              </div>\n            </div>\n            <div v-else>\n              <p>Nessuna operazione pianificata per questa data.</p>\n            </div>\n            <!-- Radiografie -->\n            <div v-if=\"selectedDay.radiographs.length > 0\">\n              <h1 class=\"calendar\">Radiografie caricate:</h1>\n\n              <div\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <p>\n                  <strong>{{ radiograph.patientName }}:</strong>\n                  {{ radiograph.name }}\n                </p>\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </div>\n            </div>\n            <div v-else>\n              <p>Nessuna radiografia caricata in questa data.</p>\n            </div>\n          </div>\n        </transition>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      operations: [],\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      dayNames: [\"LUN\", \"MAR\", \"MER\", \"GIO\", \"VEN\", \"SAB\", \"DOM\"],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      selectedPatient: null, // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [], // Pazienti associati al dottore\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\"),\n    };\n  },\n  mounted() {\n    this.checkUserRole(); // Verifica il ruolo dell'utente\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\n      if (userData && userData.userId) {\n        const userId = userData.userId; // Recupera lo userId\n        console.log(\"User ID recuperato:\", userId);\n        this.loadPatientData(userId); // Carica operazioni e radiografie per il paziente\n      } else {\n        console.error(\"User ID non trovato in userData.\");\n      }\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n      const firstDayOfMonth = new Date(this.year, this.month, 1);\n      const startDayOfWeek = firstDayOfMonth.getDay(); // Giorno della settimana (0 = Domenica, 1 = Lunedì, ecc.)\n\n      // Calcola quanti giorni del mese precedente devono essere inclusi\n      const daysFromPrevMonth = (startDayOfWeek + 6) % 7; // Se il mese inizia di lunedì, vogliamo 0 giorni precedenti\n      const prevMonthLastDay = new Date(this.year, this.month, 0).getDate();\n\n      // Radiografie e operazioni per ogni giorno\n      const radiographsPerDay = {};\n      const operationsPerDay = {};\n\n      // Se l'utente è un medico\n      if (this.isDoctor) {\n        this.patients.forEach((patient) => {\n          if (patient.radiographs) {\n            patient.radiographs.forEach((radiograph) => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n\n          if (patient.operations) {\n            patient.operations.forEach((operation) => {\n              const operationDate = this.parseISODate(operation.operationDate);\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}`,\n                });\n              }\n            });\n          }\n        });\n      } else {\n        // Se l'utente è un paziente\n        const radiographsPerDay = {};\n        const operationsPerDay = {};\n\n        if (this.radiographs && this.radiographs.length > 0) {\n          this.radiographs.forEach((radiograph) => {\n            const radiographDate = new Date(radiograph.date).toDateString(); // Data della radiografia\n            if (!radiographsPerDay[radiographDate]) {\n              radiographsPerDay[radiographDate] = []; // Inizializza se non esiste\n            }\n            radiographsPerDay[radiographDate].push(radiograph); // Aggiungi radiografia alla data\n          });\n        }\n\n        if (this.operations && this.operations.length > 0) {\n          this.operations.forEach((operation) => {\n            const operationDate = this.parseISODate(operation.operationDate); // Data dell'operazione\n            if (operationDate !== \"Invalid Date\") {\n              if (!operationsPerDay[operationDate]) {\n                operationsPerDay[operationDate] = []; // Inizializza se non esiste\n              }\n              operationsPerDay[operationDate].push(operation); // Aggiungi operazione alla data\n            }\n          });\n        }\n\n        console.log(\"radiographsPerDay: \", radiographsPerDay);\n        console.log(\"operationsPerDay: \", operationsPerDay);\n      }\n\n      // Aggiungi i giorni del mese precedente\n      for (let i = daysFromPrevMonth; i > 0; i--) {\n        const date = new Date(\n          this.year,\n          this.month - 1,\n          prevMonthLastDay - i + 1\n        );\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: date.getDate(),\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth(), // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true, // Per i giorni del mese precedente\n        });\n      }\n\n      // Aggiungi i giorni del mese corrente\n      for (let i = 1; i <= totalDays; i++) {\n        const date = new Date(this.year, this.month, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: false, // Per i giorni del mese corrente\n        });\n      }\n\n      // Calcola quanti giorni del mese successivo devono essere inclusi\n      const remainingDays = 42 - days.length; // Un calendario completo ha 6 settimane = 42 giorni\n      for (let i = 1; i <= remainingDays; i++) {\n        const date = new Date(this.year, this.month + 1, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true, // Per i giorni del mese successivo\n        });\n      }\n\n      return days;\n    },\n  },\n\n  methods: {\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        console.log(\"Ruolo utente: Paziente\");\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (\n          !this.selectedPatientId ||\n          !this.operationDate ||\n          !this.operationTime ||\n          !this.description\n        ) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(\n          this.operationDate,\n          this.operationTime\n        );\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate, // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString(), // Timestamp di creazione\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\n          );\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\n          \"Errore durante la pianificazione dell'operazione:\",\n          error\n        );\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(\n          `DEBUG: Errore nella conversione della data ISO \"${isoString}\":`,\n          error\n        );\n        return \"Invalid Date\";\n      }\n    },\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n\n    // Modifica per caricare i pazienti (solo per i medici)\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie e le operazioni per ogni paziente\n          this.patients.forEach((patient) => {\n            this.loadPatientData(patient.userId); // Carica i dati per ogni paziente\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    // Funzione generica per caricare le operazioni e le radiografie\n    async loadPatientData(patientId) {\n      try {\n        // Carica le operazioni\n        const operationsResponse = await fetch(\n          `/api/patients/${patientId}/operations`\n        );\n        if (operationsResponse.ok) {\n          const operationsData = await operationsResponse.json();\n          this.handleLoadedData(\"operations\", patientId, operationsData);\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n\n        // Carica le radiografie\n        const radiographsResponse = await fetch(\n          `/api/patients/${patientId}/radiographs`\n        );\n        if (radiographsResponse.ok) {\n          const radiographsData = await radiographsResponse.json();\n          this.handleLoadedData(\"radiographs\", patientId, radiographsData);\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    // Funzione per gestire i dati caricati (operazioni o radiografie)\n    handleLoadedData(type, patientId, data) {\n      // Se l'utente è un medico, aggiorna la lista dei pazienti\n      if (this.isDoctor) {\n        const patient = this.patients.find((p) => p.userId === patientId);\n        if (patient) {\n          patient[type] = data; // Aggiungi le operazioni o radiografie al paziente\n          console.log(\n            `${\n              type.charAt(0).toUpperCase() + type.slice(1)\n            } aggiunti al paziente:`,\n            patient[type]\n          );\n        }\n      } else {\n        // Se l'utente è un paziente, aggiorna direttamente il proprio profilo\n        this[type] = data; // Aggiungi le operazioni o radiografie al profilo del paziente\n        console.log(\n          `${\n            type.charAt(0).toUpperCase() + type.slice(1)\n          } aggiunti al profilo del paziente:`,\n          this[type]\n        );\n      }\n    },\n\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.calendar-calendar {\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  position: relative;\n}\n\n.calendar-container {\n  max-width: 100%;\n  padding: 40px;\n  border-radius: 10px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n}\n\nh1.calendar {\n  font-size: 18px; /* Stessa dimensione del testo di \"Elenco Pazienti\" */\n  font-family: inherit; /* Assicura che usi lo stesso font ereditato dal contesto */\n  font-weight: normal; /* Mantenere il peso del font uguale */\n  margin-bottom: 20px; /* Margine inferiore uguale per allineamento */\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 70px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n/* Giorni disabilitati (mese precedente e successivo) */\n.calendar-day.disabled {\n  opacity: 0.5;\n  color: #ccc; /* Testo grigio chiaro */\n  pointer-events: none; /* Non cliccabili */\n  background-color: #f9f9f9; /* Sfondo leggermente diverso, opzionale */\n}\n\n/* Puoi anche aggiungere un bordo per evidenziare meglio i giorni */\n.calendar-day.disabled:hover {\n  border: 1px dashed #ddd; /* Aggiunge un bordo hover sui giorni disabilitati */\n}\n\n.calendar-day.today {\n  border: 2px solid #fc2424db; /* Bordo rosso per il giorno corrente */\n  border-radius: 5px; /* Bordo arrotondato (opzionale) */\n}\n\n.calendar-day-names {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  background-color: #f0f0f0;\n  padding: 10px 0;\n  font-weight: bold;\n  color: #555;\n  text-align: center;\n  border-bottom: 1px solid #ddd;\n}\n\n.day-name {\n  text-transform: uppercase;\n  font-size: 0.9em;\n}\n\n.date {\n  font-size: 1em;\n}\n\n.activity-icons {\n  display: flex;\n  flex-direction: column; /* Cambia la direzione per impilare le righe */\n  align-items: center;\n  gap: 10px; /* Spazio tra righe */\n  margin-top: 5px;\n}\n\n.icon-row {\n  display: flex;\n  justify-content: center;\n  gap: 2px; /* Spazio tra le icone nella stessa riga */\n}\n\n.operations {\n  min-height: 7px;\n  margin-bottom: 3px; /* Aggiunge margine tra operazioni e radiografie */\n}\n\n.icon {\n  width: 7px;\n  height: 7px;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 0.7em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 50px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 0.7em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 400px;\n  text-align: center;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 10px;\n  text-align: left;\n}\n\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n}\n\n.btn {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}