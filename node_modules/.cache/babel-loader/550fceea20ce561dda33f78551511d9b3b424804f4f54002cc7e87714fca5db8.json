{"ast":null,"code":"import axios from \"axios\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nconst API_URL = \"http://127.0.0.1:5000\"; // URL backend locale\n//const API_URL = \"http://34.122.99.160:5000\";\n\n// Funzione per il login\nexport const loginUser = async loginData => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, loginData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per caricare una radiografia\nexport const uploadRadiograph = async (patientId, file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"patientId\", patientId); // Aggiunto l'ID paziente ai formData\n  console.log(\"PatientID: \" + patientId);\n  try {\n    const response = await axios.post(`${API_URL}/api/patients/${patientId}/radiographs`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    // Aggiungi maggiori dettagli all'errore\n    console.error(\"Errore durante il caricamento:\", error);\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per ottenere i pazienti associati a un dottore specifico\nexport const getPatientsFromDoctor = async doctorId => {\n  try {\n    const response = await axios.get(`${API_URL}/api/${doctorId}/patients`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore:\", error);\n    return [];\n  }\n};\n\n// Funzione per ottenere le radiografie di un paziente\nexport const getRadiographs = async patientId => {\n  try {\n    const response = await axios.get(`${API_URL}/api/patients/${patientId}/radiographs`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\nexport const loadRadiographiesForPatient = async patientId => {\n  try {\n    const response = await axios.get(`${API_URL}/get_radiographs/${patientId}`);\n    return response.data;\n  } catch (error) {\n    console.log(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\n// Funzione per ottenere le informazioni della radiografia da un file info.txt\nexport const getRadiographyInformation = async (uid, idx) => {\n  try {\n    const response = await axios.get(`${API_URL}/get_radiographs_info/${uid}/${idx}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\n// Funzione per verificare l'email\nexport const verifyEmail = async uid => {\n  try {\n    const response = await axios.get(`${API_URL}/verify-email/${uid}`);\n    return response;\n  } catch (error) {\n    console.error(error.response?.data?.error || \"Errore durante la verifica dell'email.\");\n    throw error;\n  }\n};\n\n// Funzione per controllare se l'email è stata verificata\nexport const checkEmailVerification = async email => {\n  try {\n    await axios.post(`${API_URL}/check-email-verification`, {\n      email: email\n    });\n    return \"\";\n  } catch (error) {\n    if (error.response) {\n      switch (error.response.status) {\n        case 403:\n          return \"La tua email non è stata verificata. Verifica la tua email prima di accedere.\";\n        case 404:\n          return \"Utente non trovato. Controlla le credenziali.\";\n        case 400:\n          return \"Inserire email.\";\n        default:\n          return error.response.data.error || \"Errore nella verifica dell'email.\";\n      }\n    } else {\n      return \"Errore di connessione. Riprova più tardi.\";\n    }\n  }\n};\n\n// Funzione per decrementare i tentativi di login\nexport const decrementLoginAttempts = async email => {\n  try {\n    const response = await axios.post(`${API_URL}/decrement-attempts`, {\n      email: email\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore durante il decremento dei tentativi:\", error);\n    throw error;\n  }\n};\n\n// Funzione per il login\nexport const signInUser = async (auth, user, psw) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, user, psw);\n    const userData = userCredential.user;\n    return userData; // Return user object\n  } catch (error) {\n    console.error(\"Errore durante il login:\", error);\n    //handleError(error);\n    throw error;\n    //return null; // Return null if failed\n  }\n};\n\n// Funzione per il login con token\nexport const login = async token => {\n  const response = await axios.post(`${API_URL}/login`, {\n    idToken: token\n  });\n  return response;\n};\nexport const getAttemptsLeft = async email => {\n  const response = await axios.post(`${API_URL}/get-attempts-left`, {\n    email: email\n  });\n  return response.data.loginAttemptsLeft;\n};\nexport const sendPasswordResetEmail = async email => {\n  await axios.post(`${API_URL}/send-reset-email`, {\n    email: email\n  });\n};\nexport const resetPassword = async (uid, password) => {\n  await axios.post(`${API_URL}/reset-password`, {\n    uid: uid,\n    password: password\n  });\n};\n\n// Funzione per ottenere i dottori\nexport const fetchDoctors = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/api/doctors`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero dei dottori:\", error);\n    throw error;\n  }\n};\n\n// Funzione per ottenere i pazienti\nexport const fetchPatients = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/api/patients`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero dei pazienti:\", error);\n    throw error;\n  }\n};\n\n// Funzione per inviare una notifica\nexport const fetchNotifications = async data => {\n  try {\n    const response = await fetch(\"/api/notifications\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: data\n    });\n    return response;\n  } catch (error) {\n    console.error(\"Errore nell'invio della notifica:\", error);\n    alert(\"Errore nell'invio della notifica.\");\n    throw error;\n  }\n};\n\n// Funzione per salvare un'operazione\nexport const saveOperations = async data => {\n  try {\n    const response = await fetch(\"/api/operations\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: data\n    });\n    return response;\n  } catch (error) {\n    console.error(\"Errore durante la pianificazione dell'operazione:\", error);\n    alert(\"Errore: \" + error.message);\n    throw error;\n  }\n};\n\n// Funzione per caricare tutti i dati dei pazienti\nexport const loadPatientsData = async doctorId => {\n  try {\n    const response = await fetch(`/api/${doctorId}/patients`);\n    return response;\n  } catch (error) {\n    console.error(\"Errore nel caricamento dei pazienti:\", error);\n    throw error;\n  }\n};\n\n// Funzione per caricare operazioni e radiografie\nexport const loadOperationsAndRadiographs = async patientId => {\n  try {\n    const [operationsResponse, radiographsResponse, patientResponse] = await Promise.all([fetch(`/api/patients/${patientId}/operations`), fetch(`/api/patients/${patientId}/radiographs`), fetch(`/api/get_user/${patientId}`) // Nuova chiamata per recuperare i dettagli del paziente\n    ]);\n    return [operationsResponse, radiographsResponse, patientResponse];\n  } catch (error) {\n    console.error(\"Errore di connessione al server:\", error);\n    throw error;\n  }\n};\n\n// Funzione per recuperare le notifiche\nexport const getNotifications = async userId => {\n  try {\n    const response = await fetch(`/api/notifications?patientId=${userId}`);\n    return response;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle notifiche:\", error);\n    throw error;\n  }\n};\n\n// Funzione per segnare la notifiche come lette\nexport const patchNotifications = async (notificationId, isRead) => {\n  try {\n    const response = await fetch(`/api/notifications/${notificationId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: isRead\n    });\n    return response;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle notifiche:\", error);\n    throw error;\n  }\n};\n\n// Funzione per registrare un utente\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nella registrazione:\", error);\n    throw error;\n  }\n};\nexport async function predictImage(formData) {\n  try {\n    const response = await axios.post(`${API_URL}/predict`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error predicting image:\", error);\n    throw error;\n  }\n}\nexport async function uploadToDataset(formData) {\n  try {\n    await axios.post(`${API_URL}/upload-to-dataset`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    console.log(\"File caricato con successo nella cartella dataset.\");\n  } catch (error) {\n    console.error(\"Errore durante il caricamento del file:\", error);\n    throw error;\n  }\n}\n\n// Funzione per ottenere i dati dell'utente\nexport const getUserData = async userId => {\n  try {\n    const response = await axios.get(`${API_URL}/get_user/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero dei dati utente:\", error);\n    throw error;\n  }\n};\n\n// Funzione per aggiornare i dati dell'utente\nexport const updateUserData = async (userId, field, value) => {\n  try {\n    const payload = {\n      userId,\n      [field]: value\n    };\n    const response = await axios.patch(`${API_URL}/update_user`, payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore durante l'aggiornamento dei dati utente:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","signInWithEmailAndPassword","API_URL","loginUser","loginData","response","post","data","error","Error","message","uploadRadiograph","patientId","file","formData","FormData","append","console","log","headers","getPatientsFromDoctor","doctorId","get","getRadiographs","loadRadiographiesForPatient","getRadiographyInformation","uid","idx","verifyEmail","checkEmailVerification","email","status","decrementLoginAttempts","signInUser","auth","user","psw","userCredential","userData","login","token","idToken","getAttemptsLeft","loginAttemptsLeft","sendPasswordResetEmail","resetPassword","password","fetchDoctors","fetchPatients","fetchNotifications","fetch","method","body","alert","saveOperations","loadPatientsData","loadOperationsAndRadiographs","operationsResponse","radiographsResponse","patientResponse","Promise","all","getNotifications","userId","patchNotifications","notificationId","isRead","registerUser","predictImage","uploadToDataset","getUserData","updateUserData","field","value","payload","patch"],"sources":["C:/Users/Utente/Desktop/osteoarthritis-project/frontend/src/services/api-service.js"],"sourcesContent":["import axios from \"axios\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\n\nconst API_URL = \"http://127.0.0.1:5000\"; // URL backend locale\n//const API_URL = \"http://34.122.99.160:5000\";\n\n// Funzione per il login\nexport const loginUser = async (loginData) => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, loginData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per caricare una radiografia\nexport const uploadRadiograph = async (patientId, file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"patientId\", patientId); // Aggiunto l'ID paziente ai formData\n  console.log(\"PatientID: \" + patientId);\n\n  try {\n    const response = await axios.post(\n      `${API_URL}/api/patients/${patientId}/radiographs`,\n      formData,\n      {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    // Aggiungi maggiori dettagli all'errore\n    console.error(\"Errore durante il caricamento:\", error);\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per ottenere i pazienti associati a un dottore specifico\nexport const getPatientsFromDoctor = async (doctorId) => {\n  try {\n    const response = await axios.get(`${API_URL}/api/${doctorId}/patients`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore:\", error);\n    return [];\n  }\n};\n\n// Funzione per ottenere le radiografie di un paziente\nexport const getRadiographs = async (patientId) => {\n  try {\n    const response = await axios.get(\n      `${API_URL}/api/patients/${patientId}/radiographs`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\nexport const loadRadiographiesForPatient = async (patientId) => {\n  try {\n    const response = await axios.get(`${API_URL}/get_radiographs/${patientId}`);\n    return response.data;\n  } catch (error) {\n    console.log(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\n// Funzione per ottenere le informazioni della radiografia da un file info.txt\nexport const getRadiographyInformation = async (uid, idx) => {\n  try {\n    const response = await axios.get(\n      `${API_URL}/get_radiographs_info/${uid}/${idx}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\n// Funzione per verificare l'email\nexport const verifyEmail = async (uid) => {\n  try {\n    const response = await axios.get(`${API_URL}/verify-email/${uid}`);\n    return response;\n  } catch (error) {\n    console.error(\n      error.response?.data?.error || \"Errore durante la verifica dell'email.\"\n    );\n    throw error;\n  }\n};\n\n// Funzione per controllare se l'email è stata verificata\nexport const checkEmailVerification = async (email) => {\n  try {\n    await axios.post(`${API_URL}/check-email-verification`, {\n      email: email,\n    });\n    return \"\";\n  } catch (error) {\n    if (error.response) {\n      switch (error.response.status) {\n        case 403:\n          return \"La tua email non è stata verificata. Verifica la tua email prima di accedere.\";\n        case 404:\n          return \"Utente non trovato. Controlla le credenziali.\";\n        case 400:\n          return \"Inserire email.\";\n        default:\n          return (\n            error.response.data.error || \"Errore nella verifica dell'email.\"\n          );\n      }\n    } else {\n      return \"Errore di connessione. Riprova più tardi.\";\n    }\n  }\n};\n\n// Funzione per decrementare i tentativi di login\nexport const decrementLoginAttempts = async (email) => {\n  try {\n    const response = await axios.post(`${API_URL}/decrement-attempts`, {\n      email: email,\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore durante il decremento dei tentativi:\", error);\n    throw error;\n  }\n};\n\n// Funzione per il login\nexport const signInUser = async (auth, user, psw) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, user, psw);\n\n    const userData = userCredential.user;\n\n    return userData; // Return user object\n  } catch (error) {\n    console.error(\"Errore durante il login:\", error);\n    //handleError(error);\n    throw error;\n    //return null; // Return null if failed\n  }\n};\n\n// Funzione per il login con token\nexport const login = async (token) => {\n  const response = await axios.post(`${API_URL}/login`, {\n    idToken: token,\n  });\n  return response;\n};\n\nexport const getAttemptsLeft = async (email) => {\n  const response = await axios.post(`${API_URL}/get-attempts-left`, {\n    email: email,\n  });\n  return response.data.loginAttemptsLeft;\n};\n\nexport const sendPasswordResetEmail = async (email) => {\n  await axios.post(`${API_URL}/send-reset-email`, {\n    email: email,\n  });\n};\n\nexport const resetPassword = async (uid, password) => {\n  await axios.post(`${API_URL}/reset-password`, {\n    uid: uid,\n    password: password,\n  });\n};\n\n// Funzione per ottenere i dottori\nexport const fetchDoctors = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/api/doctors`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero dei dottori:\", error);\n    throw error;\n  }\n};\n\n// Funzione per ottenere i pazienti\nexport const fetchPatients = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/api/patients`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero dei pazienti:\", error);\n    throw error;\n  }\n};\n\n// Funzione per inviare una notifica\nexport const fetchNotifications = async (data) => {\n  try {\n    const response = await fetch(\"/api/notifications\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: data,\n    });\n    return response;\n  } catch (error) {\n    console.error(\"Errore nell'invio della notifica:\", error);\n    alert(\"Errore nell'invio della notifica.\");\n    throw error;\n  }\n};\n\n// Funzione per salvare un'operazione\nexport const saveOperations = async (data) => {\n  try {\n    const response = await fetch(\"/api/operations\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: data,\n    });\n    return response;\n  } catch (error) {\n    console.error(\"Errore durante la pianificazione dell'operazione:\", error);\n    alert(\"Errore: \" + error.message);\n    throw error;\n  }\n};\n\n// Funzione per caricare tutti i dati dei pazienti\nexport const loadPatientsData = async (doctorId) => {\n  try {\n    const response = await fetch(`/api/${doctorId}/patients`);\n    return response;\n  } catch (error) {\n    console.error(\"Errore nel caricamento dei pazienti:\", error);\n    throw error;\n  }\n};\n\n// Funzione per caricare operazioni e radiografie\nexport const loadOperationsAndRadiographs = async (patientId) => {\n  try {\n    const [operationsResponse, radiographsResponse, patientResponse] =\n      await Promise.all([\n        fetch(`/api/patients/${patientId}/operations`),\n        fetch(`/api/patients/${patientId}/radiographs`),\n        fetch(`/api/get_user/${patientId}`), // Nuova chiamata per recuperare i dettagli del paziente\n      ]);\n    return [operationsResponse, radiographsResponse, patientResponse];\n  } catch (error) {\n    console.error(\"Errore di connessione al server:\", error);\n    throw error;\n  }\n};\n\n// Funzione per recuperare le notifiche\nexport const getNotifications = async (userId) => {\n  try {\n    const response = await fetch(`/api/notifications?patientId=${userId}`);\n    return response;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle notifiche:\", error);\n    throw error;\n  }\n};\n\n// Funzione per segnare la notifiche come lette\nexport const patchNotifications = async (notificationId, isRead) => {\n  try {\n    const response = await fetch(`/api/notifications/${notificationId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: isRead,\n    });\n    return response;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle notifiche:\", error);\n    throw error;\n  }\n};\n\n// Funzione per registrare un utente\nexport const registerUser = async (userData) => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nella registrazione:\", error);\n    throw error;\n  }\n};\n\nexport async function predictImage(formData) {\n  try {\n    const response = await axios.post(`${API_URL}/predict`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error predicting image:\", error);\n    throw error;\n  }\n}\n\nexport async function uploadToDataset(formData) {\n  try {\n    await axios.post(`${API_URL}/upload-to-dataset`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    console.log(\"File caricato con successo nella cartella dataset.\");\n  } catch (error) {\n    console.error(\"Errore durante il caricamento del file:\", error);\n    throw error;\n  }\n}\n\n// Funzione per ottenere i dati dell'utente\nexport const getUserData = async (userId) => {\n  try {\n    const response = await axios.get(`${API_URL}/get_user/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero dei dati utente:\", error);\n    throw error;\n  }\n};\n\n// Funzione per aggiornare i dati dell'utente\nexport const updateUserData = async (userId, field, value) => {\n  try {\n    const payload = { userId, [field]: value };\n    const response = await axios.patch(`${API_URL}/update_user`, payload);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore durante l'aggiornamento dei dati utente:\", error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}