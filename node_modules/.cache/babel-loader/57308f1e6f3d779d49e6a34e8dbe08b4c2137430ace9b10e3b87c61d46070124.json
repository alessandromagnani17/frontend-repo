{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_2 = {\n  class: \"calendar\"\n};\nconst _hoisted_3 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_4 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_5 = {\n  class: \"date\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"radiographs\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[2] || (_cache[2] = _createElementVNode(\"h1\", null, \"Calendario Attività\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" Cicla attraverso i giorni del mese \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\"\n    }, [_createElementVNode(\"div\", _hoisted_5, _toDisplayString(day.date), 1 /* TEXT */), _createCommentVNode(\" Mostra il nome della radiografia se presente \"), day.radiographs.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(day.radiographs, (radiograph, index) => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: index\n      }, _toDisplayString(radiograph.name), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","onClick","_cache","$event","$options","changeMonth","_toDisplayString","$data","monthNames","month","year","_hoisted_4","_createCommentVNode","_Fragment","_renderList","daysInMonth","day","date","_hoisted_5","radiographs","length","_hoisted_6","radiograph","index","name"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n\n    <div class=\"calendar\">\n      <div class=\"calendar-header\">\n        <button @click=\"changeMonth(-1)\">&#8249;</button>\n        <span>{{ monthNames[month] }} {{ year }}</span>\n        <button @click=\"changeMonth(1)\">&#8250;</button>\n      </div>\n\n      <div class=\"calendar-grid\">\n        <!-- Cicla attraverso i giorni del mese -->\n        <div\n          v-for=\"day in daysInMonth\"\n          :key=\"day.date\"\n          class=\"calendar-day\"\n        >\n          <div class=\"date\">{{ day.date }}</div>\n          <!-- Mostra il nome della radiografia se presente -->\n          <div v-if=\"day.radiographs.length\" class=\"radiographs\">\n            <ul>\n              <li v-for=\"(radiograph, index) in day.radiographs\" :key=\"index\">\n                {{ radiograph.name }}\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(),  // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [],  // Le radiografie caricate\n      monthNames: [\n        'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', \n        'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n      ]\n    };\n  },\n  mounted() {\n    // Carica le radiografie all'avvio\n    this.loadRadiographs();\n  },\n  computed: {\n    daysInMonth() {\n      // Calcolare i giorni del mese\n      const days = [];\n      const firstDayOfMonth = new Date(this.year, this.month, 1);\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n\n      const totalDays = lastDayOfMonth.getDate();\n      for (let i = 1; i <= totalDays; i++) {\n        // Crea un oggetto per ogni giorno del mese\n        const dayDate = new Date(this.year, this.month, i);\n        const radiographsForDay = this.radiographs.filter(\n          (radiograph) => new Date(radiograph.date).toDateString() === dayDate.toDateString()\n        );\n\n        days.push({\n          date: i,\n          radiographs: radiographsForDay // Aggiungi le radiografie per quella data\n        });\n      }\n      return days;\n    }\n  },\n  methods: {\n    async loadRadiographs() {\n      // Carica le radiografie dal backend\n      try {\n        const response = await fetch(`/api/patients/${this.patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n          this.radiographs = data; // Salva tutte le radiografie\n        } else {\n          console.error('Errore nel recupero delle radiografie');\n        }\n      } catch (error) {\n        console.error('Errore di connessione al server:', error);\n      }\n    },\n    changeMonth(direction) {\n      // Cambia mese\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.date {\n  font-size: 1.2em;\n  font-weight: bold;\n}\n\n.radiographs {\n  margin-top: 10px;\n  font-size: 0.9em;\n  color: #007bff;\n}\n\n.radiographs ul {\n  padding: 0;\n  margin: 0;\n}\n\n.radiographs li {\n  list-style-type: none;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 1.5em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAoB;;EAGxBA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAiB;;EAMvBA,KAAK,EAAC;AAAe;;EAOjBA,KAAK,EAAC;AAAM;;EAlB3BC,GAAA;EAoB6CD,KAAK,EAAC;;;uBAnBjDE,mBAAA,CA6BM,OA7BNC,UA6BM,G,0BA5BJC,mBAAA,CAA4B,YAAxB,qBAAmB,sBAEvBA,mBAAA,CAyBM,OAzBNC,UAyBM,GAxBJD,mBAAA,CAIM,OAJNE,UAIM,GAHJF,mBAAA,CAAiD;IAAxCG,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW;KAAM,GAAO,GACxCP,mBAAA,CAA+C,cAAAQ,gBAAA,CAAtCC,KAAA,CAAAC,UAAU,CAACD,KAAA,CAAAE,KAAK,KAAI,GAAC,GAAAH,gBAAA,CAAGC,KAAA,CAAAG,IAAI,kBACrCZ,mBAAA,CAAgD;IAAvCG,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW;KAAK,GAAO,E,GAGzCP,mBAAA,CAiBM,OAjBNa,UAiBM,GAhBJC,mBAAA,wCAA2C,G,kBAC3ChB,mBAAA,CAcMiB,SAAA,QA3BdC,WAAA,CAcwBV,QAAA,CAAAW,WAAW,EAAlBC,GAAG;yBADZpB,mBAAA,CAcM;MAZHD,GAAG,EAAEqB,GAAG,CAACC,IAAI;MACdvB,KAAK,EAAC;QAENI,mBAAA,CAAsC,OAAtCoB,UAAsC,EAAAZ,gBAAA,CAAjBU,GAAG,CAACC,IAAI,kBAC7BL,mBAAA,kDAAqD,EAC1CI,GAAG,CAACG,WAAW,CAACC,MAAM,I,cAAjCxB,mBAAA,CAMM,OANNyB,UAMM,GALJvB,mBAAA,CAIK,c,kBAHHF,mBAAA,CAEKiB,SAAA,QAxBnBC,WAAA,CAsBgDE,GAAG,CAACG,WAAW,EAtB/D,CAsB0BG,UAAU,EAAEC,KAAK;2BAA7B3B,mBAAA,CAEK;QAF+CD,GAAG,EAAE4B;MAAK,GAAAjB,gBAAA,CACzDgB,UAAU,CAACE,IAAI;0CAvBlCZ,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}