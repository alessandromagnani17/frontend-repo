{"ast":null,"code":"export default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(),\n      // Mese corrente\n      year: new Date().getFullYear(),\n      // Anno corrente\n      radiographs: [],\n      // Le radiografie caricate\n      selectedDay: null,\n      // Giorno selezionato\n      monthNames: [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"],\n      isPatient: false,\n      // Indica se l'utente è un paziente\n      patientId: null,\n      // ID del paziente\n      selectedPatient: null // Paziente selezionato (loggato)\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isPatient) {\n      this.loadRadiographs();\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i);\n        const radiographsOnDay = this.radiographs.filter(radiograph => new Date(radiograph.date).toDateString() === dayDate.toDateString());\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay\n        });\n      }\n      return days;\n    }\n  },\n  methods: {\n    checkUserRole() {\n      // Verifica il ruolo dell'utente\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente dal localStorage\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n        console.log(\"Ruolo utente: Paziente\");\n      } else {\n        this.isPatient = false;\n        console.log(\"Ruolo utente: Non paziente\");\n      }\n    },\n    async loadRadiographs() {\n      // Carica le radiografie dal backend solo per il paziente loggato\n      if (!this.patientId) {\n        console.error(\"ID paziente non trovato.\");\n        return;\n      }\n      try {\n        console.log(\"Caricamento radiografie per paziente con ID:\", this.patientId);\n        const response = await fetch(`/api/patients/${this.patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n          this.radiographs = data;\n\n          // Stampa le informazioni sulle radiografie caricate\n          console.log(\"Radiografie ricevute dal backend:\", this.radiographs);\n\n          // Aggiungi un loop per stampare tutte le informazioni sulle singole radiografie\n          this.radiographs.forEach((radiograph, index) => {\n            console.log(`Radiografia ${index + 1}:`);\n            console.log(`Nome: ${radiograph.name}`);\n            console.log(`Data: ${radiograph.date}`);\n            console.log(`URL: ${radiograph.url}`);\n            console.log(`Descrizione: ${radiograph.description}`);\n          });\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n    showDayDetails(day) {\n      // Se il giorno è già selezionato, chiudi i dettagli\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n    enlargeRadiograph(url) {\n      // Visualizza l'immagine della radiografia in modalità ingrandita\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    changeMonth(direction) {\n      // Cambia mese\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","loadingPrediction","successMessage","month","Date","getMonth","year","getFullYear","radiographs","selectedDay","monthNames","isPatient","patientId","selectedPatient","mounted","checkUserRole","loadRadiographs","computed","daysInMonth","days","lastDayOfMonth","totalDays","getDate","i","dayDate","radiographsOnDay","filter","radiograph","date","toDateString","push","methods","userData","JSON","parse","localStorage","getItem","role","userId","console","log","error","response","fetch","ok","json","forEach","index","url","description","showDayDetails","day","enlargeRadiograph","modalImageUrl","isModalOpen","changeMonth","direction"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n\n    <!-- Verifica se l'utente è un paziente -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <div class=\"calendar-grid\">\n          <div\n            v-for=\"day in daysInMonth\"\n            :key=\"day.date\"\n            class=\"calendar-day\"\n            @click=\"showDayDetails(day)\"\n          >\n            <div class=\"date\">{{ day.date }}</div>\n            <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n              {{ day.radiographs.length }}\n              {{\n                day.radiographs.length === 1\n                  ? \"caricamento radiografia\"\n                  : \"caricamenti radiografie\"\n              }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition name=\"slide\">\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <p>\n            <strong>Paziente:</strong> {{ selectedPatient.name }}\n            {{ selectedPatient.family_name }}\n          </p>\n          <div v-if=\"selectedDay.radiographs.length > 0\">\n            <h3>Radiografie caricate:</h3>\n            <ul>\n              <li\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <strong>{{ radiograph.name }}</strong\n                ><br />\n                <span>{{ radiograph.date }}</span\n                ><br />\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </li>\n            </ul>\n          </div>\n          <div v-else>\n            <p>Nessuna radiografia caricate per questa data.</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n\n    <!-- Messaggio per gli altri ruoli (es. medico) -->\n    <div v-else>\n      <p>Solo i pazienti possono vedere le loro radiografie nel calendario.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n      patientId: null, // ID del paziente\n      selectedPatient: null, // Paziente selezionato (loggato)\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isPatient) {\n      this.loadRadiographs();\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i);\n        const radiographsOnDay = this.radiographs.filter(\n          (radiograph) =>\n            new Date(radiograph.date).toDateString() === dayDate.toDateString()\n        );\n\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay,\n        });\n      }\n      return days;\n    },\n  },\n  methods: {\n    checkUserRole() {\n      // Verifica il ruolo dell'utente\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente dal localStorage\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n        console.log(\"Ruolo utente: Paziente\");\n      } else {\n        this.isPatient = false;\n        console.log(\"Ruolo utente: Non paziente\");\n      }\n    },\n\n    async loadRadiographs() {\n      // Carica le radiografie dal backend solo per il paziente loggato\n      if (!this.patientId) {\n        console.error(\"ID paziente non trovato.\");\n        return;\n      }\n\n      try {\n        console.log(\n          \"Caricamento radiografie per paziente con ID:\",\n          this.patientId\n        );\n\n        const response = await fetch(\n          `/api/patients/${this.patientId}/radiographs`\n        );\n\n        if (response.ok) {\n          const data = await response.json();\n          this.radiographs = data;\n\n          // Stampa le informazioni sulle radiografie caricate\n          console.log(\"Radiografie ricevute dal backend:\", this.radiographs);\n\n          // Aggiungi un loop per stampare tutte le informazioni sulle singole radiografie\n          this.radiographs.forEach((radiograph, index) => {\n            console.log(`Radiografia ${index + 1}:`);\n            console.log(`Nome: ${radiograph.name}`);\n            console.log(`Data: ${radiograph.date}`);\n            console.log(`URL: ${radiograph.url}`);\n            console.log(`Descrizione: ${radiograph.description}`);\n          });\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    showDayDetails(day) {\n      // Se il giorno è già selezionato, chiudi i dettagli\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      // Visualizza l'immagine della radiografia in modalità ingrandita\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      // Cambia mese\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.radiograph-count {\n  position: absolute;\n  bottom: 10px;\n  left: 5px;\n  font-size: 0.9em;\n  color: #007bff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 1.5em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione di scorrimento con effetto parallax e 3D */\n.day-details-container {\n  position: relative;\n  width: 80%;\n  max-width: 600px;\n  margin: 0 auto;\n  perspective: 1200px; /* Aumentato per un effetto 3D più profondo */\n  z-index: 100;\n}\n\n.day-details-card {\n  position: absolute;\n  width: 100%;\n  height: auto;\n  background: #fff;\n  border-radius: 20px;\n  box-shadow: 0 10px 60px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n  transform-style: preserve-3d;\n  transform: rotateY(0deg) translateZ(0px);\n  transition: transform 1s ease-in-out, box-shadow 0.3s ease;\n  will-change: transform, box-shadow;\n}\n\n/* Aggiungi il parallax durante l'interazione */\n.day-details-card:hover {\n  transform: rotateY(5deg) translateZ(100px);\n  box-shadow: 0 20px 70px rgba(0, 0, 0, 0.4);\n}\n\n.day-details-card.open {\n  transform: rotateY(180deg) translateZ(100px);\n}\n\n/* Lato frontale (con la data e l'intestazione principale) */\n.day-details-card .front {\n  padding: 15px;\n  background: linear-gradient(135deg, #ff007c, #ff4c4c);\n  color: #fff;\n  border-radius: 20px;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  transform: rotateY(0deg);\n  backface-visibility: hidden;\n  position: relative;\n}\n\n.day-details-card .front h2 {\n  font-size: 1.2em; /* Testo ridotto */\n  margin: 0;\n}\n\n.day-details-card .front p {\n  font-size: 0.9em; /* Testo ridotto */\n  margin-top: 8px;\n  font-weight: 300;\n  color: #f0f0f0;\n}\n\n/* Lato posteriore (dettagli delle radiografie) */\n.day-details-card .back {\n  padding: 15px;\n  background: #f7f7f7;\n  color: #333;\n  border-radius: 20px;\n  transform: rotateY(180deg);\n  backface-visibility: hidden;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  opacity: 0;\n  transition: opacity 0.5s ease;\n}\n\n.day-details-card.open .back {\n  opacity: 1;\n}\n\n/* Dettaglio delle radiografie */\n.day-details-card .back ul {\n  list-style-type: none;\n  padding-left: 0;\n}\n\n.day-details-card .back ul li {\n  margin-bottom: 8px;\n  font-size: 0.85em; /* Testo ridotto */\n  font-weight: 300;\n  color: #555;\n  position: relative;\n}\n\n.day-details-card .back ul li:before {\n  content: \"•\";\n  position: absolute;\n  left: -15px;\n  top: 0;\n  font-size: 1.5em;\n  color: #007bff;\n}\n\n/* Pulsante interattivo con micro-animazioni */\n.day-details-card .back button {\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 10px;\n  padding: 8px 12px;\n  cursor: pointer;\n  font-size: 0.9em;\n  transition: background-color 0.3s ease, transform 0.2s ease;\n}\n\n.day-details-card .back button:hover {\n  background-color: #0056b3;\n  transform: scale(1.1);\n}\n\n/* Overlay con sfocatura dinamica */\n.day-details-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(8px);\n  z-index: 999;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity 0.5s ease-in-out;\n}\n\n.day-details-overlay.visible {\n  opacity: 1;\n  visibility: visible;\n}\n\n/* Micro-interazione di illuminazione */\nbody {\n  background: #f0f0f0;\n  transition: background 0.3s ease;\n}\n\nbody:hover {\n  background: #e1e1e1;\n}\n\nul {\n  list-style-type: none;\n  padding-left: 0;\n}\n\nli {\n  margin: 10px 0;\n}\n\nli button {\n  font-size: 1em;\n  padding: 5px 10px;\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  border: none;\n}\n\nli button:hover {\n  background-color: #0056b3;\n}\n\n/* Transizione scorrimento */\n.slide-enter-active,\n.slide-leave-active {\n  transition: transform 0.3s ease;\n}\n\n.slide-enter,\n.slide-leave-to {\n  transform: translateY(-20px);\n}\n</style>\n"],"mappings":"AA4EA,eAAe;EACbA,IAAI,EAAE,kBAAkB;EACxBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,iBAAiB,EAAE,KAAK;MACxBC,cAAc,EAAE,EAAE;MAClBC,KAAK,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MAAE;MAC9BC,IAAI,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC;MAAE;MAChCC,WAAW,EAAE,EAAE;MAAE;MACjBC,WAAW,EAAE,IAAI;MAAE;MACnBC,UAAU,EAAE,CACV,SAAS,EACT,UAAU,EACV,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,SAAS,EACT,UAAU,EACV,UAAU,CACX;MACDC,SAAS,EAAE,KAAK;MAAE;MAClBC,SAAS,EAAE,IAAI;MAAE;MACjBC,eAAe,EAAE,IAAI,CAAE;IACzB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;IACpB,IAAI,IAAI,CAACJ,SAAS,EAAE;MAClB,IAAI,CAACK,eAAe,CAAC,CAAC;IACxB;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,MAAMC,IAAG,GAAI,EAAE;MACf,MAAMC,cAAa,GAAI,IAAIhB,IAAI,CAAC,IAAI,CAACE,IAAI,EAAE,IAAI,CAACH,KAAI,GAAI,CAAC,EAAE,CAAC,CAAC;MAC7D,MAAMkB,SAAQ,GAAID,cAAc,CAACE,OAAO,CAAC,CAAC;MAE1C,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,IAAKF,SAAS,EAAEE,CAAC,EAAE,EAAE;QACnC,MAAMC,OAAM,GAAI,IAAIpB,IAAI,CAAC,IAAI,CAACE,IAAI,EAAE,IAAI,CAACH,KAAK,EAAEoB,CAAC,CAAC;QAClD,MAAME,gBAAe,GAAI,IAAI,CAACjB,WAAW,CAACkB,MAAM,CAC7CC,UAAU,IACT,IAAIvB,IAAI,CAACuB,UAAU,CAACC,IAAI,CAAC,CAACC,YAAY,CAAC,MAAML,OAAO,CAACK,YAAY,CAAC,CACtE,CAAC;QAEDV,IAAI,CAACW,IAAI,CAAC;UACRF,IAAI,EAAEL,CAAC;UACPf,WAAW,EAAEiB;QACf,CAAC,CAAC;MACJ;MACA,OAAON,IAAI;IACb;EACF,CAAC;EACDY,OAAO,EAAE;IACPhB,aAAaA,CAAA,EAAG;MACd;MACA,MAAMiB,QAAO,GAAIC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;MAC7D,IAAIJ,QAAO,IAAKA,QAAQ,CAACK,IAAG,KAAM,SAAS,EAAE;QAC3C,IAAI,CAAC1B,SAAQ,GAAI,IAAI;QACrB,IAAI,CAACC,SAAQ,GAAIoB,QAAQ,CAACM,MAAM,EAAE;QAClC,IAAI,CAACzB,eAAc,GAAImB,QAAQ,EAAE;QACjCO,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACvC,OAAO;QACL,IAAI,CAAC7B,SAAQ,GAAI,KAAK;QACtB4B,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MAC3C;IACF,CAAC;IAED,MAAMxB,eAAeA,CAAA,EAAG;MACtB;MACA,IAAI,CAAC,IAAI,CAACJ,SAAS,EAAE;QACnB2B,OAAO,CAACE,KAAK,CAAC,0BAA0B,CAAC;QACzC;MACF;MAEA,IAAI;QACFF,OAAO,CAACC,GAAG,CACT,8CAA8C,EAC9C,IAAI,CAAC5B,SACP,CAAC;QAED,MAAM8B,QAAO,GAAI,MAAMC,KAAK,CAC1B,iBAAiB,IAAI,CAAC/B,SAAS,cACjC,CAAC;QAED,IAAI8B,QAAQ,CAACE,EAAE,EAAE;UACf,MAAM5C,IAAG,GAAI,MAAM0C,QAAQ,CAACG,IAAI,CAAC,CAAC;UAClC,IAAI,CAACrC,WAAU,GAAIR,IAAI;;UAEvB;UACAuC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE,IAAI,CAAChC,WAAW,CAAC;;UAElE;UACA,IAAI,CAACA,WAAW,CAACsC,OAAO,CAAC,CAACnB,UAAU,EAAEoB,KAAK,KAAK;YAC9CR,OAAO,CAACC,GAAG,CAAC,eAAeO,KAAI,GAAI,CAAC,GAAG,CAAC;YACxCR,OAAO,CAACC,GAAG,CAAC,SAASb,UAAU,CAAC5B,IAAI,EAAE,CAAC;YACvCwC,OAAO,CAACC,GAAG,CAAC,SAASb,UAAU,CAACC,IAAI,EAAE,CAAC;YACvCW,OAAO,CAACC,GAAG,CAAC,QAAQb,UAAU,CAACqB,GAAG,EAAE,CAAC;YACrCT,OAAO,CAACC,GAAG,CAAC,gBAAgBb,UAAU,CAACsB,WAAW,EAAE,CAAC;UACvD,CAAC,CAAC;QACJ,OAAO;UACLV,OAAO,CAACE,KAAK,CAAC,uCAAuC,CAAC;QACxD;MACF,EAAE,OAAOA,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAEDS,cAAcA,CAACC,GAAG,EAAE;MAClB;MACA,IAAI,IAAI,CAAC1C,WAAU,IAAK,IAAI,CAACA,WAAW,CAACmB,IAAG,KAAMuB,GAAG,CAACvB,IAAI,EAAE;QAC1D,IAAI,CAACnB,WAAU,GAAI,IAAI;MACzB,OAAO;QACL,IAAI,CAACA,WAAU,GAAI0C,GAAG;MACxB;MACAZ,OAAO,CAACC,GAAG,CAAC,uBAAuBW,GAAG,CAACvB,IAAI,EAAE,CAAC;IAChD,CAAC;IAEDwB,iBAAiBA,CAACJ,GAAG,EAAE;MACrB;MACA,IAAI,CAACK,aAAY,GAAIL,GAAG;MACxB,IAAI,CAACM,WAAU,GAAI,IAAI;IACzB,CAAC;IAEDC,WAAWA,CAACC,SAAS,EAAE;MACrB;MACA,IAAIA,SAAQ,KAAM,CAAC,EAAE;QACnB,IAAI,IAAI,CAACrD,KAAI,KAAM,EAAE,EAAE;UACrB,IAAI,CAACA,KAAI,GAAI,CAAC;UACd,IAAI,CAACG,IAAI,EAAE;QACb,OAAO;UACL,IAAI,CAACH,KAAK,EAAE;QACd;MACF,OAAO;QACL,IAAI,IAAI,CAACA,KAAI,KAAM,CAAC,EAAE;UACpB,IAAI,CAACA,KAAI,GAAI,EAAE;UACf,IAAI,CAACG,IAAI,EAAE;QACb,OAAO;UACL,IAAI,CAACH,KAAK,EAAE;QACd;MACF;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}