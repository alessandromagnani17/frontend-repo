{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, Transition as _Transition, withCtx as _withCtx, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText } from \"vue\";\nconst _hoisted_1 = {\n  class: \"activity-calendar\"\n};\nconst _hoisted_2 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 1\n};\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"modal\"\n};\nconst _hoisted_7 = {\n  class: \"modal-content\"\n};\nconst _hoisted_8 = [\"value\"];\nconst _hoisted_9 = [\"min\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Calendar = _resolveComponent(\"Calendar\");\n  const _component_DayDetails = _resolveComponent(\"DayDetails\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[13] || (_cache[13] = _createElementVNode(\"h1\", {\n    class: \"calendar\"\n  }, \"Calendario Attività\", -1 /* HOISTED */)), $data.isPatient ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createCommentVNode(\" Calendario per paziente \"), _createVNode(_component_Calendar, {\n    month: $data.month,\n    year: $data.year,\n    daysInMonth: $options.daysInMonth,\n    monthNames: $data.monthNames,\n    dayNames: $data.dayNames,\n    minDate: $data.minDate,\n    operationIcon: $data.operationIcon,\n    radiographIcon: $data.radiographIcon,\n    showDayDetails: $options.showDayDetails,\n    changeMonth: $options.changeMonth\n  }, null, 8 /* PROPS */, [\"month\", \"year\", \"daysInMonth\", \"monthNames\", \"dayNames\", \"minDate\", \"operationIcon\", \"radiographIcon\", \"showDayDetails\", \"changeMonth\"]), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createBlock(_component_DayDetails, {\n      key: 0,\n      selectedDay: $data.selectedDay,\n      monthNames: $data.monthNames,\n      month: $data.month,\n      year: $data.year,\n      formatDate: $options.formatDate,\n      formatTime: $options.formatTime,\n      enlargeRadiograph: $options.enlargeRadiograph\n    }, null, 8 /* PROPS */, [\"selectedDay\", \"monthNames\", \"month\", \"year\", \"formatDate\", \"formatTime\", \"enlargeRadiograph\"])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createCommentVNode(\" Calendario per dottore \"), $data.isDoctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createCommentVNode(\" Calendario per il dottore \"), _createVNode(_component_Calendar, {\n    month: $data.month,\n    year: $data.year,\n    daysInMonth: $options.daysInMonth,\n    monthNames: $data.monthNames,\n    dayNames: $data.dayNames,\n    minDate: $data.minDate,\n    operationIcon: $data.operationIcon,\n    radiographIcon: $data.radiographIcon,\n    showDayDetails: $options.showDayDetails,\n    changeMonth: $options.changeMonth\n  }, null, 8 /* PROPS */, [\"month\", \"year\", \"daysInMonth\", \"monthNames\", \"dayNames\", \"minDate\", \"operationIcon\", \"radiographIcon\", \"showDayDetails\", \"changeMonth\"]), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createBlock(_component_DayDetails, {\n      key: 0,\n      selectedDay: $data.selectedDay,\n      monthNames: $data.monthNames,\n      month: $data.month,\n      year: $data.year,\n      formatDate: $options.formatDate,\n      formatTime: $options.formatTime,\n      enlargeRadiograph: $options.enlargeRadiograph\n    }, null, 8 /* PROPS */, [\"selectedDay\", \"monthNames\", \"month\", \"year\", \"formatDate\", \"formatTime\", \"enlargeRadiograph\"])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.openScheduleModal && $options.openScheduleModal(...args)),\n    class: \"btn btn-primary custom-btn\"\n  }, \" Pianifica Operazione \"), _createCommentVNode(\" Modale per inserire i dettagli dell'operazione \"), $data.showModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", null, \"Pianifica una nuova operazione\", -1 /* HOISTED */)), _cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    for: \"patientSelect\"\n  }, \"Seleziona un paziente:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedPatientId = $event),\n    id: \"patientSelect\",\n    class: \"form-select\"\n  }, [_cache[7] || (_cache[7] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"Seleziona un paziente\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.patients, patient => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: patient.userId,\n      value: patient.userId\n    }, _toDisplayString(patient.name) + \" \" + _toDisplayString(patient.family_name), 9 /* TEXT, PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedPatientId]]), _cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    for: \"operationDate\"\n  }, \"Data dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.operationDate = $event),\n    id: \"operationDate\",\n    min: $data.minDate\n  }, null, 8 /* PROPS */, _hoisted_9), [[_vModelText, $data.operationDate]]), _cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    for: \"operationTime\"\n  }, \"Ora dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"time\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.operationTime = $event),\n    id: \"operationTime\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.operationTime]]), _cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    for: \"description\"\n  }, \"Descrizione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.description = $event),\n    id: \"description\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.description]]), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.scheduleOperation && $options.scheduleOperation(...args)),\n    class: \"btn btn-success\"\n  }, \"Salva\"), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.closeScheduleModal && $options.closeScheduleModal(...args)),\n    class: \"btn btn-secondary\"\n  }, \"Annulla\")])])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$data","isPatient","_hoisted_3","_createCommentVNode","_createVNode","_component_Calendar","month","year","daysInMonth","$options","monthNames","dayNames","minDate","operationIcon","radiographIcon","showDayDetails","changeMonth","_Transition","name","onBeforeEnter","beforeEnter","onEnter","enter","onLeave","leave","default","_withCtx","selectedDay","_createBlock","_component_DayDetails","formatDate","formatTime","enlargeRadiograph","_","_hoisted_4","isDoctor","_hoisted_5","onClick","_cache","args","openScheduleModal","showModal","_hoisted_6","_hoisted_7","for","$event","selectedPatientId","id","value","disabled","_Fragment","_renderList","patients","patient","userId","_toDisplayString","family_name","_hoisted_8","type","operationDate","min","_hoisted_9","operationTime","description","scheduleOperation","closeScheduleModal"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"activity-calendar\">\n    <div class=\"calendar-container\">\n      <h1 class=\"calendar\">Calendario Attività</h1>\n\n      <div v-if=\"isPatient\">\n        <!-- Calendario per paziente -->\n        <Calendar\n          :month=\"month\"\n          :year=\"year\"\n          :daysInMonth=\"daysInMonth\"\n          :monthNames=\"monthNames\"\n          :dayNames=\"dayNames\"\n          :minDate=\"minDate\"\n          :operationIcon=\"operationIcon\"\n          :radiographIcon=\"radiographIcon\"\n          :showDayDetails=\"showDayDetails\"\n          :changeMonth=\"changeMonth\"\n        />\n        <transition\n          name=\"fade\"\n          @before-enter=\"beforeEnter\"\n          @enter=\"enter\"\n          @leave=\"leave\"\n        >\n          <DayDetails\n            v-if=\"selectedDay\"\n            :selectedDay=\"selectedDay\"\n            :monthNames=\"monthNames\"\n            :month=\"month\"\n            :year=\"year\"\n            :formatDate=\"formatDate\"\n            :formatTime=\"formatTime\"\n            :enlargeRadiograph=\"enlargeRadiograph\"\n          />\n        </transition>\n      </div>\n\n      <div v-else>\n        <!-- Calendario per dottore -->\n        <div v-if=\"isDoctor\">\n          <!-- Calendario per il dottore -->\n          <Calendar\n            :month=\"month\"\n            :year=\"year\"\n            :daysInMonth=\"daysInMonth\"\n            :monthNames=\"monthNames\"\n            :dayNames=\"dayNames\"\n            :minDate=\"minDate\"\n            :operationIcon=\"operationIcon\"\n            :radiographIcon=\"radiographIcon\"\n            :showDayDetails=\"showDayDetails\"\n            :changeMonth=\"changeMonth\"\n          />\n          <transition\n            name=\"fade\"\n            @before-enter=\"beforeEnter\"\n            @enter=\"enter\"\n            @leave=\"leave\"\n          >\n            <DayDetails\n              v-if=\"selectedDay\"\n              :selectedDay=\"selectedDay\"\n              :monthNames=\"monthNames\"\n              :month=\"month\"\n              :year=\"year\"\n              :formatDate=\"formatDate\"\n              :formatTime=\"formatTime\"\n              :enlargeRadiograph=\"enlargeRadiograph\"\n            />\n          </transition>\n\n          <button @click=\"openScheduleModal\" class=\"btn btn-primary custom-btn\">\n            Pianifica Operazione\n          </button>\n\n          <!-- Modale per inserire i dettagli dell'operazione -->\n          <div v-if=\"showModal\" class=\"modal\">\n            <div class=\"modal-content\">\n              <h2>Pianifica una nuova operazione</h2>\n              <label for=\"patientSelect\">Seleziona un paziente:</label>\n              <select v-model=\"selectedPatientId\" id=\"patientSelect\" class=\"form-select\">\n                <option value=\"\" disabled>Seleziona un paziente</option>\n                <option v-for=\"patient in patients\" :key=\"patient.userId\" :value=\"patient.userId\">\n                  {{ patient.name }} {{ patient.family_name }}\n                </option>\n              </select>\n\n              <label for=\"operationDate\">Data dell'operazione:</label>\n              <input type=\"date\" v-model=\"operationDate\" id=\"operationDate\" :min=\"minDate\" />\n\n              <label for=\"operationTime\">Ora dell'operazione:</label>\n              <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\n\n              <label for=\"description\">Descrizione:</label>\n              <textarea v-model=\"description\" id=\"description\"></textarea>\n\n              <div>\n                <button @click=\"scheduleOperation\" class=\"btn btn-success\">Salva</button>\n                <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">Annulla</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Calendar from \"./ScheduleCalendar.vue\";\nimport DayDetails from \"./DayDetails.vue\";\n\nexport default {\n  components: {\n    Calendar,\n    DayDetails,\n  },\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      operations: [],\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      dayNames: [\"LUN\", \"MAR\", \"MER\", \"GIO\", \"VEN\", \"SAB\", \"DOM\"],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      selectedPatient: null, // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [], // Pazienti associati al dottore\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\"),\n    };\n  },\n  mounted() {\n    this.checkUserRole(); // Verifica il ruolo dell'utente\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\n      if (userData && userData.userId) {\n        const userId = userData.userId; // Recupera lo userId\n        console.log(\"User ID recuperato:\", userId);\n        this.loadPatientData(userId); // Carica operazioni e radiografie per il paziente\n      } else {\n        console.error(\"User ID non trovato in userData.\");\n      }\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n      const firstDayOfMonth = new Date(this.year, this.month, 1);\n      const startDayOfWeek = firstDayOfMonth.getDay(); // Giorno della settimana (0 = Domenica, 1 = Lunedì, ecc.)\n\n      // Calcola quanti giorni del mese precedente devono essere inclusi\n      const daysFromPrevMonth = (startDayOfWeek + 6) % 7; // Se il mese inizia di lunedì, vogliamo 0 giorni precedenti\n      const prevMonthLastDay = new Date(this.year, this.month, 0).getDate();\n\n      // Radiografie e operazioni per ogni giorno\n      const radiographsPerDay = {};\n      const operationsPerDay = {};\n\n      // Se l'utente è un medico\n      if (this.isDoctor) {\n        this.patients.forEach((patient) => {\n          if (patient.radiographs) {\n            patient.radiographs.forEach((radiograph) => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n\n          if (patient.operations) {\n            patient.operations.forEach((operation) => {\n              const operationDate = this.parseISODate(operation.operationDate);\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}`,\n                });\n              }\n            });\n          }\n        });\n      } else {\n        const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\n\n        if (this.radiographs) {\n          this.radiographs.forEach((radiograph) => {\n            const radiographDate = new Date(radiograph.date).toDateString(); // Data della radiografia\n            if (!radiographsPerDay[radiographDate]) {\n              radiographsPerDay[radiographDate] = []; // Inizializza se non esiste\n            }\n            radiographsPerDay[radiographDate].push({\n              ...radiograph,\n              patientName: `${userData.name} ${userData.family_name}`,\n            }); // Aggiungi radiografia alla data\n          });\n        }\n\n        if (this.operations) {\n          this.operations.forEach((operation) => {\n            const operationDate = this.parseISODate(operation.operationDate); // Data dell'operazione\n            if (operationDate !== \"Invalid Date\") {\n              if (!operationsPerDay[operationDate]) {\n                operationsPerDay[operationDate] = []; // Inizializza se non esiste\n              }\n              operationsPerDay[operationDate].push({\n                ...operation,\n                patientName: `${userData.name} ${userData.family_name}`,\n              }); // Aggiungi operazione alla data\n            }\n          });\n        }\n      }\n\n      // Aggiungi i giorni del mese precedente\n      for (let i = daysFromPrevMonth; i > 0; i--) {\n        const date = new Date(\n          this.year,\n          this.month - 1,\n          prevMonthLastDay - i + 1\n        );\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: date.getDate(),\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth(), // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true, // Per i giorni del mese precedente\n        });\n      }\n\n      // Aggiungi i giorni del mese corrente\n      for (let i = 1; i <= totalDays; i++) {\n        const date = new Date(this.year, this.month, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: false, // Per i giorni del mese corrente\n        });\n      }\n\n      // Calcola quanti giorni del mese successivo devono essere inclusi\n      const remainingDays = 42 - days.length; // Un calendario completo ha 6 settimane = 42 giorni\n      for (let i = 1; i <= remainingDays; i++) {\n        const date = new Date(this.year, this.month + 1, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true, // Per i giorni del mese successivo\n        });\n      }\n\n      return days;\n    },\n  },\n\n  methods: {\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        console.log(\"Ruolo utente: Paziente\");\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (\n          !this.selectedPatientId ||\n          !this.operationDate ||\n          !this.operationTime ||\n          !this.description\n        ) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(\n          this.operationDate,\n          this.operationTime\n        );\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate, // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString(), // Timestamp di creazione\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\n          );\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\n          \"Errore durante la pianificazione dell'operazione:\",\n          error\n        );\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(\n          `DEBUG: Errore nella conversione della data ISO \"${isoString}\":`,\n          error\n        );\n        return \"Invalid Date\";\n      }\n    },\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n\n    // Modifica per caricare i pazienti (solo per i medici)\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie e le operazioni per ogni paziente\n          this.patients.forEach((patient) => {\n            this.loadPatientData(patient.userId); // Carica i dati per ogni paziente\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    // Funzione generica per caricare le operazioni e le radiografie\n    async loadPatientData(patientId) {\n      try {\n        // Carica le operazioni\n        const operationsResponse = await fetch(\n          `/api/patients/${patientId}/operations`\n        );\n        if (operationsResponse.ok) {\n          const operationsData = await operationsResponse.json();\n          console.log(\"RADIOGRNJCNEJCD: \", operationsData);\n          this.handleLoadedData(\"operations\", patientId, operationsData);\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n\n        // Carica le radiografie\n        const radiographsResponse = await fetch(\n          `/api/patients/${patientId}/radiographs`\n        );\n        if (radiographsResponse.ok) {\n          const radiographsData = await radiographsResponse.json();\n          this.handleLoadedData(\"radiographs\", patientId, radiographsData);\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    // Funzione per gestire i dati caricati (operazioni o radiografie)\n    handleLoadedData(type, patientId, data) {\n      // Se l'utente è un medico, aggiorna la lista dei pazienti\n      if (this.isDoctor) {\n        const patient = this.patients.find((p) => p.userId === patientId);\n        if (patient) {\n          patient[type] = data; // Aggiungi le operazioni o radiografie al paziente\n          console.log(\n            `${\n              type.charAt(0).toUpperCase() + type.slice(1)\n            } aggiunti al paziente:`,\n            patient[type]\n          );\n        }\n      } else {\n        // Se l'utente è un paziente, aggiorna direttamente il proprio profilo\n        this[type] = data; // Aggiungi le operazioni o radiografie al profilo del paziente\n        console.log(\n          `${\n            type.charAt(0).toUpperCase() + type.slice(1)\n          } aggiunti al profilo del paziente:`,\n          this[type]\n        );\n      }\n    },\n\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    formatDate(dateTime) {\n      const date = new Date(dateTime);\n      return date.toLocaleDateString(\"it-IT\"); // Mostra solo la data in formato italiano\n    },\n    formatTime(dateTime) {\n      const date = new Date(dateTime);\n      return date.toLocaleTimeString(\"it-IT\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      }); // Mostra solo l'ora in formato 24 ore\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // Trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.calendar-container {\n  max-width: 100%;\n  padding: 40px;\n  border-radius: 10px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n}\n\nh1.calendar {\n  font-size: 18px;\n  font-family: inherit;\n  font-weight: normal;\n  margin-bottom: 20px;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 999; /* Assicurati che il modale sia sopra gli altri contenuti */\n}\n\n.modal-content {\n  background: #fff;\n  padding: 30px;\n  border-radius: 10px;\n  width: 100%;\n  max-width: 500px; /* Imposta una larghezza massima per evitare che sia troppo largo */\n  text-align: left;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); /* Ombra leggera per dare profondità */\n}\n\n.modal-content h2 {\n  font-size: 1.5em;\n  margin-bottom: 20px;\n  color: #333; /* Colore del testo */\n  font-weight: bold;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 8px;\n  color: #555;\n  font-weight: 600; /* Testo leggermente più marcato */\n}\n\n.modal-content select,\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 12px;\n  margin-bottom: 20px;\n  border: 1px solid #ddd; /* Bordi più morbidi */\n  border-radius: 8px;\n  font-size: 1em;\n  box-sizing: border-box; /* Assicura che padding e border siano inclusi nella larghezza */\n  transition: border 0.3s ease; /* Aggiungi transizione ai bordi */\n}\n\n.modal-content select:focus,\n.modal-content input:focus,\n.modal-content textarea:focus {\n  border-color: #007bff; /* Colore del bordo quando è in focus */\n  outline: none; /* Rimuove il contorno blu predefinito dei browser */\n}\n\n.modal-content textarea {\n  resize: vertical; /* Permette di ridimensionare solo verticalmente */\n  height: 100px; /* Altezza predefinita per la textarea */\n}\n\n.modal-content button {\n  padding: 10px 20px;\n  border-radius: 5px;\n  border: none;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease; /* Effetto hover sui bottoni */\n  margin-right: 10px;\n}\n\n.modal-content .btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.modal-content .btn-success:hover {\n  background-color: #218838;\n  transform: translateY(-2px); /* Leggera animazione di sollevamento */\n}\n\n.modal-content .btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n\n.modal-content .btn-secondary:hover {\n  background-color: #5a6268;\n  transform: translateY(-2px);\n}\n\n.modal-content .btn {\n  min-width: 150px; /* Imposta una larghezza minima per i bottoni */\n}\n\n.modal-content .btn:focus {\n  outline: none; /* Rimuovi l'effetto di focus di default */\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  color: #007bff;\n  font-size: 0.7em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n.custom-btn {\n  display: block; /* Imposta il pulsante come blocco per permettere il centramento */\n  margin: 20px auto; /* Centra il pulsante e aggiungi un margine superiore di 20px */\n  background-color: #007bff; /* Colore di sfondo */\n  color: white; /* Colore del testo */\n  border-radius: 5px; /* Raggio dei bordi per renderlo arrotondato */\n  padding: 6px 12px; /* Ridotto il padding per rendere il pulsante più piccolo */\n  text-align: center; /* Allinea il testo al centro */\n  font-size: 14px; /* Dimensione del font più piccola */\n  max-width: 200px; /* Limita la larghezza massima del pulsante */\n  width: 100%; /* Permette di ridimensionare il pulsante in base alla larghezza del contenitore */\n}\n\n.custom-btn:hover {\n  background-color: #0056b3; /* Colore di hover per effetto */\n  cursor: pointer; /* Cambia il cursore su hover */\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}