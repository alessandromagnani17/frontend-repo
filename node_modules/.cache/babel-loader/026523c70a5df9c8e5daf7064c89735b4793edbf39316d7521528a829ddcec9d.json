{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, Transition as _Transition, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText } from \"vue\";\nconst _hoisted_1 = {\n  class: \"activity-calendar\"\n};\nconst _hoisted_2 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"modal\"\n};\nconst _hoisted_5 = {\n  class: \"modal-content\"\n};\nconst _hoisted_6 = [\"value\"];\nconst _hoisted_7 = [\"min\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Calendar = _resolveComponent(\"Calendar\");\n  const _component_DayDetails = _resolveComponent(\"DayDetails\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[13] || (_cache[13] = _createElementVNode(\"h1\", {\n    class: \"calendar\"\n  }, \"Calendario Attività\", -1 /* HOISTED */)), _createCommentVNode(\" Calendario per utente (paziente o dottore) \"), _createVNode(_component_Calendar, {\n    month: $data.month,\n    year: $data.year,\n    daysInMonth: $options.daysInMonth,\n    monthNames: $data.monthNames,\n    dayNames: $data.dayNames,\n    minDate: $data.minDate,\n    operationIcon: $data.operationIcon,\n    radiographIcon: $data.radiographIcon,\n    showDayDetails: $options.showDayDetails,\n    changeMonth: $options.changeMonth,\n    selectedDay: $data.selectedDay,\n    onUpdateSelectedDay: $options.updateSelectedDay\n  }, null, 8 /* PROPS */, [\"month\", \"year\", \"daysInMonth\", \"monthNames\", \"dayNames\", \"minDate\", \"operationIcon\", \"radiographIcon\", \"showDayDetails\", \"changeMonth\", \"selectedDay\", \"onUpdateSelectedDay\"]), _createCommentVNode(\" Dettagli del giorno selezionato \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createBlock(_component_DayDetails, {\n      key: 0,\n      selectedDay: $data.selectedDay,\n      monthNames: $data.monthNames,\n      month: $data.month,\n      year: $data.year,\n      formatDate: $options.formatDate,\n      formatTime: $options.formatTime,\n      enlargeRadiograph: $options.enlargeRadiograph\n    }, null, 8 /* PROPS */, [\"selectedDay\", \"monthNames\", \"month\", \"year\", \"formatDate\", \"formatTime\", \"enlargeRadiograph\"])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"]), _createCommentVNode(\" Modale per pianificare l'operazione (solo per dottore) \"), $data.isDoctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.openScheduleModal && $options.openScheduleModal(...args)),\n    class: \"btn btn-primary custom-btn\"\n  }, \" Pianifica Operazione \"), _createCommentVNode(\" Modale per inserire i dettagli dell'operazione \"), $data.showModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", null, \"Pianifica una nuova operazione\", -1 /* HOISTED */)), _cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    for: \"patientSelect\"\n  }, \"Seleziona un paziente:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedPatientId = $event),\n    id: \"patientSelect\",\n    class: \"form-select\"\n  }, [_cache[7] || (_cache[7] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"Seleziona un paziente\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.patients, patient => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: patient.userId,\n      value: patient.userId\n    }, _toDisplayString(patient.name) + \" \" + _toDisplayString(patient.family_name), 9 /* TEXT, PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedPatientId]]), _cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    for: \"operationDate\"\n  }, \"Data dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.operationDate = $event),\n    id: \"operationDate\",\n    min: $data.minDate\n  }, null, 8 /* PROPS */, _hoisted_7), [[_vModelText, $data.operationDate]]), _cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    for: \"operationTime\"\n  }, \"Ora dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"time\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.operationTime = $event),\n    id: \"operationTime\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.operationTime]]), _cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    for: \"description\"\n  }, \"Descrizione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.description = $event),\n    id: \"description\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.description]]), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.scheduleOperation && $options.scheduleOperation(...args)),\n    class: \"btn btn-success\"\n  }, \" Salva \"), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.closeScheduleModal && $options.closeScheduleModal(...args)),\n    class: \"btn btn-secondary\"\n  }, \" Annulla \")])])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_createVNode","_component_Calendar","month","$data","year","daysInMonth","$options","monthNames","dayNames","minDate","operationIcon","radiographIcon","showDayDetails","changeMonth","selectedDay","onUpdateSelectedDay","updateSelectedDay","_Transition","name","onBeforeEnter","beforeEnter","onEnter","enter","onLeave","leave","default","_withCtx","_createBlock","_component_DayDetails","formatDate","formatTime","enlargeRadiograph","_","isDoctor","_hoisted_3","onClick","_cache","args","openScheduleModal","showModal","_hoisted_4","_hoisted_5","for","$event","selectedPatientId","id","value","disabled","_Fragment","_renderList","patients","patient","userId","_toDisplayString","family_name","_hoisted_6","type","operationDate","min","_hoisted_7","operationTime","description","scheduleOperation","closeScheduleModal"],"sources":["C:\\Users\\Utente\\Desktop\\osteoarthritis-project\\frontend\\src\\components\\ActivityCalendar.vue"],"sourcesContent":["<template>\r\n  <div class=\"activity-calendar\">\r\n    <div class=\"calendar-container\">\r\n      <h1 class=\"calendar\">Calendario Attività</h1>\r\n\r\n      <!-- Calendario per utente (paziente o dottore) -->\r\n      <Calendar\r\n        :month=\"month\"\r\n        :year=\"year\"\r\n        :daysInMonth=\"daysInMonth\"\r\n        :monthNames=\"monthNames\"\r\n        :dayNames=\"dayNames\"\r\n        :minDate=\"minDate\"\r\n        :operationIcon=\"operationIcon\"\r\n        :radiographIcon=\"radiographIcon\"\r\n        :showDayDetails=\"showDayDetails\"\r\n        :changeMonth=\"changeMonth\"\r\n        :selectedDay=\"selectedDay\"\r\n        @update-selected-day=\"updateSelectedDay\"\r\n      />\r\n\r\n      <!-- Dettagli del giorno selezionato -->\r\n      <transition\r\n        name=\"fade\"\r\n        @before-enter=\"beforeEnter\"\r\n        @enter=\"enter\"\r\n        @leave=\"leave\"\r\n      >\r\n        <DayDetails\r\n          v-if=\"selectedDay\"\r\n          :selectedDay=\"selectedDay\"\r\n          :monthNames=\"monthNames\"\r\n          :month=\"month\"\r\n          :year=\"year\"\r\n          :formatDate=\"formatDate\"\r\n          :formatTime=\"formatTime\"\r\n          :enlargeRadiograph=\"enlargeRadiograph\"\r\n        />\r\n      </transition>\r\n\r\n      <!-- Modale per pianificare l'operazione (solo per dottore) -->\r\n      <div v-if=\"isDoctor\">\r\n        <button @click=\"openScheduleModal\" class=\"btn btn-primary custom-btn\">\r\n          Pianifica Operazione\r\n        </button>\r\n\r\n        <!-- Modale per inserire i dettagli dell'operazione -->\r\n        <div v-if=\"showModal\" class=\"modal\">\r\n          <div class=\"modal-content\">\r\n            <h2>Pianifica una nuova operazione</h2>\r\n            <label for=\"patientSelect\">Seleziona un paziente:</label>\r\n            <select\r\n              v-model=\"selectedPatientId\"\r\n              id=\"patientSelect\"\r\n              class=\"form-select\"\r\n            >\r\n              <option value=\"\" disabled>Seleziona un paziente</option>\r\n              <option\r\n                v-for=\"patient in patients\"\r\n                :key=\"patient.userId\"\r\n                :value=\"patient.userId\"\r\n              >\r\n                {{ patient.name }} {{ patient.family_name }}\r\n              </option>\r\n            </select>\r\n\r\n            <label for=\"operationDate\">Data dell'operazione:</label>\r\n            <input\r\n              type=\"date\"\r\n              v-model=\"operationDate\"\r\n              id=\"operationDate\"\r\n              :min=\"minDate\"\r\n            />\r\n\r\n            <label for=\"operationTime\">Ora dell'operazione:</label>\r\n            <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\r\n\r\n            <label for=\"description\">Descrizione:</label>\r\n            <textarea v-model=\"description\" id=\"description\"></textarea>\r\n\r\n            <div>\r\n              <button @click=\"scheduleOperation\" class=\"btn btn-success\">\r\n                Salva\r\n              </button>\r\n              <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\r\n                Annulla\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Calendar from \"./ScheduleCalendar.vue\";\r\nimport DayDetails from \"./DayDetails.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    Calendar,\r\n    DayDetails,\r\n  },\r\n  data() {\r\n    return {\r\n      loadingPrediction: false,\r\n      successMessage: \"\",\r\n      month: new Date().getMonth(), // Mese corrente\r\n      year: new Date().getFullYear(), // Anno corrente\r\n      radiographs: [], // Le radiografie caricate\r\n      operations: [],\r\n      selectedDay: null, // Giorno selezionato\r\n      monthNames: [\r\n        \"Gennaio\",\r\n        \"Febbraio\",\r\n        \"Marzo\",\r\n        \"Aprile\",\r\n        \"Maggio\",\r\n        \"Giugno\",\r\n        \"Luglio\",\r\n        \"Agosto\",\r\n        \"Settembre\",\r\n        \"Ottobre\",\r\n        \"Novembre\",\r\n        \"Dicembre\",\r\n      ],\r\n      dayNames: [\"LUN\", \"MAR\", \"MER\", \"GIO\", \"VEN\", \"SAB\", \"DOM\"],\r\n      isPatient: false, // Indica se l'utente è un paziente\r\n      isDoctor: false, // Indica se l'utente è un dottore\r\n      selectedPatient: null, // Paziente selezionato (loggato)\r\n      selectedPatientId: \"\",\r\n      patients: [], // Pazienti associati al dottore\r\n      showModal: false, // Controlla la visibilità del modale\r\n      operationDate: \"\", // Data dell'operazione\r\n      operationTime: \"\",\r\n      description: \"\", // Descrizione dell'operazione\r\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\r\n      operationIcon: require(\"@/assets/operation-icon.png\"),\r\n      radiographIcon: require(\"@/assets/radiograph-icon.png\"),\r\n    };\r\n  },\r\n  mounted() {\r\n    this.checkUserRole(); // Verifica il ruolo dell'utente\r\n    if (this.isDoctor) {\r\n      this.loadPatients(); // Carica i pazienti del dottore\r\n    }\r\n    if (this.isPatient) {\r\n      const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\r\n      if (userData && userData.userId) {\r\n        const userId = userData.userId; // Recupera lo userId\r\n        console.log(\"User ID recuperato:\", userId);\r\n        this.loadPatientData(userId); // Carica operazioni e radiografie per il paziente\r\n      } else {\r\n        console.error(\"User ID non trovato in userData.\");\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    daysInMonth() {\r\n      const days = [];\r\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\r\n      const totalDays = lastDayOfMonth.getDate();\r\n      const firstDayOfMonth = new Date(this.year, this.month, 1);\r\n      const startDayOfWeek = firstDayOfMonth.getDay(); // Giorno della settimana (0 = Domenica, 1 = Lunedì, ecc.)\r\n\r\n      // Calcola quanti giorni del mese precedente devono essere inclusi\r\n      const daysFromPrevMonth = (startDayOfWeek + 6) % 7; // Se il mese inizia di lunedì, vogliamo 0 giorni precedenti\r\n      const prevMonthLastDay = new Date(this.year, this.month, 0).getDate();\r\n\r\n      // Radiografie e operazioni per ogni giorno\r\n      const radiographsPerDay = {};\r\n      const operationsPerDay = {};\r\n\r\n      // Se l'utente è un medico\r\n      if (this.isDoctor) {\r\n        this.patients.forEach((patient) => {\r\n          if (patient.radiographs) {\r\n            patient.radiographs.forEach((radiograph) => {\r\n              const radiographDate = new Date(radiograph.date).toDateString();\r\n              if (!radiographsPerDay[radiographDate]) {\r\n                radiographsPerDay[radiographDate] = [];\r\n              }\r\n              radiographsPerDay[radiographDate].push({\r\n                ...radiograph,\r\n                patientName: `${patient.name} ${patient.family_name}`,\r\n              });\r\n            });\r\n          }\r\n\r\n          // Aggiungi le operazioni per ogni paziente\r\n          if (patient.operations) {\r\n            patient.operations.forEach((operation) => {\r\n              const operationDate = this.parseISODate(operation.operationDate);\r\n              if (operationDate !== \"Invalid Date\") {\r\n                if (!operationsPerDay[operationDate]) {\r\n                  operationsPerDay[operationDate] = [];\r\n                }\r\n                operationsPerDay[operationDate].push({\r\n                  ...operation,\r\n                  patientName: `${patient.name} ${patient.family_name}`, // Include il nome del paziente\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        // Se l'utente è un paziente, carica solo le proprie operazioni e radiografie\r\n        const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\r\n\r\n        if (this.radiographs) {\r\n          this.radiographs.forEach((radiograph) => {\r\n            const radiographDate = new Date(radiograph.date).toDateString(); // Data della radiografia\r\n            if (!radiographsPerDay[radiographDate]) {\r\n              radiographsPerDay[radiographDate] = []; // Inizializza se non esiste\r\n            }\r\n            radiographsPerDay[radiographDate].push({\r\n              ...radiograph,\r\n              patientName: `${userData.name} ${userData.family_name}`,\r\n            }); // Aggiungi radiografia alla data\r\n          });\r\n        }\r\n\r\n        if (this.operations) {\r\n          this.operations.forEach((operation) => {\r\n            const operationDate = this.parseISODate(operation.operationDate);\r\n            if (operationDate !== \"Invalid Date\") {\r\n              if (!operationsPerDay[operationDate]) {\r\n                operationsPerDay[operationDate] = [];\r\n              }\r\n              operationsPerDay[operationDate].push({\r\n                ...operation,\r\n                patientName:\r\n                  operation.patientName ||\r\n                  `${this.userName} ${this.userFamilyName}`, // Include il nome del paziente\r\n              });\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Aggiungi i giorni del mese precedente\r\n      for (let i = daysFromPrevMonth; i > 0; i--) {\r\n        const date = new Date(\r\n          this.year,\r\n          this.month - 1,\r\n          prevMonthLastDay - i + 1\r\n        );\r\n        const dayString = date.toDateString();\r\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\r\n        const operationsOnDay = operationsPerDay[dayString] || [];\r\n        days.push({\r\n          date: date.getDate(),\r\n          year: date.getFullYear(), // Aggiungi l'anno\r\n          month: date.getMonth(), // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\r\n          radiographs: radiographsOnDay,\r\n          operations: operationsOnDay,\r\n          isDisabled: true, // Per i giorni del mese precedente\r\n        });\r\n      }\r\n\r\n      // Aggiungi i giorni del mese corrente\r\n      for (let i = 1; i <= totalDays; i++) {\r\n        const date = new Date(this.year, this.month, i);\r\n        const dayString = date.toDateString();\r\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\r\n        const operationsOnDay = operationsPerDay[dayString] || [];\r\n        days.push({\r\n          date: i,\r\n          year: date.getFullYear(), // Aggiungi l'anno\r\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\r\n          radiographs: radiographsOnDay,\r\n          operations: operationsOnDay,\r\n          isDisabled: false, // Per i giorni del mese corrente\r\n        });\r\n      }\r\n\r\n      // Calcola quanti giorni del mese successivo devono essere inclusi\r\n      const remainingDays = 42 - days.length; // Un calendario completo ha 6 settimane = 42 giorni\r\n      for (let i = 1; i <= remainingDays; i++) {\r\n        const date = new Date(this.year, this.month + 1, i);\r\n        const dayString = date.toDateString();\r\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\r\n        const operationsOnDay = operationsPerDay[dayString] || [];\r\n        days.push({\r\n          date: i,\r\n          year: date.getFullYear(), // Aggiungi l'anno\r\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\r\n          radiographs: radiographsOnDay,\r\n          operations: operationsOnDay,\r\n          isDisabled: true, // Per i giorni del mese successivo\r\n        });\r\n      }\r\n\r\n      return days;\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    checkUserRole() {\r\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n      if (userData && userData.role === \"patient\") {\r\n        this.isPatient = true;\r\n        console.log(\"Ruolo utente: Paziente\");\r\n      } else if (userData && userData.role === \"doctor\") {\r\n        this.isDoctor = true;\r\n        console.log(\"Ruolo utente: Dottore\");\r\n      }\r\n    },\r\n    openScheduleModal() {\r\n      this.showModal = true;\r\n    },\r\n    // Chiude il modale\r\n    closeScheduleModal() {\r\n      this.showModal = false;\r\n      this.operationDate = \"\";\r\n      this.description = \"\";\r\n    },\r\n    updateSelectedDay(day) {\r\n      this.selectedDay = day;\r\n    },\r\n    async scheduleOperation() {\r\n      try {\r\n        // Controlla che i campi non siano vuoti\r\n        if (\r\n          !this.selectedPatientId ||\r\n          !this.operationDate ||\r\n          !this.operationTime ||\r\n          !this.description\r\n        ) {\r\n          alert(\"Data, ora o descrizione mancanti.\");\r\n          return;\r\n        }\r\n\r\n        // Recupera l'ID del dottore e del paziente\r\n        const doctorId = localStorage.getItem(\"doctorId\");\r\n\r\n        // Verifica che la data selezionata non sia nel passato\r\n        const selectedDate = new Date(this.operationDate);\r\n        const today = new Date();\r\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\r\n        if (selectedDate < today) {\r\n          alert(\"La data deve essere futura!\");\r\n          return;\r\n        }\r\n\r\n        // Combinare la data e l'ora\r\n        const formattedDate = this.combineDateAndTime(\r\n          this.operationDate,\r\n          this.operationTime\r\n        );\r\n\r\n        // Chiamata al backend per salvare l'operazione\r\n        const response = await fetch(\"/api/operations\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            doctorId,\r\n            patientId: this.selectedPatientId,\r\n            operationDate: formattedDate, // Invio la data + ora combinata\r\n            description: this.description,\r\n            createdAt: new Date().toISOString(), // Timestamp di creazione\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const error = await response.json();\r\n          throw new Error(\r\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\r\n          );\r\n        }\r\n\r\n        await response.json();\r\n        alert(\"Operazione pianificata con successo!\");\r\n\r\n        // Dopo che l'operazione è stata pianificata, invia una notifica al paziente\r\n        await this.sendNotificationToPatient();\r\n\r\n        // Mostra il calendario delle attività\r\n        this.showActivityCalendar();\r\n\r\n        // Chiudi il modal\r\n        this.closeScheduleModal();\r\n      } catch (error) {\r\n        console.error(\r\n          \"Errore durante la pianificazione dell'operazione:\",\r\n          error\r\n        );\r\n        alert(\"Errore: \" + error.message);\r\n      }\r\n    },\r\n\r\n    // Aggiungi questa funzione per inviare la notifica\r\n    async sendNotificationToPatient() {\r\n      try {\r\n        if (!this.operationDate || !this.operationTime || !this.description) {\r\n          alert(\r\n            \"Assicurati di aver inserito tutti i dettagli dell'operazione.\"\r\n          );\r\n          return;\r\n        }\r\n\r\n        // Estrae solo la parte dell'ora e dei minuti per `time`\r\n        const notificationTime = this.operationTime; // Già in formato HH:mm\r\n\r\n        // Crea il messaggio della notifica usando le informazioni dell'operazione\r\n        const notificationMessage = `Una nuova operazione è stata pianificata per te!`;\r\n\r\n        // Aggiunge la data e ora di invio della notifica\r\n        const sentAt = new Date().toISOString(); // Data e ora corrente in formato ISO 8601\r\n\r\n        // Chiamata al backend per inviare la notifica al paziente selezionato\r\n        const response = await fetch(\"/api/notifications\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            patientId: this.selectedPatientId,\r\n            message: notificationMessage,\r\n            date: this.operationDate,\r\n            time: notificationTime,\r\n            sentAt, // Aggiunge l'attributo sentAt alla richiesta\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const error = await response.json();\r\n          throw new Error(error.message || \"Errore nell'invio della notifica.\");\r\n        }\r\n\r\n        alert(\"Notifica inviata al paziente.\");\r\n      } catch (error) {\r\n        console.error(\"Errore nell'invio della notifica:\", error);\r\n        alert(\"Errore nell'invio della notifica.\");\r\n      }\r\n    },\r\n\r\n    parseISODate(isoString) {\r\n      try {\r\n        if (!isoString) {\r\n          throw new Error(\"La stringa della data è undefined o vuota\");\r\n        }\r\n        const date = new Date(isoString);\r\n        if (isNaN(date)) {\r\n          throw new Error(\"Formato della data non valido\");\r\n        }\r\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\r\n      } catch (error) {\r\n        console.error(\r\n          `DEBUG: Errore nella conversione della data ISO \"${isoString}\":`,\r\n          error\r\n        );\r\n        return \"Invalid Date\";\r\n      }\r\n    },\r\n\r\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\r\n    combineDateAndTime(date, time) {\r\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\r\n    },\r\n\r\n    // Funzione per ottenere la data minima per l'input (oggi)\r\n    getMinDate() {\r\n      const today = new Date();\r\n      const yyyy = today.getFullYear();\r\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\r\n      const dd = today.getDate().toString().padStart(2, \"0\");\r\n      return `${yyyy}-${mm}-${dd}`;\r\n    },\r\n\r\n    // Chiude il modal\r\n    closeModal() {\r\n      this.showModal = false;\r\n    },\r\n\r\n    // Mostra il calendario delle attività\r\n    showActivityCalendar() {\r\n      // Logica per visualizzare il calendario\r\n      this.selectedDay = null; // Resetta la selezione del giorno\r\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\r\n    },\r\n\r\n    // Modifica per caricare i pazienti (solo per i medici)\r\n    async loadPatients() {\r\n      const doctorId = localStorage.getItem(\"doctorId\");\r\n      if (doctorId) {\r\n        try {\r\n          const response = await fetch(`/api/${doctorId}/patients`);\r\n          const data = await response.json();\r\n          this.patients = data;\r\n\r\n          // Carica i dati di tutti i pazienti in batch\r\n          await this.loadAllPatientData();\r\n        } catch (error) {\r\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\r\n        }\r\n      }\r\n    },\r\n\r\n    // Nuovo metodo per caricare i dati in batch\r\n    async loadAllPatientData() {\r\n      const batchPromises = this.patients.map((patient) =>\r\n        this.loadPatientData(patient.userId)\r\n      );\r\n\r\n      // Usa Promise.allSettled per evitare errori bloccanti\r\n      const results = await Promise.allSettled(batchPromises);\r\n\r\n      // Log dei risultati per il debug\r\n      results.forEach((result, index) => {\r\n        if (result.status === \"fulfilled\") {\r\n          console.log(\r\n            `Dati caricati per paziente ${this.patients[index].userId}`\r\n          );\r\n        } else {\r\n          console.error(\r\n            `Errore nel caricamento dei dati per paziente ${this.patients[index].userId}:`,\r\n            result.reason\r\n          );\r\n        }\r\n      });\r\n    },\r\n\r\n    // Funzione generica per caricare le operazioni e le radiografie\r\n    async loadPatientData(patientId) {\r\n      try {\r\n        // Carica le operazioni e le radiografie in parallelo\r\n        console.log(\"PAATIENTINDU: \", patientId);\r\n        const [operationsResponse, radiographsResponse, patientResponse] =\r\n          await Promise.all([\r\n            fetch(`/api/patients/${patientId}/operations`),\r\n            fetch(`/api/patients/${patientId}/radiographs`),\r\n            fetch(`/api/get_user/${patientId}`), // Nuova chiamata per recuperare i dettagli del paziente\r\n          ]);\r\n\r\n        // Controlla se tutte le risposte sono valide\r\n        if (operationsResponse.ok) {\r\n          const operationsData = await operationsResponse.json();\r\n\r\n          // Recupera il nome e il cognome del paziente\r\n          if (patientResponse.ok) {\r\n            const patientData = await patientResponse.json();\r\n            operationsData.forEach((operation) => {\r\n              operation.patientName = `${patientData.name} ${patientData.family_name}`;\r\n            });\r\n          }\r\n\r\n          console.log(\"Operazioni: \", operationsData);\r\n          this.handleLoadedData(\"operations\", patientId, operationsData);\r\n        } else {\r\n          console.error(\"Errore nel recupero delle operazioni\");\r\n        }\r\n\r\n        if (radiographsResponse.ok) {\r\n          const radiographsData = await radiographsResponse.json();\r\n          console.log(\"Radiografie: \", radiographsData);\r\n          this.handleLoadedData(\"radiographs\", patientId, radiographsData);\r\n        } else {\r\n          console.error(\"Errore nel recupero delle radiografie\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Errore di connessione al server:\", error);\r\n      }\r\n    },\r\n\r\n    // Funzione per gestire i dati caricati (operazioni o radiografie)\r\n    handleLoadedData(type, patientId, data) {\r\n      // Se l'utente è un medico, aggiorna la lista dei pazienti\r\n      if (this.isDoctor) {\r\n        const patient = this.patients.find((p) => p.userId === patientId);\r\n        if (patient) {\r\n          patient[type] = data; // Aggiungi le operazioni o radiografie al paziente\r\n          console.log(\r\n            `${\r\n              type.charAt(0).toUpperCase() + type.slice(1)\r\n            } aggiunti al paziente:`,\r\n            patient[type]\r\n          );\r\n        }\r\n      } else {\r\n        // Se l'utente è un paziente, aggiorna direttamente il proprio profilo\r\n        this[type] = data; // Aggiungi le operazioni o radiografie al profilo del paziente\r\n        console.log(\r\n          `${\r\n            type.charAt(0).toUpperCase() + type.slice(1)\r\n          } aggiunti al profilo del paziente:`,\r\n          this[type]\r\n        );\r\n      }\r\n    },\r\n\r\n    refreshCalendar() {\r\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\r\n    },\r\n\r\n    showDayDetails(day) {\r\n      if (this.selectedDay && this.selectedDay.date === day.date) {\r\n        this.selectedDay = null;\r\n      } else {\r\n        this.selectedDay = day;\r\n      }\r\n      console.log(`Giorno selezionato: ${day.date}`);\r\n    },\r\n\r\n    formatDate(dateTime) {\r\n      const date = new Date(dateTime);\r\n      return date.toLocaleDateString(\"it-IT\"); // Mostra solo la data in formato italiano\r\n    },\r\n    formatTime(dateTime) {\r\n      const date = new Date(dateTime);\r\n      return date.toLocaleTimeString(\"it-IT\", {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      }); // Mostra solo l'ora in formato 24 ore\r\n    },\r\n\r\n    enlargeRadiograph(url) {\r\n      this.modalImageUrl = url;\r\n      this.isModalOpen = true;\r\n    },\r\n\r\n    changeMonth(direction) {\r\n      if (direction === 1) {\r\n        if (this.month === 11) {\r\n          this.month = 0;\r\n          this.year++;\r\n        } else {\r\n          this.month++;\r\n        }\r\n      } else {\r\n        if (this.month === 0) {\r\n          this.month = 11;\r\n          this.year--;\r\n        } else {\r\n          this.month--;\r\n        }\r\n      }\r\n    },\r\n    // Animazioni di transizione\r\n    beforeEnter(el) {\r\n      el.style.opacity = 0;\r\n    },\r\n    enter(el, done) {\r\n      el.offsetHeight; // Trigger reflow\r\n      el.style.transition = \"opacity 0.5s ease\";\r\n      el.style.opacity = 1;\r\n      done();\r\n    },\r\n    leave(el, done) {\r\n      el.style.transition = \"opacity 0.5s ease\";\r\n      el.style.opacity = 0;\r\n      done();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.calendar-container {\r\n  max-width: 100%;\r\n  padding: 40px;\r\n  border-radius: 10px;\r\n  background: #ffffff;\r\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh1.calendar {\r\n  font-size: 18px;\r\n  font-family: inherit;\r\n  font-weight: normal;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 999;\r\n}\r\n\r\n.modal-content {\r\n  background: #fff;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  width: 500px; /* Aumentiamo la larghezza del modale */\r\n  text-align: left;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.modal-content h2 {\r\n  font-size: 1.2em; /* Aumentiamo leggermente il font per il titolo */\r\n  margin-bottom: 15px;\r\n  color: #333;\r\n  font-weight: bold;\r\n}\r\n\r\n.modal-content label {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  color: #555;\r\n  font-weight: 600;\r\n  font-size: 0.85em; /* Ridotto per le etichette */\r\n}\r\n\r\n.modal-content select,\r\n.modal-content input,\r\n.modal-content textarea {\r\n  width: 100%;\r\n  padding: 4px 8px; /* Ridotto ulteriormente il padding dei campi */\r\n  margin-bottom: 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px; /* Border-radius più sottile */\r\n  font-size: 0.75em; /* Ridotto ulteriormente la dimensione del font */\r\n  box-sizing: border-box;\r\n  transition: border 0.3s ease;\r\n}\r\n\r\n.modal-content select:focus,\r\n.modal-content input:focus,\r\n.modal-content textarea:focus {\r\n  border-color: #007bff;\r\n  outline: none;\r\n}\r\n\r\n.modal-content textarea {\r\n  resize: vertical;\r\n  height: 60px; /* Ancora più piccola la textarea */\r\n}\r\n\r\n.modal-content button {\r\n  padding: 6px 12px; /* Ridotto il padding dei pulsanti */\r\n  border-radius: 4px;\r\n  border: none;\r\n  font-size: 12px; /* Ridotto ulteriormente la dimensione dei pulsanti */\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease, transform 0.3s ease;\r\n  margin-right: 6px;\r\n}\r\n\r\n.modal-content .btn-success {\r\n  background-color: #28a745;\r\n  color: white;\r\n}\r\n\r\n.modal-content .btn-success:hover {\r\n  background-color: #218838;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.modal-content .btn-secondary {\r\n  background-color: #6c757d;\r\n  color: white;\r\n}\r\n\r\n.modal-content .btn-secondary:hover {\r\n  background-color: #5a6268;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.modal-content .btn {\r\n  min-width: 90px; /* Ridotto il minimo larghezza dei pulsanti */\r\n}\r\n\r\n.modal-content .btn:focus {\r\n  outline: none;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n  background: none;\r\n  border: none;\r\n  color: #007bff;\r\n  font-size: 0.7em;\r\n}\r\n\r\nbutton:hover {\r\n  color: #007bff;\r\n}\r\n\r\n.custom-btn {\r\n  display: block; /* Imposta il pulsante come blocco per permettere il centramento */\r\n  margin: 20px auto; /* Centra il pulsante e aggiungi un margine superiore di 20px */\r\n  background-color: #007bff; /* Colore di sfondo */\r\n  color: white; /* Colore del testo */\r\n  border-radius: 5px; /* Raggio dei bordi per renderlo arrotondato */\r\n  padding: 6px 12px; /* Ridotto il padding per rendere il pulsante più piccolo */\r\n  text-align: center; /* Allinea il testo al centro */\r\n  font-size: 14px; /* Dimensione del font più piccola */\r\n  max-width: 200px; /* Limita la larghezza massima del pulsante */\r\n  width: 100%; /* Permette di ridimensionare il pulsante in base alla larghezza del contenitore */\r\n}\r\n\r\n.custom-btn:hover {\r\n  background-color: #0056b3; /* Colore di hover per effetto */\r\n  color: white;\r\n  cursor: pointer; /* Cambia il cursore su hover */\r\n}\r\n\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: opacity 0.5s ease;\r\n}\r\n\r\n.fade-enter,\r\n.fade-leave-to {\r\n  opacity: 0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}