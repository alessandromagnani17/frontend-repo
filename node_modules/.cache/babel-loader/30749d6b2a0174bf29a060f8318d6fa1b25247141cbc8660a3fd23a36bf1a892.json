{"ast":null,"code":"import { parse, format, isValid, isBefore, isAfter, subYears } from \"date-fns\";\nimport { fetchDoctors, fetchPatients, registerUser } from \"@/services/api-service\";\nexport default {\n  data() {\n    return {\n      currentStep: 1,\n      loading: false,\n      showPassword: false,\n      showConfirmPassword: false,\n      showPasswordError: false,\n      isHover: false,\n      showDisabledIcon: false,\n      errors: {},\n      confirmPasswordTouched: false,\n      passwordInputTouched: false,\n      isDoctorRole: false,\n      emailError: false,\n      emailErrorMessage: \"\",\n      dateErrorMessage: \"\",\n      minDate: \"1900-01-01\",\n      // Data minima: 1 gennaio 1900\n      maxDate: this.calculateMaxDate(),\n      isValid: false,\n      doctors: [],\n      patients: [],\n      form: {\n        nome: \"\",\n        cognome: \"\",\n        gender: \"\",\n        data: \"\",\n        address: \"\",\n        cap_code: \"\",\n        tax_code: \"\",\n        telefono: \"\",\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        role: \"\",\n        doctorID: \"\"\n      }\n    };\n  },\n  created() {\n    this.role = localStorage.getItem(\"userRole\") || \"\";\n    this.form.role = this.role;\n    this.isDoctorRole = this.role === \"doctor\"; // Imposta isDoctorRole in base al ruolo\n\n    if (this.isDoctorRole) {\n      this.form.role = \"doctor\";\n    } else {\n      this.form.role = \"patient\";\n    }\n\n    // Aspetta che entrambe le funzioni siano completate\n    Promise.all([this.loadDoctors(), this.loadPatients()]).then(() => {\n      this.checkEmail(); // Chiama checkEmail dopo aver recuperato i dati\n    }).catch(error => {\n      console.error(\"Errore nel recupero dei dottori o pazienti:\", error);\n    });\n  },\n  computed: {\n    // Computed property per la validazione della password\n    isPasswordValid() {\n      const password = this.form.password || \"\";\n      const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/;\n      return regex.test(password);\n    }\n  },\n  methods: {\n    goToHome() {\n      this.currentStep = 1;\n      this.form = {\n        nome: \"\",\n        cognome: \"\",\n        gender: \"\",\n        data: \"\",\n        address: \"\",\n        cap_code: \"\",\n        tax_code: \"\",\n        telefono: \"\",\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n      };\n      this.$router.push(\"/welcome\");\n    },\n    async loadDoctors() {\n      console.log(\"Caricamento dei dottori...\");\n      try {\n        this.doctors = await fetchDoctors();\n        console.log(\"Dottori caricati:\", this.doctors);\n      } catch (error) {\n        console.error(\"Errore nel caricamento dei dottori:\", error);\n      }\n    },\n    async loadPatients() {\n      console.log(\"Caricamento dei pazienti...\");\n      try {\n        this.patients = await fetchPatients();\n        console.log(\"Pazienti caricati:\", this.patients);\n      } catch (error) {\n        console.error(\"Errore nel caricamento dei pazienti:\", error);\n      }\n    },\n    checkEmail() {\n      console.log(\"Dottori:\", this.doctors);\n      console.log(\"Pazienti:\", this.patients);\n\n      // Estrai tutte le email dai dottori e dai pazienti\n      const allEmails = [...this.doctors.map(doctor => doctor.email), ...this.patients.map(patient => patient.email)];\n\n      // Controlla se l'email esiste già\n      const emailExists = allEmails.includes(this.form.email);\n      console.log(\"Esiste:? \" + emailExists);\n\n      // Aggiorna gli stati dell'errore in base all'esistenza dell'email\n      if (emailExists) {\n        this.emailError = true;\n        this.emailErrorMessage = \"L'email inserita è già in uso\";\n      } else {\n        this.emailError = false;\n        this.emailErrorMessage = \"\";\n      }\n    },\n    correctDate() {\n      if (!this.form.data) return; // Se non c'è una data, esci\n\n      const inputDate = this.form.data;\n      const parsedDate = parse(inputDate, \"yyyy-MM-dd\", new Date());\n\n      // Definisci il range di date valide\n      const minDate = new Date(1900, 0, 1); // 1 gennaio 1900\n      const maxDate = subYears(new Date(), 18); // 18 anni fa\n\n      // Resetta il messaggio di errore\n      this.dateErrorMessage = \"\";\n\n      // Controlla se la data è valida e rientra nel range richiesto\n      if (isValid(parsedDate) && isBefore(parsedDate, maxDate) && isAfter(parsedDate, minDate)) {\n        // Se valida, formatta la data\n        this.form.data = format(parsedDate, \"yyyy-MM-dd\");\n      } else {\n        // Gestisci date non valide o restrizioni sull'età\n        this.dateErrorMessage = \"Devi avere almeno 18 anni e la data deve essere compresa tra il 1900 e oggi.\";\n      }\n    },\n    goToNextStep() {\n      if (this.isStepValid(this.currentStep)) {\n        if (this.currentStep === 3) {\n          this.onSubmit();\n        } else {\n          this.currentStep++;\n        }\n      }\n    },\n    goToPreviousStep() {\n      this.currentStep--;\n    },\n    toggleShowPassword() {\n      this.showPassword = !this.showPassword;\n    },\n    toggleShowConfirmPassword() {\n      this.showConfirmPassword = !this.showConfirmPassword;\n    },\n    async onSubmit() {\n      if (this.isStepValid(3)) {\n        this.loading = true;\n        this.errors = {};\n        try {\n          const {\n            email,\n            password,\n            ...userData\n          } = this.form;\n          const payload = {\n            email,\n            password,\n            ...userData,\n            doctorID: this.isDoctorRole ? userData.doctorID : this.form.doctorID\n          };\n          const response = await registerUser(payload);\n          console.log(\"Response dal backend:\", response);\n          this.loading = false;\n          this.currentStep = 4;\n        } catch (error) {\n          console.error(\"Errore nella registrazione:\", error);\n          if (error.response) {\n            console.error(\"Dati risposta:\", error.response.data);\n            this.errors.general = error.response.data.error || \"Registrazione fallita\";\n          } else {\n            this.errors.general = error.message;\n          }\n          alert(\"Errore nella registrazione: \" + this.errors.general);\n          this.loading = false;\n        }\n      }\n    },\n    isStepValid(step) {\n      if (step === 1) {\n        return this.form.nome && this.form.cognome && this.form.gender && this.isValid;\n      } else if (step === 2) {\n        return this.form.address && this.form.cap_code && this.form.tax_code && this.form.telefono;\n      } else if (step === 3) {\n        return this.form.username && this.form.email && this.isPasswordValid && this.confirmPasswordTouched && this.form.password === this.form.confirmPassword;\n      }\n      return false;\n    },\n    calculateMaxDate() {\n      const today = new Date();\n      const year = today.getFullYear() - 18; // 18 anni fa\n      const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Aggiusta il mese (gennaio è 0)\n      const day = String(today.getDate()).padStart(2, \"0\"); // Aggiusta il giorno\n      return `${year}-${month}-${day}`;\n    },\n    validateDate() {\n      const today = new Date();\n      const selectedDate = new Date(this.form.data);\n\n      // Se l'input è vuoto, mostra l'errore\n      if (!this.form.data) {\n        this.dateErrorMessage = \"Il campo data di nascita è obbligatorio.\";\n        this.isValid = false;\n        return;\n      }\n\n      // Limita la data tra il 1900 e 18 anni fa\n      const minAllowedDate = new Date(1900, 0, 1);\n      const maxAllowedDate = new Date(today.getFullYear() - 18, today.getMonth(), today.getDate());\n      if (selectedDate < minAllowedDate || selectedDate > maxAllowedDate) {\n        this.dateErrorMessage = \"La data deve essere compresa tra il 1900 e 18 anni fa.\";\n        this.isValid = false;\n      } else {\n        this.dateErrorMessage = \"\";\n        this.isValid = true;\n      }\n    }\n  }\n};","map":{"version":3,"names":["parse","format","isValid","isBefore","isAfter","subYears","fetchDoctors","fetchPatients","registerUser","data","currentStep","loading","showPassword","showConfirmPassword","showPasswordError","isHover","showDisabledIcon","errors","confirmPasswordTouched","passwordInputTouched","isDoctorRole","emailError","emailErrorMessage","dateErrorMessage","minDate","maxDate","calculateMaxDate","doctors","patients","form","nome","cognome","gender","address","cap_code","tax_code","telefono","username","email","password","confirmPassword","role","doctorID","created","localStorage","getItem","Promise","all","loadDoctors","loadPatients","then","checkEmail","catch","error","console","computed","isPasswordValid","regex","test","methods","goToHome","$router","push","log","allEmails","map","doctor","patient","emailExists","includes","correctDate","inputDate","parsedDate","Date","goToNextStep","isStepValid","onSubmit","goToPreviousStep","toggleShowPassword","toggleShowConfirmPassword","userData","payload","response","general","message","alert","step","today","year","getFullYear","month","String","getMonth","padStart","day","getDate","validateDate","selectedDate","minAllowedDate","maxAllowedDate"],"sources":["C:\\Users\\Utente\\Desktop\\osteoarthritis-project\\frontend\\src\\components\\UserRegister.vue"],"sourcesContent":["<template>\n  <div class=\"register\">\n    <div class=\"container mt-5\">\n      <div class=\"header\">\n        <button\n          v-if=\"currentStep > 1\"\n          class=\"back-button\"\n          @click=\"goToPreviousStep\"\n        >\n          <img src=\"@/assets/back-icon.svg\" alt=\"Indietro\" class=\"back-icon\" />\n        </button>\n      </div>\n\n      <span class=\"step-title\" v-if=\"currentStep < 4\"\n        >Passaggio {{ currentStep }} di 4</span\n      >\n      <h2 class=\"mb-4\" v-if=\"currentStep < 4\">\n        Crea un Account {{ role === \"patient\" ? \"paziente\" : \"dottore\" }}\n      </h2>\n\n      <form @submit.prevent=\"onSubmit\">\n        <!-- Step 1: Dati Anagrafici -->\n        <div v-if=\"currentStep === 1\">\n          <div class=\"mb-3\">\n            <label for=\"nome\" class=\"form-label\">Nome</label>\n            <input\n              id=\"nome\"\n              v-model=\"form.nome\"\n              type=\"text\"\n              class=\"form-control\"\n              style=\"text-transform: uppercase\"\n              required\n            />\n          </div>\n\n          <div class=\"mb-3\">\n            <label for=\"cognome\" class=\"form-label\">Cognome</label>\n            <input\n              id=\"cognome\"\n              v-model=\"form.cognome\"\n              type=\"text\"\n              class=\"form-control\"\n              style=\"text-transform: uppercase\"\n              required\n            />\n          </div>\n\n          <div class=\"mb-3\">\n            <label for=\"gender\" class=\"form-label\">Genere</label>\n            <select\n              id=\"gender\"\n              v-model=\"form.gender\"\n              class=\"form-control\"\n              required\n            >\n              <option value=\"Male\">MASCHIO</option>\n              <option value=\"Female\">FEMMINA</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label for=\"data\" class=\"form-label\">Data di Nascita</label>\n            <input\n              id=\"data\"\n              v-model=\"form.data\"\n              type=\"date\"\n              class=\"form-control\"\n              :class=\"{ 'is-invalid': dateErrorMessage }\"\n              :max=\"maxDate\"\n              :min=\"minDate\"\n              @change=\"validateDate\"\n              required\n            />\n            <div v-if=\"dateErrorMessage\" class=\"invalid-feedback\">\n              {{ dateErrorMessage }}\n            </div>\n          </div>\n        </div>\n\n        <!-- Step 2: Dati di Contatto -->\n        <div v-if=\"currentStep === 2\">\n          <div class=\"mb-3\">\n            <label for=\"address\" class=\"form-label\">Indirizzo</label>\n            <input\n              id=\"address\"\n              v-model=\"form.address\"\n              type=\"text\"\n              class=\"form-control\"\n              style=\"text-transform: uppercase\"\n              required\n              placeholder=\"(es. Via Roma 1)\"\n            />\n          </div>\n\n          <div class=\"mb-3\">\n            <label for=\"cap_code\" class=\"form-label\">CAP</label>\n            <input\n              id=\"cap_code\"\n              v-model=\"form.cap_code\"\n              type=\"number\"\n              class=\"form-control\"\n              required\n            />\n          </div>\n\n          <div class=\"mb-3\">\n            <label for=\"tax_code\" class=\"form-label\">Codice Fiscale</label>\n            <input\n              id=\"tax_code\"\n              v-model=\"form.tax_code\"\n              type=\"text\"\n              class=\"form-control\"\n              style=\"text-transform: uppercase\"\n              required\n            />\n          </div>\n\n          <div class=\"mb-3\">\n            <label for=\"telefono\" class=\"form-label\">Numero di Telefono</label>\n            <input\n              id=\"telefono\"\n              v-model=\"form.telefono\"\n              type=\"tel\"\n              class=\"form-control\"\n              required\n              placeholder=\"(es. +391234567890)\"\n            />\n          </div>\n        </div>\n\n        <!-- Step 3: Credenziali -->\n        <div v-if=\"currentStep === 3\">\n          <div v-if=\"currentStep === 3 && isDoctorRole\">\n            <div class=\"mb-3\">\n              <label for=\"doctorID\" class=\"form-label\">Doctor ID</label>\n              <input\n                id=\"doctorID\"\n                v-model=\"form.doctorID\"\n                type=\"text\"\n                class=\"form-control\"\n                required\n              />\n            </div>\n          </div>\n\n          <div v-if=\"currentStep === 3 && !isDoctorRole\">\n            <div class=\"mb-3\">\n              <label for=\"doctorID\" class=\"form-label\"\n                >Seleziona il dottore</label\n              >\n              <select\n                id=\"doctorID\"\n                v-model=\"form.doctorID\"\n                class=\"form-control\"\n                required\n              >\n                <option value=\"\" disabled>Seleziona un dottore</option>\n                <option\n                  v-for=\"doctor in doctors\"\n                  :key=\"doctor.doctorID\"\n                  :value=\"doctor.doctorID\"\n                >\n                  {{ doctor.name }} {{ doctor.family_name }} (ID:\n                  {{ doctor.doctorID }})\n                </option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"mb-3\">\n            <label for=\"username\" class=\"form-label\">Username</label>\n            <input\n              id=\"username\"\n              v-model=\"form.username\"\n              type=\"text\"\n              class=\"form-control\"\n              required\n            />\n          </div>\n\n          <div class=\"mb-3\">\n            <label for=\"email\" class=\"form-label\">Email</label>\n            <input\n              id=\"email\"\n              v-model=\"form.email\"\n              type=\"email\"\n              class=\"form-control\"\n              :class=\"{ 'is-invalid': emailError }\"\n              required\n              @blur=\"checkEmail\"\n            />\n            <div v-if=\"emailError\" class=\"text-danger mt-1\">\n              {{ emailErrorMessage }}\n            </div>\n          </div>\n\n          <div class=\"mb-3\">\n            <label for=\"password\" class=\"form-label\"\n              >Password\n              <span\n                class=\"info-icon\"\n                title=\"Requisiti per la password: min 8 caratteri, almeno una maiuscola, una minuscola un numero e un carattere speciale.\"\n              >\n                <img\n                  src=\"@/assets/info-icon.svg\"\n                  alt=\"Info\"\n                  class=\"info-image\"\n                />\n              </span>\n            </label>\n            <div class=\"input-group\">\n              <input\n                id=\"password\"\n                v-model=\"form.password\"\n                :type=\"showPassword ? 'text' : 'password'\"\n                class=\"form-control password-input\"\n                :class=\"{\n                  'is-invalid': !isPasswordValid && passwordInputTouched,\n                }\"\n                required\n                @input=\"passwordInputTouched = true\"\n                @paste.prevent\n              />\n              <button\n                type=\"button\"\n                class=\"btn eye-button\"\n                @click=\"toggleShowPassword\"\n              >\n                <img\n                  :src=\"\n                    showPassword\n                      ? require('@/assets/eye-off.svg')\n                      : require('@/assets/eye-on.svg')\n                  \"\n                  alt=\"Toggle Password Visibility\"\n                  class=\"eye-icon\"\n                />\n              </button>\n            </div>\n            <div\n              v-if=\"passwordInputTouched && !isPasswordValid\"\n              class=\"text-danger mt-1\"\n            >\n              La password deve contenere almeno: un numero, una lettera\n              maiuscola, una lettera minuscola e un carattere speciale ed essere\n              lunga almeno 8 caratteri.\n            </div>\n          </div>\n\n          <div class=\"mb-3\">\n            <label for=\"confirmPassword\" class=\"form-label\"\n              >Conferma Password</label\n            >\n            <div class=\"input-group\">\n              <input\n                id=\"confirmPassword\"\n                v-model=\"form.confirmPassword\"\n                :type=\"showConfirmPassword ? 'text' : 'password'\"\n                class=\"form-control password-input\"\n                :class=\"{ 'is-invalid': showPasswordError }\"\n                required\n                @input=\"confirmPasswordTouched = true\"\n                @paste.prevent\n              />\n              <button\n                type=\"button\"\n                class=\"btn eye-button\"\n                @click=\"toggleShowConfirmPassword\"\n              >\n                <img\n                  :src=\"\n                    showConfirmPassword\n                      ? require('@/assets/eye-off.svg')\n                      : require('@/assets/eye-on.svg')\n                  \"\n                  alt=\"Toggle Password Visibility\"\n                  class=\"eye-icon\"\n                />\n              </button>\n            </div>\n            <div\n              v-if=\"\n                confirmPasswordTouched && form.password !== form.confirmPassword\n              \"\n              class=\"text-danger mt-1\"\n            >\n              Le password non corrispondono.\n            </div>\n          </div>\n        </div>\n\n        <!-- Bottone di avanzamento o submit -->\n        <div v-if=\"currentStep < 3\">\n          <button\n            type=\"button\"\n            class=\"btn btn-primary btn-next\"\n            :disabled=\"!isStepValid(currentStep)\"\n            @click=\"goToNextStep\"\n            @mouseover=\"isHover = true\"\n            @mouseleave=\"isHover = false\"\n            @mouseenter=\"showDisabledIcon = !isStepValid(currentStep)\"\n          >\n            Avanti\n            <span\n              v-if=\"!isStepValid(currentStep) && isHover\"\n              class=\"disabled-icon\"\n            >\n              <img\n                src=\"@/assets/prohibition-icon.svg\"\n                alt=\"Non disponibile\"\n                class=\"prohibition-icon\"\n              />\n            </span>\n          </button>\n        </div>\n\n        <!-- Submit button (Step 3) -->\n        <div v-if=\"currentStep === 3\">\n          <button\n            type=\"submit\"\n            class=\"btn btn-primary btn-next\"\n            :disabled=\"loading || !isStepValid(currentStep) || emailError\"\n          >\n            <span v-if=\"loading\">Registrazione...</span>\n            <span v-else>Registrati</span>\n          </button>\n\n          <!-- Error message -->\n          <div v-if=\"errors.general\" class=\"invalid-feedback mt-3\">\n            {{ errors.general }}\n          </div>\n        </div>\n\n        <div v-if=\"currentStep === 4\">\n          <h2 class=\"mb-4\" style=\"font-weight: bold\">\n            Registrazione avvenuta con successo!\n          </h2>\n          <p>Controlla la tua email per verificare il tuo account.</p>\n          <button class=\"btn btn-primary btn-next\" @click=\"goToHome\">\n            Esegui il login\n          </button>\n        </div>\n      </form>\n    </div>\n\n    <!-- Loading overlay -->\n    <div v-if=\"loading\" class=\"loading-overlay\">\n      <div class=\"loading-icon\">\n        <img src=\"@/assets/loading-icon.svg\" alt=\"Loading...\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { parse, format, isValid, isBefore, isAfter, subYears } from \"date-fns\";\nimport {\n  fetchDoctors,\n  fetchPatients,\n  registerUser,\n} from \"@/services/api-service\";\n\nexport default {\n  data() {\n    return {\n      currentStep: 1,\n      loading: false,\n      showPassword: false,\n      showConfirmPassword: false,\n      showPasswordError: false,\n      isHover: false,\n      showDisabledIcon: false,\n      errors: {},\n      confirmPasswordTouched: false,\n      passwordInputTouched: false,\n      isDoctorRole: false,\n      emailError: false,\n      emailErrorMessage: \"\",\n      dateErrorMessage: \"\",\n      minDate: \"1900-01-01\", // Data minima: 1 gennaio 1900\n      maxDate: this.calculateMaxDate(),\n      isValid: false,\n      doctors: [],\n      patients: [],\n      form: {\n        nome: \"\",\n        cognome: \"\",\n        gender: \"\",\n        data: \"\",\n        address: \"\",\n        cap_code: \"\",\n        tax_code: \"\",\n        telefono: \"\",\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        role: \"\",\n        doctorID: \"\",\n      },\n    };\n  },\n  created() {\n    this.role = localStorage.getItem(\"userRole\") || \"\";\n    this.form.role = this.role;\n    this.isDoctorRole = this.role === \"doctor\"; // Imposta isDoctorRole in base al ruolo\n\n    if (this.isDoctorRole) {\n      this.form.role = \"doctor\";\n    } else {\n      this.form.role = \"patient\";\n    }\n\n    // Aspetta che entrambe le funzioni siano completate\n    Promise.all([this.loadDoctors(), this.loadPatients()])\n      .then(() => {\n        this.checkEmail(); // Chiama checkEmail dopo aver recuperato i dati\n      })\n      .catch((error) => {\n        console.error(\"Errore nel recupero dei dottori o pazienti:\", error);\n      });\n  },\n  computed: {\n    // Computed property per la validazione della password\n    isPasswordValid() {\n      const password = this.form.password || \"\";\n      const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/;\n      return regex.test(password);\n    },\n  },\n  methods: {\n    goToHome() {\n      this.currentStep = 1;\n      this.form = {\n        nome: \"\",\n        cognome: \"\",\n        gender: \"\",\n        data: \"\",\n        address: \"\",\n        cap_code: \"\",\n        tax_code: \"\",\n        telefono: \"\",\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n      };\n\n      this.$router.push(\"/welcome\");\n    },\n    async loadDoctors() {\n      console.log(\"Caricamento dei dottori...\");\n      try {\n        this.doctors = await fetchDoctors();\n        console.log(\"Dottori caricati:\", this.doctors);\n      } catch (error) {\n        console.error(\"Errore nel caricamento dei dottori:\", error);\n      }\n    },\n    async loadPatients() {\n      console.log(\"Caricamento dei pazienti...\");\n      try {\n        this.patients = await fetchPatients();\n        console.log(\"Pazienti caricati:\", this.patients);\n      } catch (error) {\n        console.error(\"Errore nel caricamento dei pazienti:\", error);\n      }\n    },\n    checkEmail() {\n      console.log(\"Dottori:\", this.doctors);\n      console.log(\"Pazienti:\", this.patients);\n\n      // Estrai tutte le email dai dottori e dai pazienti\n      const allEmails = [\n        ...this.doctors.map((doctor) => doctor.email),\n        ...this.patients.map((patient) => patient.email),\n      ];\n\n      // Controlla se l'email esiste già\n      const emailExists = allEmails.includes(this.form.email);\n      console.log(\"Esiste:? \" + emailExists);\n\n      // Aggiorna gli stati dell'errore in base all'esistenza dell'email\n      if (emailExists) {\n        this.emailError = true;\n        this.emailErrorMessage = \"L'email inserita è già in uso\";\n      } else {\n        this.emailError = false;\n        this.emailErrorMessage = \"\";\n      }\n    },\n    correctDate() {\n      if (!this.form.data) return; // Se non c'è una data, esci\n\n      const inputDate = this.form.data;\n      const parsedDate = parse(inputDate, \"yyyy-MM-dd\", new Date());\n\n      // Definisci il range di date valide\n      const minDate = new Date(1900, 0, 1); // 1 gennaio 1900\n      const maxDate = subYears(new Date(), 18); // 18 anni fa\n\n      // Resetta il messaggio di errore\n      this.dateErrorMessage = \"\";\n\n      // Controlla se la data è valida e rientra nel range richiesto\n      if (\n        isValid(parsedDate) &&\n        isBefore(parsedDate, maxDate) &&\n        isAfter(parsedDate, minDate)\n      ) {\n        // Se valida, formatta la data\n        this.form.data = format(parsedDate, \"yyyy-MM-dd\");\n      } else {\n        // Gestisci date non valide o restrizioni sull'età\n        this.dateErrorMessage =\n          \"Devi avere almeno 18 anni e la data deve essere compresa tra il 1900 e oggi.\";\n      }\n    },\n\n    goToNextStep() {\n      if (this.isStepValid(this.currentStep)) {\n        if (this.currentStep === 3) {\n          this.onSubmit();\n        } else {\n          this.currentStep++;\n        }\n      }\n    },\n    goToPreviousStep() {\n      this.currentStep--;\n    },\n    toggleShowPassword() {\n      this.showPassword = !this.showPassword;\n    },\n    toggleShowConfirmPassword() {\n      this.showConfirmPassword = !this.showConfirmPassword;\n    },\n    async onSubmit() {\n      if (this.isStepValid(3)) {\n        this.loading = true;\n        this.errors = {};\n\n        try {\n          const { email, password, ...userData } = this.form;\n\n          const payload = {\n            email,\n            password,\n            ...userData,\n            doctorID: this.isDoctorRole\n              ? userData.doctorID\n              : this.form.doctorID,\n          };\n\n          const response = await registerUser(payload);\n          console.log(\"Response dal backend:\", response);\n\n          this.loading = false;\n          this.currentStep = 4;\n        } catch (error) {\n          console.error(\"Errore nella registrazione:\", error);\n          if (error.response) {\n            console.error(\"Dati risposta:\", error.response.data);\n            this.errors.general =\n              error.response.data.error || \"Registrazione fallita\";\n          } else {\n            this.errors.general = error.message;\n          }\n          alert(\"Errore nella registrazione: \" + this.errors.general);\n          this.loading = false;\n        }\n      }\n    },\n    isStepValid(step) {\n      if (step === 1) {\n        return (\n          this.form.nome &&\n          this.form.cognome &&\n          this.form.gender &&\n          this.isValid\n        );\n      } else if (step === 2) {\n        return (\n          this.form.address &&\n          this.form.cap_code &&\n          this.form.tax_code &&\n          this.form.telefono\n        );\n      } else if (step === 3) {\n        return (\n          this.form.username &&\n          this.form.email &&\n          this.isPasswordValid &&\n          this.confirmPasswordTouched &&\n          this.form.password === this.form.confirmPassword\n        );\n      }\n      return false;\n    },\n    calculateMaxDate() {\n      const today = new Date();\n      const year = today.getFullYear() - 18; // 18 anni fa\n      const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Aggiusta il mese (gennaio è 0)\n      const day = String(today.getDate()).padStart(2, \"0\"); // Aggiusta il giorno\n      return `${year}-${month}-${day}`;\n    },\n    validateDate() {\n      const today = new Date();\n      const selectedDate = new Date(this.form.data);\n\n      // Se l'input è vuoto, mostra l'errore\n      if (!this.form.data) {\n        this.dateErrorMessage = \"Il campo data di nascita è obbligatorio.\";\n        this.isValid = false;\n        return;\n      }\n\n      // Limita la data tra il 1900 e 18 anni fa\n      const minAllowedDate = new Date(1900, 0, 1);\n      const maxAllowedDate = new Date(\n        today.getFullYear() - 18,\n        today.getMonth(),\n        today.getDate()\n      );\n\n      if (selectedDate < minAllowedDate || selectedDate > maxAllowedDate) {\n        this.dateErrorMessage =\n          \"La data deve essere compresa tra il 1900 e 18 anni fa.\";\n        this.isValid = false;\n      } else {\n        this.dateErrorMessage = \"\";\n        this.isValid = true;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.register {\n  background: #ffffff; /* Sfondo bianco */\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 0px 0px rgba(0, 0, 0, 0);\n}\n\n.container {\n  max-width: 400px;\n  padding: 40px;\n  border-radius: 15px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n  margin-top: 100px;\n  height: auto;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.back-button {\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  margin-left: -10px;\n}\n\n.back-icon {\n  width: 30px;\n  height: 30px;\n}\n\n.step-title {\n  font-size: 10px;\n  margin-bottom: 10px;\n}\n\nh2 {\n  font-size: 18px;\n  margin-bottom: 30px;\n}\n\n.form-label {\n  font-size: 12px;\n}\n\n.form-control {\n  background: #f2f2f2;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  font-size: 12px;\n}\n\n.input-group {\n  position: relative;\n}\n\n.text-danger {\n  font-size: 0.8rem; /* Font più piccolo (puoi modificarlo a piacere) */\n}\n\n.eye-button {\n  background: transparent;\n  border: 1px solid #ccc;\n  cursor: pointer;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  width: 46px;\n}\n\n.eye-icon {\n  width: 18px;\n  height: 18px;\n  margin: auto;\n}\n\n.info-icon {\n  margin-left: 5px;\n  display: inline-block;\n  font-size: 12px;\n}\n\n.info-image {\n  width: 15px;\n  height: 15px;\n  vertical-align: middle;\n}\n\n.btn-next {\n  width: 100%;\n  margin-top: 15px;\n  padding: 0.4rem;\n  cursor: pointer;\n  font-size: 13px; /* Dimensione del testo più piccola */\n}\n\n.btn-next {\n  font-size: 13px; /* Dimensione del testo più piccola per il pulsante \"Avanti\" */\n}\n\n.btn-next:hover {\n  background-color: #c0c0c0;\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(255, 255, 255, 0.8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n}\n\n.loading-icon {\n  width: 50px;\n}\n\n.disabled-icon {\n  margin-left: 10px;\n}\n\n.prohibition-icon {\n  width: 16px;\n  height: 16px;\n  vertical-align: middle;\n  display: inline-block;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}