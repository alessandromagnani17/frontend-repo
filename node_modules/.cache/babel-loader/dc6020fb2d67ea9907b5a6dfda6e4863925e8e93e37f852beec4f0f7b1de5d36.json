{"ast":null,"code":"export default {\n  name: \"UserNotifications\",\n  data() {\n    return {\n      notifications: [],\n      // Lista delle notifiche\n      unreadCount: 0 // Conteggio delle notifiche non lette\n    };\n  },\n  mounted() {\n    this.fetchNotifications();\n  },\n  methods: {\n    async fetchNotifications() {\n      try {\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\n        const userId = userData.userId;\n        console.log(\"Fetching notifications...\");\n        console.log(\"Selected patient ID:\", userId);\n        const response = await fetch(`/api/notifications?patientId=${userId}`);\n        if (!response.ok) {\n          throw new Error(\"Errore nel recupero delle notifiche\");\n        }\n        const data = await response.json();\n        console.log(\"Notifications raw data:\", data);\n\n        // Se la risposta contiene un array direttamente\n        if (Array.isArray(data)) {\n          this.notifications = data;\n        }\n        // Se la risposta è un oggetto contenente l'array\n        else if (data.notifications && Array.isArray(data.notifications)) {\n          this.notifications = data.notifications;\n        } else {\n          throw new Error(\"Formato delle notifiche inatteso\");\n        }\n        console.log(\"Parsed notifications:\", this.notifications);\n\n        // Calcola il conteggio delle notifiche non lette\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel recupero delle notifiche:\", error);\n      }\n    },\n    updateUnreadCount() {\n      this.unreadCount = this.notifications.filter(notification => !notification.read).length;\n      console.log(\"Unread count:\", this.unreadCount);\n    },\n    async markAsRead(firestoreId) {\n      console.log(\"markAsRead called with firestoreId:\", firestoreId); // Stampa l'ID Firestore\n\n      if (!firestoreId) {\n        console.error(\"No firestore ID provided\");\n        return;\n      }\n      try {\n        const response = await fetch(`/api/notifications/${firestoreId}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            read: true\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Errore nel segnare la notifica come letta.\");\n        }\n\n        // Aggiorna lo stato dopo aver segnato come letta\n        this.notifications = this.notifications.map(notification => notification.firestoreId === firestoreId ? {\n          ...notification,\n          read: true\n        } : notification);\n        console.log(\"Notification marked as read:\", firestoreId);\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel segnare la notifica come letta.\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","notifications","unreadCount","mounted","fetchNotifications","methods","userData","JSON","parse","localStorage","getItem","userId","console","log","response","fetch","ok","Error","json","Array","isArray","updateUnreadCount","error","filter","notification","read","length","markAsRead","firestoreId","method","headers","body","stringify","map"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/views/UserNotifications.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-4\">\n    <h2>\n      Notifiche\n      <span v-if=\"unreadCount > 0\" class=\"badge badge-warning\">{{ unreadCount }}</span>\n    </h2>\n    <div v-if=\"notifications.length\">\n      <ul class=\"list-group\">\n        <li\n          v-for=\"(notification, index) in notifications\"\n          :key=\"index\"\n          class=\"list-group-item\"\n        >\n          {{ notification.message }} - ID: {{ notification.firestoreId }}\n          <span class=\"badge badge-success float-right\">{{ notification.date }}</span>\n          <button\n            v-if=\"!notification.read\"\n            @click=\"markAsRead(notification.firestoreId)\"\n            class=\"btn btn-sm btn-primary\"\n          >\n            Segna come letta\n          </button>\n        </li>\n      </ul>\n    </div>\n    <div v-else>\n      <p>Non ci sono notifiche.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"UserNotifications\",\n  data() {\n    return {\n      notifications: [], // Lista delle notifiche\n      unreadCount: 0, // Conteggio delle notifiche non lette\n    };\n  },\n\n  mounted() {\n    this.fetchNotifications();\n  },\n\n  methods: {\n    async fetchNotifications() {\n      try {\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\n        const userId = userData.userId;\n\n        console.log(\"Fetching notifications...\");\n        console.log(\"Selected patient ID:\", userId);\n\n        const response = await fetch(`/api/notifications?patientId=${userId}`);\n        if (!response.ok) {\n          throw new Error(\"Errore nel recupero delle notifiche\");\n        }\n\n        const data = await response.json();\n        console.log(\"Notifications raw data:\", data);\n\n        // Se la risposta contiene un array direttamente\n        if (Array.isArray(data)) {\n          this.notifications = data;\n        }\n        // Se la risposta è un oggetto contenente l'array\n        else if (data.notifications && Array.isArray(data.notifications)) {\n          this.notifications = data.notifications;\n        } else {\n          throw new Error(\"Formato delle notifiche inatteso\");\n        }\n\n        console.log(\"Parsed notifications:\", this.notifications);\n\n        // Calcola il conteggio delle notifiche non lette\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel recupero delle notifiche:\", error);\n      }\n    },\n\n    updateUnreadCount() {\n      this.unreadCount = this.notifications.filter(\n        (notification) => !notification.read\n      ).length;\n      console.log(\"Unread count:\", this.unreadCount);\n    },\n\n    async markAsRead(firestoreId) {\n      console.log(\"markAsRead called with firestoreId:\", firestoreId); // Stampa l'ID Firestore\n\n      if (!firestoreId) {\n        console.error(\"No firestore ID provided\");\n        return;\n      }\n\n      try {\n        const response = await fetch(`/api/notifications/${firestoreId}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ read: true }),\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Errore nel segnare la notifica come letta.\");\n        }\n\n        // Aggiorna lo stato dopo aver segnato come letta\n        this.notifications = this.notifications.map((notification) =>\n          notification.firestoreId === firestoreId\n            ? { ...notification, read: true }\n            : notification\n        );\n\n        console.log(\"Notification marked as read:\", firestoreId);\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel segnare la notifica come letta.\", error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.list-group-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.float-right {\n  margin-left: 10px;\n}\n\n.unread-notification {\n  font-weight: bold;\n  background-color: #f8f9fa;\n}\n\n.badge-warning {\n  background-color: #ffc107;\n  color: #fff;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}