{"ast":null,"code":"import axios from \"axios\";\nimport { getPatientsFromDoctor } from \"@/services/api-service\";\nexport default {\n  data() {\n    return {\n      selectedFile: null,\n      selectedFileName: null,\n      predictedClass: null,\n      imagePreview: null,\n      gradcamImage: null,\n      showNewPredictionButton: false,\n      showPredictButton: true,\n      showUploadSection: true,\n      patients: [],\n      selectedPatient: null\n    };\n  },\n  methods: {\n    resetPrediction() {\n      this.selectedFile = null;\n      this.selectedFileName = null;\n      this.predictedClass = null;\n      this.imagePreview = null;\n      this.gradcamImage = null;\n      this.showNewPredictionButton = false;\n      this.showPredictButton = true;\n      this.showUploadSection = true;\n      this.selectedPatient = null;\n      this.patients = [];\n      if (this.$refs.fileInput) {\n        this.$refs.fileInput.value = \"\"; // Imposta il valore dell'input file\n      }\n    },\n    async onFileChange(event) {\n      this.selectedFile = event.target.files[0];\n      this.selectedFileName = this.selectedFile.name;\n      this.imagePreview = URL.createObjectURL(this.selectedFile);\n      await this.loadPatients(); // Carica i pazienti dopo la selezione dell'immagine\n    },\n    async loadPatients() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      const doctorId = userData.uid; // Supponendo che l'ID del medico sia memorizzato nel UID\n      this.patients = await getPatientsFromDoctor(doctorId);\n    },\n    enablePredictButton() {\n      this.showPredictButton = this.selectedPatient !== null; // Abilita il pulsante solo se un paziente è selezionato\n    },\n    async submitImage() {\n      if (!this.selectedFile || !this.selectedPatient) return;\n      const formData = new FormData();\n      formData.append(\"file\", this.selectedFile);\n      formData.append(\"patientId\", this.selectedPatient); // Aggiungi l'ID del paziente\n\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      const userUid = userData.uid;\n      formData.append(\"userUID\", userUid);\n      try {\n        const response = await axios.post(\"http://127.0.0.1:5000/predict\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        console.log(\"Response from server:\", response.data);\n        this.predictedClass = response.data.predicted_class;\n        this.gradcamImage = response.data.gradcam_image;\n        this.showNewPredictionButton = true;\n        this.showPredictButton = false;\n        this.showUploadSection = false;\n      } catch (error) {\n        console.error(\"Error predicting image:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","getPatientsFromDoctor","data","selectedFile","selectedFileName","predictedClass","imagePreview","gradcamImage","showNewPredictionButton","showPredictButton","showUploadSection","patients","selectedPatient","methods","resetPrediction","$refs","fileInput","value","onFileChange","event","target","files","name","URL","createObjectURL","loadPatients","userData","JSON","parse","localStorage","getItem","doctorId","uid","enablePredictButton","submitImage","formData","FormData","append","userUid","response","post","headers","console","log","predicted_class","gradcam_image","error"],"sources":["C:\\Users\\Utente\\Desktop\\DIO\\osteoarthritis-project\\frontend\\src\\components\\PredictRadiograph.vue"],"sourcesContent":["<template>\n  <div class=\"welcome\">\n    <aside class=\"sidebar bg-dark text-white\">\n      <h4 class=\"text-center mt-3\">Link Rapidi</h4>\n      <ul class=\"nav flex-column\">\n        <li class=\"nav-item\">\n          <router-link class=\"nav-link text-white\" to=\"/view-radiographs\">Visualizza Radiografie</router-link>\n        </li>\n        <li class=\"nav-item\">\n          <router-link class=\"nav-link text-white\" to=\"/manage-patients\">Gestisci Pazienti</router-link>\n        </li>\n        <li class=\"nav-item\">\n          <router-link class=\"nav-link text-white\" to=\"/reports\">Rapporti</router-link>\n        </li>\n        <li class=\"nav-item\">\n          <router-link class=\"nav-link text-white\" to=\"/predict\">Predict</router-link>\n        </li>\n      </ul>\n    </aside>\n\n    <div class=\"container mt-5\">\n      <h5 v-if=\"showUploadSection\"><strong>Carica una radiografia</strong></h5>\n      <div>\n        <input v-if=\"showUploadSection\" type=\"file\" ref=\"fileInput\" @change=\"onFileChange\" accept=\"image/*\" style=\"display: none\" />\n        <button v-if=\"showUploadSection\" @click=\"selectFile\" class=\"btn btn-secondary\">Seleziona file</button>\n      </div>\n      <div v-if=\"imagePreview && showUploadSection\" class=\"mt-3\">\n        <img :src=\"imagePreview\" alt=\"Anteprima immagine\" class=\"img-preview\" />\n      </div>\n      <div v-if=\"patients.length > 0 && showUploadSection\">\n        <label for=\"patientSelect\">Seleziona un paziente:</label>\n        <select id=\"patientSelect\" v-model=\"selectedPatient\" @change=\"enablePredictButton\">\n          <option value=\"\" disabled>Scegli un paziente</option>\n          <option v-for=\"patient in patients\" :key=\"patient.id\" :value=\"patient.id\">{{ patient.name }}</option>\n        </select>\n      </div>\n      <div v-if=\"imagePreview\">\n        <button v-if=\"showPredictButton\" @click=\"submitImage\" class=\"btn btn-primary mt-5\">Predici osteoartrite</button>\n      </div>\n      <div v-if=\"predictedClass !== null\" class=\"mt-4\">\n        <div class=\"row\">\n          <div class=\"col-md-6 col-12\">\n            <div class=\"card\">\n              <img :src=\"imagePreview\" class=\"card-img-top\" alt=\"Anteprima immagine\" />\n              <div class=\"card-body\">\n                <h5 class=\"card-title\">Radiografia Originale</h5>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-6 col-12\">\n            <div class=\"card\">\n              <img :src=\"gradcamImage\" class=\"card-img-top\" alt=\"Grad-CAM Image\" />\n              <div class=\"card-body\">\n                <h5 class=\"card-title\">Applicazione Grad-CAM</h5>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"card prediction-card mb-3\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{{ predictedClass }}</h5>\n          </div>\n        </div>\n        <div v-if=\"showNewPredictionButton\" class=\"mt-4\">\n          <button @click=\"resetPrediction\" class=\"btn btn-secondary\">Esegui nuova predizione</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport { getPatientsFromDoctor } from \"@/services/api-service\"; \n\nexport default {\n  data() {\n    return {\n      selectedFile: null,\n      selectedFileName: null,\n      predictedClass: null,\n      imagePreview: null,\n      gradcamImage: null,\n      showNewPredictionButton: false,\n      showPredictButton: true,\n      showUploadSection: true,\n      patients: [],\n      selectedPatient: null,\n    };\n  },\n  methods: {\n    resetPrediction() {\n      this.selectedFile = null;\n      this.selectedFileName = null;\n      this.predictedClass = null;\n      this.imagePreview = null;\n      this.gradcamImage = null;\n      this.showNewPredictionButton = false;\n      this.showPredictButton = true;\n      this.showUploadSection = true;\n      this.selectedPatient = null;\n      this.patients = [];\n      if (this.$refs.fileInput) {\n        this.$refs.fileInput.value = \"\"; // Imposta il valore dell'input file\n      }\n    },\n    async onFileChange(event) {\n      this.selectedFile = event.target.files[0];\n      this.selectedFileName = this.selectedFile.name;\n      this.imagePreview = URL.createObjectURL(this.selectedFile);\n      await this.loadPatients(); // Carica i pazienti dopo la selezione dell'immagine\n    },\n    async loadPatients() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      const doctorId = userData.uid; // Supponendo che l'ID del medico sia memorizzato nel UID\n      this.patients = await getPatientsFromDoctor(doctorId);\n    },\n    enablePredictButton() {\n      this.showPredictButton = this.selectedPatient !== null; // Abilita il pulsante solo se un paziente è selezionato\n    },\n    async submitImage() {\n      if (!this.selectedFile || !this.selectedPatient) return;\n\n      const formData = new FormData();\n      formData.append(\"file\", this.selectedFile);\n      formData.append(\"patientId\", this.selectedPatient); // Aggiungi l'ID del paziente\n\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      const userUid = userData.uid;\n      formData.append(\"userUID\", userUid);\n\n      try {\n        const response = await axios.post(\n          \"http://127.0.0.1:5000/predict\",\n          formData,\n          {\n            headers: {\n              \"Content-Type\": \"multipart/form-data\",\n            },\n          }\n        );\n\n        console.log(\"Response from server:\", response.data);\n        this.predictedClass = response.data.predicted_class;\n        this.gradcamImage = response.data.gradcam_image;\n        this.showNewPredictionButton = true;\n        this.showPredictButton = false;\n        this.showUploadSection = false;\n      } catch (error) {\n        console.error(\"Error predicting image:\", error);\n      }\n    },\n  },\n};\n</script>\n\n\n<style scoped>\n.welcome {\n  background: #ffffff;\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 0px 0px rgba(0, 0, 0, 0);\n}\n\n.container {\n  max-width: 90%; /* Modifica qui per utilizzare una percentuale */\n  padding: 5%; /* Usa percentuali per il padding */\n  border-radius: 15px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n  margin-top: 10%; /* Usa percentuali per il margine superiore */\n  height: auto;\n  text-align: center;\n  flex-grow: 1;\n}\n\n.img-preview {\n  max-width: 100%;\n  max-height: 50vh; /* Modifica per utilizzare una percentuale dell'altezza della finestra */\n  margin-top: 15px;\n}\n\n.row {\n  display: flex; /* Usa Flexbox per le card */\n  flex-wrap: wrap; /* Permetti alle card di andare a capo se necessario */\n  margin-bottom: 20px; /* Margine inferiore per la separazione */\n  height: 10%;\n}\n\n.card {\n  flex: 1 1 45%; /* Permetti alle card di occupare il 45% della larghezza */\n  margin: 10px; /* Margine tra le card */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Stili per la card della predizione */\n.card.prediction-card {\n  margin-top: 20px; /* Margine superiore per separarla dalle altre card */\n}\n\n.card-img-top {\n  border-radius: 0.5rem;\n  max-height: 50vh; /* Limita l'altezza in percentuale */\n  object-fit: cover; /* Mantieni le proporzioni dell'immagine */\n}\n\n.card-body {\n  text-align: center;\n}\n\n.btn-primary {\n  background-color: #007bff;\n  border: none;\n}\n\n.btn-primary:hover {\n  background-color: #0056b3;\n}\n\n.sidebar {\n  top: 0;\n  width: 250px;\n  height: 100vh;\n  padding: 20px;\n  background: linear-gradient(180deg, #212529, #343a40);\n  margin-right: 20px;\n}\n\n.sidebar .nav-link {\n  color: #cfd2d6;\n}\n\n.sidebar .nav-link:hover {\n  background-color: #495057;\n  border-radius: 5px;\n}\n\n.nav-link {\n  padding: 10px 15px;\n}\n\n@media (max-width: 767.98px) {\n  .navbar-brand {\n    font-size: 1.5rem;\n  }\n\n  .sidebar {\n    display: none;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}