{"ast":null,"code":"export default {\n  name: \"UserNotifications\",\n  data() {\n    return {\n      notifications: [],\n      // Lista delle notifiche\n      unreadCount: 0 // Conteggio delle notifiche non lette\n    };\n  },\n  mounted() {\n    this.fetchNotifications();\n  },\n  methods: {\n    async fetchNotifications() {\n      try {\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\n        const userId = userData.userId;\n        const response = await fetch(`/api/notifications?patientId=${userId}`);\n        if (!response.ok) {\n          throw new Error(\"Errore nel recupero delle notifiche\");\n        }\n        const data = await response.json();\n        if (Array.isArray(data.notifications)) {\n          this.notifications = data.notifications;\n        } else {\n          throw new Error(\"Formato delle notifiche inatteso\");\n        }\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel recupero delle notifiche:\", error);\n      }\n    },\n    updateUnreadCount() {\n      this.unreadCount = this.notifications.filter(notification => !notification.isRead).length;\n    },\n    async markAsRead(notificationId) {\n      if (!notificationId) {\n        console.error(\"No notification ID provided\");\n        return;\n      }\n      try {\n        const response = await fetch(`/api/notifications/${notificationId}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            isRead: true\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Errore nel segnare la notifica come letta.\");\n        }\n\n        // Aggiorna lo stato dopo aver segnato come letta\n        this.notifications = this.notifications.map(notification => notification.id === notificationId ? {\n          ...notification,\n          isRead: true\n        } : notification);\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel segnare la notifica come letta.\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","notifications","unreadCount","mounted","fetchNotifications","methods","userData","JSON","parse","localStorage","getItem","userId","response","fetch","ok","Error","json","Array","isArray","updateUnreadCount","error","console","filter","notification","isRead","length","markAsRead","notificationId","method","headers","body","stringify","map","id"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/views/UserNotifications.vue"],"sourcesContent":["<template>\n  <div class=\"notifications-container\">\n    <h2 class=\"notifications-header\">\n      Notifiche\n      <span v-if=\"unreadCount > 0\" class=\"badge badge-warning\">{{\n        unreadCount\n      }}</span>\n    </h2>\n    <div v-if=\"notifications.length\">\n      <ul class=\"list-group\">\n        <li\n          v-for=\"(notification, index) in notifications\"\n          :key=\"index\"\n          class=\"list-group-item\"\n          :class=\"{ 'notification-read': notification.isRead }\"\n        >\n          <!-- Messaggio della notifica -->\n          <div class=\"notification-message\">\n            <strong>{{ notification.message }}</strong>\n          </div>\n\n          <!-- Data e ora -->\n          <div class=\"notification-details\">\n            <span>Data: {{ notification.date }}</span>\n            <span>Ora: {{ notification.time }}</span>\n          </div>\n\n          <!-- Pulsante per segnare come letto -->\n          <button\n            v-if=\"!notification.isRead\"\n            @click=\"markAsRead(notification.id)\"\n            class=\"btn btn-sm btn-primary mark-read-btn\"\n          >\n            Segna come letta\n          </button>\n        </li>\n      </ul>\n    </div>\n    <div v-else class=\"no-notifications\">\n      <p>Non ci sono notifiche.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"UserNotifications\",\n  data() {\n    return {\n      notifications: [], // Lista delle notifiche\n      unreadCount: 0, // Conteggio delle notifiche non lette\n    };\n  },\n\n  mounted() {\n    this.fetchNotifications();\n  },\n\n  methods: {\n    async fetchNotifications() {\n      try {\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\n        const userId = userData.userId;\n\n        const response = await fetch(`/api/notifications?patientId=${userId}`);\n        if (!response.ok) {\n          throw new Error(\"Errore nel recupero delle notifiche\");\n        }\n\n        const data = await response.json();\n        if (Array.isArray(data.notifications)) {\n          this.notifications = data.notifications;\n        } else {\n          throw new Error(\"Formato delle notifiche inatteso\");\n        }\n\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel recupero delle notifiche:\", error);\n      }\n    },\n\n    updateUnreadCount() {\n      this.unreadCount = this.notifications.filter(\n        (notification) => !notification.isRead\n      ).length;\n    },\n\n    async markAsRead(notificationId) {\n      if (!notificationId) {\n        console.error(\"No notification ID provided\");\n        return;\n      }\n\n      try {\n        const response = await fetch(`/api/notifications/${notificationId}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ isRead: true }),\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Errore nel segnare la notifica come letta.\");\n        }\n\n        // Aggiorna lo stato dopo aver segnato come letta\n        this.notifications = this.notifications.map((notification) =>\n          notification.id === notificationId\n            ? { ...notification, isRead: true }\n            : notification\n        );\n\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel segnare la notifica come letta.\", error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.notifications-container {\n  background: #ffffff;\n  max-width: 500px;\n  margin: 0 auto;\n  padding: 20px;\n  border-radius: 15px;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n  margin-top: 100px;\n}\n\n.notifications-header {\n  font-size: 18px;\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.list-group-item {\n  background: #f9f9f9;\n  border: 1px solid #eee;\n  border-radius: 10px;\n  margin-bottom: 10px;\n  padding: 15px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n  transition: background-color 0.3s, opacity 0.3s, color 0.3s;\n}\n\n/* Classe per notifiche lette */\n.notification-read {\n  opacity: 0.5; /* Maggiore opacità per notifiche lette */\n}\n\n/* Messaggio della notifica */\n.notification-message {\n  font-size: 14px; /* Dimensione del testo più piccola */\n  font-weight: bold;\n  color: #333;\n}\n\n/* Dettagli data e ora */\n.notification-details {\n  font-size: 12px; /* Testo più piccolo */\n  color: #666;\n  margin-top: 5px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.mark-read-btn {\n  background: #007bff;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 5px 10px;\n  font-size: 12px; /* Testo più piccolo per il pulsante */\n  cursor: pointer;\n  margin-top: 10px;\n  transition: background-color 0.3s;\n}\n\n.mark-read-btn:hover {\n  background: #0056b3;\n}\n\n.no-notifications {\n  text-align: center;\n  color: #777;\n  font-size: 14px;\n}\n\n.badge-warning {\n  background-color: #ffc107;\n  color: #fff;\n}\n</style>\n"],"mappings":"AA6CA,eAAe;EACbA,IAAI,EAAE,mBAAmB;EACzBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,EAAE;MAAE;MACnBC,WAAW,EAAE,CAAC,CAAE;IAClB,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC3B,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMD,kBAAkBA,CAAA,EAAG;MACzB,IAAI;QACF,MAAME,QAAO,GAAIC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7D,MAAMC,MAAK,GAAIL,QAAQ,CAACK,MAAM;QAE9B,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,gCAAgCF,MAAM,EAAE,CAAC;QACtE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;QACxD;QAEA,MAAMf,IAAG,GAAI,MAAMY,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClC,IAAIC,KAAK,CAACC,OAAO,CAAClB,IAAI,CAACC,aAAa,CAAC,EAAE;UACrC,IAAI,CAACA,aAAY,GAAID,IAAI,CAACC,aAAa;QACzC,OAAO;UACL,MAAM,IAAIc,KAAK,CAAC,kCAAkC,CAAC;QACrD;QAEA,IAAI,CAACI,iBAAiB,CAAC,CAAC;MAC1B,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IAEDD,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAACjB,WAAU,GAAI,IAAI,CAACD,aAAa,CAACqB,MAAM,CACzCC,YAAY,IAAK,CAACA,YAAY,CAACC,MAClC,CAAC,CAACC,MAAM;IACV,CAAC;IAED,MAAMC,UAAUA,CAACC,cAAc,EAAE;MAC/B,IAAI,CAACA,cAAc,EAAE;QACnBN,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAC;QAC5C;MACF;MAEA,IAAI;QACF,MAAMR,QAAO,GAAI,MAAMC,KAAK,CAAC,sBAAsBc,cAAc,EAAE,EAAE;UACnEC,MAAM,EAAE,OAAO;UACfC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEvB,IAAI,CAACwB,SAAS,CAAC;YAAEP,MAAM,EAAE;UAAK,CAAC;QACvC,CAAC,CAAC;QAEF,IAAI,CAACZ,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;QAC/D;;QAEA;QACA,IAAI,CAACd,aAAY,GAAI,IAAI,CAACA,aAAa,CAAC+B,GAAG,CAAET,YAAY,IACvDA,YAAY,CAACU,EAAC,KAAMN,cAAa,GAC7B;UAAE,GAAGJ,YAAY;UAAEC,MAAM,EAAE;QAAK,IAChCD,YACN,CAAC;QAED,IAAI,CAACJ,iBAAiB,CAAC,CAAC;MAC1B,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MACpE;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}