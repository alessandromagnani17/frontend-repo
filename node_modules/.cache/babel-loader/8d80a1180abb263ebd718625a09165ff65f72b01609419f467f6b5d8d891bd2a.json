{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000\"; // URL del tuo backend\n\n// Funzione per la registrazione\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per il login\nexport const loginUser = async loginData => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, loginData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per caricare una radiografia\nexport const uploadRadiograph = async (patientId, file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  try {\n    const response = await axios.post(`${API_URL}/patients/${patientId}/radiographs`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per ottenere i pazienti associati a un dottore\nexport const getPatients = async doctorId => {\n  try {\n    const response = await axios.get(`${API_URL}/doctors/${doctorId}/patients`);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per ottenere le radiografie di un paziente\nexport const getRadiographs = async patientId => {\n  try {\n    const response = await axios.get(`${API_URL}/patients/${patientId}/radiographs`);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};","map":{"version":3,"names":["axios","API_URL","registerUser","userData","response","post","data","error","Error","message","loginUser","loginData","uploadRadiograph","patientId","file","formData","FormData","append","headers","getPatients","doctorId","get","getRadiographs"],"sources":["C:/Users/Utente/Desktop/DIO/osteoarthritis-project/frontend/src/services/api-service.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000\"; // URL del tuo backend\r\n\r\n// Funzione per la registrazione\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/register`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.response ? error.response.data.error : error.message);\r\n  }\r\n};\r\n\r\n// Funzione per il login\r\nexport const loginUser = async (loginData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, loginData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.response ? error.response.data.error : error.message);\r\n  }\r\n};\r\n\r\n// Funzione per caricare una radiografia\r\nexport const uploadRadiograph = async (patientId, file) => {\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  try {\r\n    const response = await axios.post(\r\n      `${API_URL}/patients/${patientId}/radiographs`,\r\n      formData,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.response ? error.response.data.error : error.message);\r\n  }\r\n};\r\n\r\n// Funzione per ottenere i pazienti associati a un dottore\r\nexport const getPatients = async (doctorId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/doctors/${doctorId}/patients`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.response ? error.response.data.error : error.message);\r\n  }\r\n};\r\n\r\n// Funzione per ottenere le radiografie di un paziente\r\nexport const getRadiographs = async (patientId) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${API_URL}/patients/${patientId}/radiographs`\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.response ? error.response.data.error : error.message);\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,WAAW,EAAEE,QAAQ,CAAC;IAClE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACC,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC;EAC7E;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,SAAS,IAAK;EAC5C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,QAAQ,EAAEU,SAAS,CAAC;IAChE,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACC,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC;EAC7E;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAG,MAAAA,CAAOC,SAAS,EAAEC,IAAI,KAAK;EACzD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAC/B,GAAGJ,OAAO,aAAaY,SAAS,cAAc,EAC9CE,QAAQ,EACR;MACEG,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CACF,CAAC;IACD,OAAOd,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACC,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC;EAC7E;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,WAAW,GAAG,MAAOC,QAAQ,IAAK;EAC7C,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMJ,KAAK,CAACqB,GAAG,CAAC,GAAGpB,OAAO,YAAYmB,QAAQ,WAAW,CAAC;IAC3E,OAAOhB,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACC,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC;EAC7E;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,cAAc,GAAG,MAAOT,SAAS,IAAK;EACjD,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMJ,KAAK,CAACqB,GAAG,CAC9B,GAAGpB,OAAO,aAAaY,SAAS,cAClC,CAAC;IACD,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACC,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC;EAC7E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}