{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, createTextVNode as _createTextVNode, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"modal\"\n};\nconst _hoisted_3 = {\n  class: \"modal-content\"\n};\nconst _hoisted_4 = [\"min\"];\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = {\n  class: \"calendar\"\n};\nconst _hoisted_7 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_8 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_9 = [\"onClick\"];\nconst _hoisted_10 = {\n  class: \"date\"\n};\nconst _hoisted_11 = {\n  key: 0,\n  class: \"radiograph-count\"\n};\nconst _hoisted_12 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_13 = {\n  key: 0\n};\nconst _hoisted_14 = [\"onClick\"];\nconst _hoisted_15 = {\n  key: 1\n};\nconst _hoisted_16 = {\n  key: 0\n};\nconst _hoisted_17 = {\n  class: \"calendar\"\n};\nconst _hoisted_18 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_19 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_20 = [\"onClick\"];\nconst _hoisted_21 = {\n  class: \"date\"\n};\nconst _hoisted_22 = {\n  key: 0,\n  class: \"radiograph-count\"\n};\nconst _hoisted_23 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_24 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[17] || (_cache[17] = _createElementVNode(\"h1\", null, \"Calendario Attività\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.openScheduleModal && _ctx.openScheduleModal(...args)),\n    class: \"btn btn-primary\"\n  }, \" Pianifica Operazione \"), _createCommentVNode(\" Modale per inserire i dettagli dell'operazione \"), _ctx.showModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[9] || (_cache[9] = _createElementVNode(\"h2\", null, \"Pianifica una nuova operazione\", -1 /* HOISTED */)), _cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    for: \"operationDate\"\n  }, \"Data dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.operationDate = $event),\n    id: \"operationDate\",\n    min: _ctx.minDate\n  }, null, 8 /* PROPS */, _hoisted_4), [[_vModelText, _ctx.operationDate]]), _cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    for: \"description\"\n  }, \"Descrizione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.description = $event),\n    id: \"description\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.description]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.scheduleOperation && _ctx.scheduleOperation(...args)),\n    class: \"btn btn-success\"\n  }, \" Salva \"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => _ctx.closeScheduleModal && _ctx.closeScheduleModal(...args)),\n    class: \"btn btn-secondary\"\n  }, \" Annulla \")])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Verifica se l'utente è un paziente o un dottore \"), $data.isPatient ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createElementVNode(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => $options.showDayDetails(day)\n    }, [_createElementVNode(\"div\", _hoisted_10, _toDisplayString(day.date), 1 /* TEXT */), day.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, _toDisplayString(day.radiographs.length) + \" \" + _toDisplayString(day.radiographs.length === 1 ? \"caricamento radiografia\" : \"caricamenti radiografie\"), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[12] || (_cache[12] = _createElementVNode(\"strong\", null, \"Paziente:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.selectedPatient.name) + \" \" + _toDisplayString($data.selectedPatient.family_name), 1 /* TEXT */)]), $data.selectedDay.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_cache[15] || (_cache[15] = _createElementVNode(\"h3\", null, \"Radiografie caricate:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.name), 1 /* TEXT */), _cache[13] || (_cache[13] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString(radiograph.date), 1 /* TEXT */), _cache[14] || (_cache[14] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_14)]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_15, _cache[16] || (_cache[16] = [_createElementVNode(\"p\", null, \"Nessuna radiografia caricate per questa data.\", -1 /* HOISTED */)])))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti \"), _createElementVNode(\"div\", null, [$data.isDoctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createElementVNode(\"div\", _hoisted_19, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => $options.showDayDetails(day)\n    }, [_createElementVNode(\"div\", _hoisted_21, _toDisplayString(day.date), 1 /* TEXT */), day.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, _toDisplayString(day.radiographs.length) + \" \" + _toDisplayString(day.radiographs.length === 1 ? \"caricamento radiografia\" : \"caricamenti radiografie\"), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_20);\n  }), 128 /* KEYED_FRAGMENT */))])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.patientName) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(radiograph.name), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_24)]);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","_ctx","openScheduleModal","_createCommentVNode","showModal","_hoisted_2","_hoisted_3","for","type","$event","operationDate","id","min","minDate","_hoisted_4","description","scheduleOperation","closeScheduleModal","$data","isPatient","_hoisted_5","_hoisted_6","_hoisted_7","$options","changeMonth","_toDisplayString","monthNames","month","year","_hoisted_8","_Fragment","_renderList","daysInMonth","day","date","showDayDetails","_hoisted_10","radiographs","length","_hoisted_11","_hoisted_9","_createVNode","_Transition","name","onBeforeEnter","beforeEnter","onEnter","enter","onLeave","leave","default","_withCtx","selectedDay","_hoisted_12","_createTextVNode","selectedPatient","family_name","_hoisted_13","radiograph","enlargeRadiograph","url","_hoisted_14","_hoisted_15","_","isDoctor","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_21","_hoisted_22","_hoisted_20","_hoisted_23","patientName","_hoisted_24"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n    <button @click=\"openScheduleModal\" class=\"btn btn-primary\">\n      Pianifica Operazione\n    </button>\n\n    <!-- Modale per inserire i dettagli dell'operazione -->\n    <div v-if=\"showModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h2>Pianifica una nuova operazione</h2>\n        <label for=\"operationDate\">Data dell'operazione:</label>\n        <input\n          type=\"date\"\n          v-model=\"operationDate\"\n          id=\"operationDate\"\n          :min=\"minDate\"\n        />\n\n        <label for=\"description\">Descrizione:</label>\n        <textarea v-model=\"description\" id=\"description\"></textarea>\n\n        <button @click=\"scheduleOperation\" class=\"btn btn-success\">\n          Salva\n        </button>\n        <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\n          Annulla\n        </button>\n      </div>\n    </div>\n    <!-- Verifica se l'utente è un paziente o un dottore -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <div class=\"calendar-grid\">\n          <div\n            v-for=\"day in daysInMonth\"\n            :key=\"day.date\"\n            class=\"calendar-day\"\n            @click=\"showDayDetails(day)\"\n          >\n            <div class=\"date\">{{ day.date }}</div>\n            <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n              {{ day.radiographs.length }}\n              {{\n                day.radiographs.length === 1\n                  ? \"caricamento radiografia\"\n                  : \"caricamenti radiografie\"\n              }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <p>\n            <strong>Paziente:</strong> {{ selectedPatient.name }}\n            {{ selectedPatient.family_name }}\n          </p>\n          <div v-if=\"selectedDay.radiographs.length > 0\">\n            <h3>Radiografie caricate:</h3>\n            <ul>\n              <li\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <strong>{{ radiograph.name }}</strong\n                ><br />\n                <span>{{ radiograph.date }}</span\n                ><br />\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </li>\n            </ul>\n          </div>\n          <div v-else>\n            <p>Nessuna radiografia caricate per questa data.</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n\n    <!-- Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti -->\n    <div v-else>\n      <div v-if=\"isDoctor\">\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"changeMonth(-1)\">&#8249;</button>\n            <span>{{ monthNames[month] }} {{ year }}</span>\n            <button @click=\"changeMonth(1)\">&#8250;</button>\n          </div>\n\n          <div class=\"calendar-grid\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"day.date\"\n              class=\"calendar-day\"\n              @click=\"showDayDetails(day)\"\n            >\n              <div class=\"date\">{{ day.date }}</div>\n              <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n                {{ day.radiographs.length }}\n                {{\n                  day.radiographs.length === 1\n                    ? \"caricamento radiografia\"\n                    : \"caricamenti radiografie\"\n                }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <div\n            v-for=\"radiograph in selectedDay.radiographs\"\n            :key=\"radiograph.name\"\n          >\n            <p>\n              <strong>{{ radiograph.patientName }}:</strong>\n              {{ radiograph.name }}\n            </p>\n            <button @click=\"enlargeRadiograph(radiograph.url)\">\n              Visualizza Immagine\n            </button>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      patientId: null, // ID del paziente\n      selectedPatient: null, // Paziente selezionato (loggato)\n      patients: [], // Pazienti associati al dottore\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      // Crea un array per tenere traccia delle radiografie per ogni giorno\n      const radiographsPerDay = {};\n\n      if (this.isDoctor) {\n        // Aggrega tutte le radiografie dei pazienti associati al dottore\n        this.patients.forEach((patient) => {\n          if (patient.radiographs) {\n            patient.radiographs.forEach((radiograph) => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n        });\n      } else {\n        // Se l'utente è un paziente, usa le proprie radiografie\n        this.radiographs.forEach((radiograph) => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push(radiograph);\n        });\n      }\n\n      // Popola i giorni del mese\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i).toDateString();\n        const radiographsOnDay = radiographsPerDay[dayDate] || [];\n\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay,\n        });\n      }\n\n      return days;\n    },\n  },\n  methods: {\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n\n    // Modifica per caricare le radiografie di tutti i pazienti\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie per ogni paziente\n          this.patients.forEach((patient) => {\n            this.loadRadiographs(patient.userId); // Carica le radiografie per ogni paziente\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    // Modifica per caricare le radiografie specifiche di un paziente\n    async loadRadiographs(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Trova il paziente e aggiungi le radiografie al suo record\n          const patient = this.patients.find((p) => p.userId === patientId);\n          if (patient) {\n            patient.radiographs = data; // Aggiungi le radiografie al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.radiograph-count {\n  position: absolute;\n  bottom: 10px;\n  left: 5px;\n  font-size: 0.9em;\n  color: #007bff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 1.5em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 20px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1.5em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}