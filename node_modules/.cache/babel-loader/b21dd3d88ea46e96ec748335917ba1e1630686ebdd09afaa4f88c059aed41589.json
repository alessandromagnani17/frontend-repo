{"ast":null,"code":"export default {\n  name: \"UserNotifications\",\n  data() {\n    return {\n      notifications: [],\n      // Lista delle notifiche\n      unreadCount: 0 // Conteggio delle notifiche non lette\n    };\n  },\n  mounted() {\n    this.fetchNotifications();\n  },\n  methods: {\n    async fetchNotifications() {\n      try {\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\n        const userId = userData.userId;\n        console.log(\"Fetching notifications...\");\n        console.log(\"Selected patient ID:\", userId);\n\n        // Recupera le notifiche dal backend\n        const response = await fetch(`/api/notifications?patientId=${userId}`);\n        if (!response.ok) {\n          throw new Error(\"Errore nel recupero delle notifiche\");\n        }\n        const data = await response.json();\n        console.log(\"Notifications data:\", data);\n\n        // Imposta le notifiche e calcola quelle non lette\n        this.notifications = data;\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel recupero delle notifiche:\", error);\n      }\n    },\n    updateUnreadCount() {\n      this.unreadCount = this.notifications.filter(notification => !notification.read).length;\n    },\n    async markAsRead(notificationId) {\n      try {\n        const response = await fetch(`/api/notifications/${notificationId}`, {\n          method: \"PATCH\" // Endpoint per segnare come letta\n        });\n        if (response.ok) {\n          console.log(\"Notifica contrassegnata come letta.\");\n          // Aggiorna lo stato locale\n          const notification = this.notifications.find(n => n.id === notificationId);\n          if (notification) {\n            notification.read = true; // Aggiorna lo stato locale\n          }\n          this.updateUnreadCount(); // Aggiorna il conteggio delle notifiche non lette\n        } else {\n          console.error(\"Errore nel segnare la notifica come letta.\");\n        }\n      } catch (error) {\n        console.error(\"Errore durante l'aggiornamento della notifica:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","notifications","unreadCount","mounted","fetchNotifications","methods","userData","JSON","parse","localStorage","getItem","userId","console","log","response","fetch","ok","Error","json","updateUnreadCount","error","filter","notification","read","length","markAsRead","notificationId","method","find","n","id"],"sources":["/Users/alessandromagnani/Desktop/UniversitaÌ€/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/views/UserNotifications.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-4\">\n    <h2>\n      Notifiche\n      <span v-if=\"unreadCount > 0\" class=\"badge badge-warning\">{{ unreadCount }}</span>\n    </h2>\n    <div v-if=\"notifications.length\">\n      <ul class=\"list-group\">\n        <li\n          v-for=\"(notification, index) in notifications\"\n          :key=\"index\"\n          class=\"list-group-item\"\n          :class=\"{ 'unread-notification': !notification.read }\"\n        >\n          {{ notification.message }}\n          <span class=\"badge badge-success float-right\">\n            {{ notification.date }} - {{ notification.time }}\n          </span>\n          <button\n            v-if=\"!notification.read\"\n            class=\"btn btn-sm btn-primary ml-3\"\n            @click=\"markAsRead(notification.id)\"\n          >\n            Segna come letta\n          </button>\n        </li>\n      </ul>\n    </div>\n    <div v-else>\n      <p>Non ci sono notifiche.</p>\n    </div>\n  </div>\n</template>\n\n\n<script>\nexport default {\n  name: \"UserNotifications\",\n  data() {\n    return {\n      notifications: [], // Lista delle notifiche\n      unreadCount: 0,    // Conteggio delle notifiche non lette\n    };\n  },\n\n  mounted() {\n    this.fetchNotifications();\n  },\n\n  methods: {\n    async fetchNotifications() {\n      try {\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\n        const userId = userData.userId;\n\n        console.log(\"Fetching notifications...\");\n        console.log(\"Selected patient ID:\", userId);\n\n        // Recupera le notifiche dal backend\n        const response = await fetch(`/api/notifications?patientId=${userId}`);\n        if (!response.ok) {\n          throw new Error(\"Errore nel recupero delle notifiche\");\n        }\n\n        const data = await response.json();\n        console.log(\"Notifications data:\", data);\n\n        // Imposta le notifiche e calcola quelle non lette\n        this.notifications = data;\n        this.updateUnreadCount();\n      } catch (error) {\n        console.error(\"Errore nel recupero delle notifiche:\", error);\n      }\n    },\n\n    updateUnreadCount() {\n      this.unreadCount = this.notifications.filter(\n        (notification) => !notification.read\n      ).length;\n    },\n\n    async markAsRead(notificationId) {\n      try {\n        const response = await fetch(`/api/notifications/${notificationId}`, {\n          method: \"PATCH\", // Endpoint per segnare come letta\n        });\n        if (response.ok) {\n          console.log(\"Notifica contrassegnata come letta.\");\n          // Aggiorna lo stato locale\n          const notification = this.notifications.find(\n            (n) => n.id === notificationId\n          );\n          if (notification) {\n            notification.read = true; // Aggiorna lo stato locale\n          }\n          this.updateUnreadCount(); // Aggiorna il conteggio delle notifiche non lette\n        } else {\n          console.error(\"Errore nel segnare la notifica come letta.\");\n        }\n      } catch (error) {\n        console.error(\"Errore durante l'aggiornamento della notifica:\", error);\n      }\n    },\n  },\n};\n\n</script>\n\n<style scoped>\n.list-group-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.float-right {\n  margin-left: 10px;\n}\n</style>\n"],"mappings":"AAoCA,eAAe;EACbA,IAAI,EAAE,mBAAmB;EACzBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,EAAE;MAAE;MACnBC,WAAW,EAAE,CAAC,CAAK;IACrB,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC3B,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMD,kBAAkBA,CAAA,EAAG;MACzB,IAAI;QACF,MAAME,QAAO,GAAIC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7D,MAAMC,MAAK,GAAIL,QAAQ,CAACK,MAAM;QAE9BC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QACxCD,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,MAAM,CAAC;;QAE3C;QACA,MAAMG,QAAO,GAAI,MAAMC,KAAK,CAAC,gCAAgCJ,MAAM,EAAE,CAAC;QACtE,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;QACxD;QAEA,MAAMjB,IAAG,GAAI,MAAMc,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCN,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEb,IAAI,CAAC;;QAExC;QACA,IAAI,CAACC,aAAY,GAAID,IAAI;QACzB,IAAI,CAACmB,iBAAiB,CAAC,CAAC;MAC1B,EAAE,OAAOC,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IAEDD,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAACjB,WAAU,GAAI,IAAI,CAACD,aAAa,CAACoB,MAAM,CACzCC,YAAY,IAAK,CAACA,YAAY,CAACC,IAClC,CAAC,CAACC,MAAM;IACV,CAAC;IAED,MAAMC,UAAUA,CAACC,cAAc,EAAE;MAC/B,IAAI;QACF,MAAMZ,QAAO,GAAI,MAAMC,KAAK,CAAC,sBAAsBW,cAAc,EAAE,EAAE;UACnEC,MAAM,EAAE,OAAO,CAAE;QACnB,CAAC,CAAC;QACF,IAAIb,QAAQ,CAACE,EAAE,EAAE;UACfJ,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;UAClD;UACA,MAAMS,YAAW,GAAI,IAAI,CAACrB,aAAa,CAAC2B,IAAI,CACzCC,CAAC,IAAKA,CAAC,CAACC,EAAC,KAAMJ,cAClB,CAAC;UACD,IAAIJ,YAAY,EAAE;YAChBA,YAAY,CAACC,IAAG,GAAI,IAAI,EAAE;UAC5B;UACA,IAAI,CAACJ,iBAAiB,CAAC,CAAC,EAAE;QAC5B,OAAO;UACLP,OAAO,CAACQ,KAAK,CAAC,4CAA4C,CAAC;QAC7D;MACF,EAAE,OAAOA,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;MACxE;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}