{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container mt-4\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  class: \"list-group\"\n};\nconst _hoisted_4 = {\n  class: \"badge badge-success float-right\"\n};\nconst _hoisted_5 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", null, \"Notifiche\", -1 /* HOISTED */)), $data.notifications.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"ul\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.notifications, (notification, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: \"list-group-item\"\n    }, [_createTextVNode(_toDisplayString(notification.message) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_4, _toDisplayString(notification.date), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5, _cache[0] || (_cache[0] = [_createElementVNode(\"p\", null, \"Non ci sono notifiche.\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","$data","notifications","length","_hoisted_2","_hoisted_3","_Fragment","_renderList","notification","index","_createTextVNode","_toDisplayString","message","_hoisted_4","date","_hoisted_5","_cache"],"sources":["/Users/alessandromagnani/Desktop/UniversitaÌ€/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/views/UserNotifications.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-4\">\n    <h2>Notifiche</h2>\n    <div v-if=\"notifications.length\">\n      <ul class=\"list-group\">\n        <li v-for=\"(notification, index) in notifications\" :key=\"index\" class=\"list-group-item\">\n          {{ notification.message }}\n          <span class=\"badge badge-success float-right\">{{ notification.date }}</span>\n        </li>\n      </ul>\n    </div>\n    <div v-else>\n      <p>Non ci sono notifiche.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"UserNotifications\",\n  data() {\n    return {\n      notifications: [],\n    };\n  },\n\n  mounted() {\n    this.fetchNotifications();\n  },\n\n  methods: {\n    async fetchNotifications() {\n      try {\n        const response = await fetch(`/api/notifications?patientId=${this.selectedPatientId}`);\n        if (!response.ok) {\n          throw new Error(\"Errore nel recupero delle notifiche\");\n        }\n\n        const data = await response.json();\n        this.notifications = data.notifications; // Supponiamo che il backend ritorni un array di notifiche\n      } catch (error) {\n        console.error(\"Errore nel recupero delle notifiche:\", error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.list-group-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.float-right {\n  margin-left: 10px;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAD7BC,GAAA;AAAA;;EAIUD,KAAK,EAAC;AAAY;;EAGZA,KAAK,EAAC;AAAiC;;EAPvDC,GAAA;AAAA;;uBACEC,mBAAA,CAaM,OAbNC,UAaM,G,0BAZJC,mBAAA,CAAkB,YAAd,WAAS,sBACFC,KAAA,CAAAC,aAAa,CAACC,MAAM,I,cAA/BL,mBAAA,CAOM,OAVVM,UAAA,GAIMJ,mBAAA,CAKK,MALLK,UAKK,I,kBAJHP,mBAAA,CAGKQ,SAAA,QARbC,WAAA,CAK4CN,KAAA,CAAAC,aAAa,EALzD,CAKoBM,YAAY,EAAEC,KAAK;yBAA/BX,mBAAA,CAGK;MAH+CD,GAAG,EAAEY,KAAK;MAAEb,KAAK,EAAC;QAL9Ec,gBAAA,CAAAC,gBAAA,CAMaH,YAAY,CAACI,OAAO,IAAG,GAC1B,iBAAAZ,mBAAA,CAA4E,QAA5Ea,UAA4E,EAAAF,gBAAA,CAA3BH,YAAY,CAACM,IAAI,iB;uDAIxEhB,mBAAA,CAEM,OAbViB,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAYMhB,mBAAA,CAA6B,WAA1B,wBAAsB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}