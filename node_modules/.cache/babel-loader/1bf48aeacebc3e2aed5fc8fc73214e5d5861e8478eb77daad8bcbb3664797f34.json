{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, createTextVNode as _createTextVNode, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"modal\"\n};\nconst _hoisted_3 = {\n  class: \"modal-content\"\n};\nconst _hoisted_4 = [\"min\"];\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = {\n  class: \"calendar\"\n};\nconst _hoisted_7 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"date\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"radiograph-count\"\n};\nconst _hoisted_11 = {\n  key: 1,\n  class: \"operation-list\"\n};\nconst _hoisted_12 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_13 = {\n  key: 0\n};\nconst _hoisted_14 = [\"onClick\"];\nconst _hoisted_15 = {\n  key: 1\n};\nconst _hoisted_16 = {\n  key: 0\n};\nconst _hoisted_17 = {\n  class: \"calendar\"\n};\nconst _hoisted_18 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_19 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_20 = [\"onClick\"];\nconst _hoisted_21 = {\n  class: \"date\"\n};\nconst _hoisted_22 = {\n  key: 0,\n  class: \"radiograph-count\"\n};\nconst _hoisted_23 = {\n  key: 0,\n  class: \"day-details\"\n};\nconst _hoisted_24 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[19] || (_cache[19] = _createElementVNode(\"h1\", null, \"Calendario Attività\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.openScheduleModal && $options.openScheduleModal(...args)),\n    class: \"btn btn-primary\"\n  }, \" Pianifica Operazione \"), _createCommentVNode(\" Modale per inserire i dettagli dell'operazione \"), $data.showModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", null, \"Pianifica una nuova operazione\", -1 /* HOISTED */)), _cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    for: \"operationDate\"\n  }, \"Data dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.operationDate = $event),\n    id: \"operationDate\",\n    min: $data.minDate\n  }, null, 8 /* PROPS */, _hoisted_4), [[_vModelText, $data.operationDate]]), _cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    for: \"operationTime\"\n  }, \"Ora dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"time\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.operationTime = $event),\n    id: \"operationTime\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.operationTime]]), _cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    for: \"description\"\n  }, \"Descrizione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.description = $event),\n    id: \"description\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.description]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.scheduleOperation && $options.scheduleOperation(...args)),\n    class: \"btn btn-success\"\n  }, \" Salva \"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.closeScheduleModal && $options.closeScheduleModal(...args)),\n    class: \"btn btn-secondary\"\n  }, \" Annulla \")])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Verifica se l'utente è un paziente o un dottore \"), $data.isPatient ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = $event => $options.changeMonth(1))\n  }, \"›\")]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => $options.showDayDetails(day)\n    }, [_createElementVNode(\"div\", _hoisted_9, _toDisplayString(day.date), 1 /* TEXT */), _createElementVNode(\"div\", null, [_createCommentVNode(\" Log di debug per ogni giorno \"), _createElementVNode(\"pre\", null, _toDisplayString(day), 1 /* TEXT */)]), day.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, _toDisplayString(day.radiographs.length) + \" \" + _toDisplayString(day.radiographs.length === 1 ? \"caricamento radiografia\" : \"caricamenti radiografie\"), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Mostra operazioni pianificate \"), day.operations.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(day.operations, operation => {\n      return _openBlock(), _createElementBlock(\"p\", {\n        key: operation.id,\n        style: {\n          \"color\": \"red\",\n          \"font-size\": \"0.9em\"\n        }\n      }, _toDisplayString(operation.description), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[14] || (_cache[14] = _createElementVNode(\"strong\", null, \"Paziente:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.selectedPatient.name) + \" \" + _toDisplayString($data.selectedPatient.family_name), 1 /* TEXT */)]), $data.selectedDay.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_cache[17] || (_cache[17] = _createElementVNode(\"h3\", null, \"Radiografie caricate:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.name), 1 /* TEXT */), _cache[15] || (_cache[15] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString(radiograph.date), 1 /* TEXT */), _cache[16] || (_cache[16] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_14)]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_15, _cache[18] || (_cache[18] = [_createElementVNode(\"p\", null, \"Nessuna radiografia caricate per questa data.\", -1 /* HOISTED */)])))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti \"), _createElementVNode(\"div\", null, [$data.isDoctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createElementVNode(\"div\", _hoisted_19, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\",\n      onClick: $event => $options.showDayDetails(day)\n    }, [_createElementVNode(\"div\", _hoisted_21, _toDisplayString(day.date), 1 /* TEXT */), day.radiographs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, _toDisplayString(day.radiographs.length) + \" \" + _toDisplayString(day.radiographs.length === 1 ? \"caricamento radiografia\" : \"caricamenti radiografie\"), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_20);\n  }), 128 /* KEYED_FRAGMENT */))])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Dettagli del giorno selezionato con animazione \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: $options.beforeEnter,\n    onEnter: $options.enter,\n    onLeave: $options.leave\n  }, {\n    default: _withCtx(() => [$data.selectedDay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, [_createElementVNode(\"h2\", null, \" Dettagli del Giorno: \" + _toDisplayString($data.selectedDay.date) + \" \" + _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedDay.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: radiograph.name\n      }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, _toDisplayString(radiograph.patientName) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(radiograph.name), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url)\n      }, \" Visualizza Immagine \", 8 /* PROPS */, _hoisted_24)]);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","openScheduleModal","_createCommentVNode","$data","showModal","_hoisted_2","_hoisted_3","for","type","$event","operationDate","id","min","minDate","_hoisted_4","operationTime","description","scheduleOperation","closeScheduleModal","isPatient","_hoisted_5","_hoisted_6","_hoisted_7","changeMonth","_toDisplayString","monthNames","month","year","_Fragment","_renderList","daysInMonth","day","date","showDayDetails","_hoisted_9","radiographs","length","_hoisted_10","operations","_hoisted_11","operation","style","_hoisted_8","_createVNode","_Transition","name","onBeforeEnter","beforeEnter","onEnter","enter","onLeave","leave","default","_withCtx","selectedDay","_hoisted_12","_createTextVNode","selectedPatient","family_name","_hoisted_13","radiograph","enlargeRadiograph","url","_hoisted_14","_hoisted_15","_","isDoctor","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_21","_hoisted_22","_hoisted_20","_hoisted_23","patientName","_hoisted_24"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n    <button @click=\"openScheduleModal\" class=\"btn btn-primary\">\n      Pianifica Operazione\n    </button>\n\n    <!-- Modale per inserire i dettagli dell'operazione -->\n    <div v-if=\"showModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h2>Pianifica una nuova operazione</h2>\n        <label for=\"operationDate\">Data dell'operazione:</label>\n        <input\n          type=\"date\"\n          v-model=\"operationDate\"\n          id=\"operationDate\"\n          :min=\"minDate\"\n        />\n\n        <label for=\"operationTime\">Ora dell'operazione:</label>\n        <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\n\n        <label for=\"description\">Descrizione:</label>\n        <textarea v-model=\"description\" id=\"description\"></textarea>\n\n        <button @click=\"scheduleOperation\" class=\"btn btn-success\">\n          Salva\n        </button>\n        <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\n          Annulla\n        </button>\n      </div>\n    </div>\n    <!-- Verifica se l'utente è un paziente o un dottore -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <div\n          v-for=\"day in daysInMonth\"\n          :key=\"day.date\"\n          class=\"calendar-day\"\n          @click=\"showDayDetails(day)\"\n        >\n          <div class=\"date\">{{ day.date }}</div>\n          <div>\n            <!-- Log di debug per ogni giorno -->\n            <pre>{{ day }}</pre>\n          </div>\n          <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n            {{ day.radiographs.length }}\n            {{\n              day.radiographs.length === 1\n                ? \"caricamento radiografia\"\n                : \"caricamenti radiografie\"\n            }}\n          </div>\n          <!-- Mostra operazioni pianificate -->\n          <div v-if=\"day.operations.length > 0\" class=\"operation-list\">\n            <p\n              v-for=\"operation in day.operations\"\n              :key=\"operation.id\"\n              style=\"color: red; font-size: 0.9em\"\n            >\n              {{ operation.description }}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <p>\n            <strong>Paziente:</strong> {{ selectedPatient.name }}\n            {{ selectedPatient.family_name }}\n          </p>\n          <div v-if=\"selectedDay.radiographs.length > 0\">\n            <h3>Radiografie caricate:</h3>\n            <ul>\n              <li\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <strong>{{ radiograph.name }}</strong\n                ><br />\n                <span>{{ radiograph.date }}</span\n                ><br />\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </li>\n            </ul>\n          </div>\n          <div v-else>\n            <p>Nessuna radiografia caricate per questa data.</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n\n    <!-- Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti -->\n    <div v-else>\n      <div v-if=\"isDoctor\">\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"changeMonth(-1)\">&#8249;</button>\n            <span>{{ monthNames[month] }} {{ year }}</span>\n            <button @click=\"changeMonth(1)\">&#8250;</button>\n          </div>\n\n          <div class=\"calendar-grid\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"day.date\"\n              class=\"calendar-day\"\n              @click=\"showDayDetails(day)\"\n            >\n              <div class=\"date\">{{ day.date }}</div>\n              <div v-if=\"day.radiographs.length > 0\" class=\"radiograph-count\">\n                {{ day.radiographs.length }}\n                {{\n                  day.radiographs.length === 1\n                    ? \"caricamento radiografia\"\n                    : \"caricamenti radiografie\"\n                }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <div\n            v-for=\"radiograph in selectedDay.radiographs\"\n            :key=\"radiograph.name\"\n          >\n            <p>\n              <strong>{{ radiograph.patientName }}:</strong>\n              {{ radiograph.name }}\n            </p>\n            <button @click=\"enlargeRadiograph(radiograph.url)\">\n              Visualizza Immagine\n            </button>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      patientId: null, // ID del paziente\n      selectedPatient: null, // Paziente selezionato (loggato)\n      patients: [], // Pazienti associati al dottore\n      patient: {\n        operations: [], // Inizializzato con un array vuoto\n      },\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      // Aggrega radiografie e operazioni\n      const dataPerDay = {};\n\n      if (this.isDoctor) {\n        // Per i medici, aggrega tutte le operazioni dei pazienti\n        this.patients.forEach((patient) => {\n          if (patient.operations) {\n            patient.operations.forEach((operation) => {\n              const operationDate = new Date(operation.date).toDateString();\n              if (!dataPerDay[operationDate]) {\n                dataPerDay[operationDate] = { radiographs: [], operations: [] };\n              }\n              dataPerDay[operationDate].operations.push({\n                ...operation,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n        });\n      } else {\n        // Per i pazienti, usa solo le proprie operazioni e radiografie\n        this.radiographs.forEach((radiograph) => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!dataPerDay[radiographDate]) {\n            dataPerDay[radiographDate] = { radiographs: [], operations: [] };\n          }\n          dataPerDay[radiographDate].radiographs.push(radiograph);\n        });\n\n        this.selectedPatient.operations.forEach((operation) => {\n          const operationDate = new Date(operation.date).toDateString();\n          if (!dataPerDay[operationDate]) {\n            dataPerDay[operationDate] = { radiographs: [], operations: [] };\n          }\n          dataPerDay[operationDate].operations.push(operation);\n        });\n      }\n\n      // Popola i giorni del mese con dati aggregati\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i).toDateString();\n        const dataOnDay = dataPerDay[dayDate] || {\n          radiographs: [],\n          operations: [],\n        };\n\n        days.push({\n          date: i,\n          radiographs: dataOnDay.radiographs,\n          operations: dataOnDay.operations,\n        });\n      }\n\n      console.log(\"Dati aggregati per i giorni del mese:\", days); // Debug finale\n      return days;\n    },\n  },\n  methods: {\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (!this.operationDate || !this.operationTime || !this.description) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n        const patientId = this.selectedPatient?.userId || \"default_patient_id\"; // Sostituisci con un ID valido\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(\n          this.operationDate,\n          this.operationTime\n        );\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId,\n            operationDate: formattedDate, // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString(), // Timestamp di creazione\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\n          );\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\n          \"Errore durante la pianificazione dell'operazione:\",\n          error\n        );\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      console.log(\"Dati utente caricati:\", userData); // Debug dei dati utente\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n        console.log(\"Utente identificato come paziente:\", this.selectedPatient);\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Utente identificato come dottore:\", userData);\n      } else {\n        console.error(\"Ruolo utente sconosciuto o dati mancanti:\", userData);\n      }\n    },\n\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      console.log(\"ID del dottore:\", doctorId); // Debug dell'ID del dottore\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          console.log(\"Elenco pazienti recuperato:\", data); // Debug elenco pazienti\n          this.patients = data;\n\n          // Carica operazioni e radiografie per ogni paziente\n          this.patients.forEach((patient) => {\n            console.log(\n              `Caricamento dati per il paziente ${patient.userId}:`,\n              patient\n            );\n            this.loadOperations(patient.userId);\n            this.loadRadiographs(patient.userId);\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      } else {\n        console.error(\n          \"ID del dottore mancante, impossibile caricare i pazienti.\"\n        );\n      }\n    },\n\n    async loadOperations(patientId) {\n      if (!patientId) {\n        console.error(\"patientId non valido:\", patientId);\n        return; // Non fare nulla se patientId non è valido\n      }\n      console.log(`Caricamento operazioni per il paziente ${patientId}...`); // Debug caricamento operazioni\n      try {\n        const response = await fetch(`/api/patients/${patientId}/operations`);\n        const data = await response.json();\n        console.log(\n          `Operazioni recuperate per il paziente ${patientId}:`,\n          data\n        ); // Debug dati operazioni\n        // Trova il paziente e aggiorna le operazioni\n        const patient = this.patients.find((p) => p.userId === patientId);\n        if (patient) {\n          patient.operations = data.operations || []; // Assicurati che sia un array\n        } else {\n          console.warn(\n            `Paziente ${patientId} non trovato nella lista pazienti.`\n          );\n        }\n      } catch (error) {\n        console.error(\n          `Errore nel caricamento delle operazioni per il paziente ${patientId}:`,\n          error\n        );\n      }\n    },\n\n    async loadRadiographs(patientId) {\n      console.log(`Caricamento radiografie per il paziente ${patientId}...`); // Debug caricamento radiografie\n      try {\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n          console.log(\n            `Radiografie recuperate per il paziente ${patientId}:`,\n            data\n          ); // Debug dati radiografie\n          // Trova il paziente e aggiorna le radiografie\n          const patient = this.patients.find((p) => p.userId === patientId);\n          if (patient) {\n            patient.radiographs = data; // Aggiungi le radiografie al paziente\n          } else {\n            console.warn(\n              `Paziente ${patientId} non trovato nella lista pazienti.`\n            );\n          }\n        } else {\n          console.error(\n            `Errore nel recupero delle radiografie per il paziente ${patientId}:`,\n            await response.text()\n          );\n        }\n      } catch (error) {\n        console.error(\n          `Errore di connessione al server per le radiografie del paziente ${patientId}:`,\n          error\n        );\n      }\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.radiograph-count {\n  position: absolute;\n  bottom: 10px;\n  left: 5px;\n  font-size: 0.9em;\n  color: #007bff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 1.5em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 20px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1.5em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 400px;\n  text-align: center;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 10px;\n  text-align: left;\n}\n\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n}\n\n.btn {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAoB;;EADjCC,GAAA;EAQ0BD,KAAK,EAAC;;;EACrBA,KAAK,EAAC;AAAe;mBAThC;;EAAAC,GAAA;AAAA;;EAmCWD,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAiB;mBApCpC;;EAgDeA,KAAK,EAAC;AAAM;;EAhD3BC,GAAA;EAqDiDD,KAAK,EAAC;;;EArDvDC,GAAA;EA8DgDD,KAAK,EAAC;;;EA9DtDC,GAAA;EAiFgCD,KAAK,EAAC;;;EAjFtCC,GAAA;AAAA;oBAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAqHaD,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAiB;;EAMvBA,KAAK,EAAC;AAAe;oBA5HpC;;EAmImBA,KAAK,EAAC;AAAM;;EAnI/BC,GAAA;EAoIqDD,KAAK,EAAC;;;EApI3DC,GAAA;EAwJgCD,KAAK,EAAC;;oBAxJtC;;uBACEE,mBAAA,CA2KM,OA3KNC,UA2KM,G,4BA1KJC,mBAAA,CAA4B,YAAxB,qBAAmB,sBACvBA,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,iBAAA,IAAAD,QAAA,CAAAC,iBAAA,IAAAF,IAAA,CAAiB;IAAEP,KAAK,EAAC;KAAkB,wBAE3D,GAEAU,mBAAA,oDAAuD,EAC5CC,KAAA,CAAAC,SAAS,I,cAApBV,mBAAA,CAwBM,OAxBNW,UAwBM,GAvBJT,mBAAA,CAsBM,OAtBNU,UAsBM,G,4BArBJV,mBAAA,CAAuC,YAAnC,gCAA8B,sB,4BAClCA,mBAAA,CAAwD;IAAjDW,GAAG,EAAC;EAAe,GAAC,uBAAqB,sB,gBAChDX,mBAAA,CAKE;IAJAY,IAAI,EAAC,MAAM;IAbrB,uBAAAV,MAAA,QAAAA,MAAA,MAAAW,MAAA,IAcmBN,KAAA,CAAAO,aAAa,GAAAD,MAAA;IACtBE,EAAE,EAAC,eAAe;IACjBC,GAAG,EAAET,KAAA,CAAAU;0BAhBhBC,UAAA,I,cAcmBX,KAAA,CAAAO,aAAa,E,+BAKxBd,mBAAA,CAAuD;IAAhDW,GAAG,EAAC;EAAe,GAAC,sBAAoB,sB,gBAC/CX,mBAAA,CAAgE;IAAzDY,IAAI,EAAC,MAAM;IApB1B,uBAAAV,MAAA,QAAAA,MAAA,MAAAW,MAAA,IAoBoCN,KAAA,CAAAY,aAAa,GAAAN,MAAA;IAAEE,EAAE,EAAC;iDAAlBR,KAAA,CAAAY,aAAa,E,+BAEzCnB,mBAAA,CAA6C;IAAtCW,GAAG,EAAC;EAAa,GAAC,cAAY,sB,gBACrCX,mBAAA,CAA4D;IAvBpE,uBAAAE,MAAA,QAAAA,MAAA,MAAAW,MAAA,IAuB2BN,KAAA,CAAAa,WAAW,GAAAP,MAAA;IAAEE,EAAE,EAAC;iDAAhBR,KAAA,CAAAa,WAAW,E,GAE9BpB,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAiB,iBAAA,IAAAjB,QAAA,CAAAiB,iBAAA,IAAAlB,IAAA,CAAiB;IAAEP,KAAK,EAAC;KAAkB,SAE3D,GACAI,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAkB,kBAAA,IAAAlB,QAAA,CAAAkB,kBAAA,IAAAnB,IAAA,CAAkB;IAAEP,KAAK,EAAC;KAAoB,WAE9D,E,OA9BRU,mBAAA,gBAiCIA,mBAAA,qDAAwD,EAC7CC,KAAA,CAAAgB,SAAS,I,cAApBzB,mBAAA,CA8EM,OAhHV0B,UAAA,GAmCMxB,mBAAA,CAqCM,OArCNyB,UAqCM,GApCJzB,mBAAA,CAIM,OAJN0B,UAIM,GAHJ1B,mBAAA,CAAiD;IAAxCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAW,MAAA,IAAET,QAAA,CAAAuB,WAAW;KAAM,GAAO,GACxC3B,mBAAA,CAA+C,cAAA4B,gBAAA,CAAtCrB,KAAA,CAAAsB,UAAU,CAACtB,KAAA,CAAAuB,KAAK,KAAI,GAAC,GAAAF,gBAAA,CAAGrB,KAAA,CAAAwB,IAAI,kBACrC/B,mBAAA,CAAgD;IAAvCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAW,MAAA,IAAET,QAAA,CAAAuB,WAAW;KAAK,GAAO,E,sBAGzC7B,mBAAA,CA6BMkC,SAAA,QAvEdC,WAAA,CA2CwB7B,QAAA,CAAA8B,WAAW,EAAlBC,GAAG;yBADZrC,mBAAA,CA6BM;MA3BHD,GAAG,EAAEsC,GAAG,CAACC,IAAI;MACdxC,KAAK,EAAC,cAAc;MACnBK,OAAK,EAAAY,MAAA,IAAET,QAAA,CAAAiC,cAAc,CAACF,GAAG;QAE1BnC,mBAAA,CAAsC,OAAtCsC,UAAsC,EAAAV,gBAAA,CAAjBO,GAAG,CAACC,IAAI,kBAC7BpC,mBAAA,CAGM,cAFJM,mBAAA,kCAAqC,EACrCN,mBAAA,CAAoB,aAAA4B,gBAAA,CAAZO,GAAG,iB,GAEFA,GAAG,CAACI,WAAW,CAACC,MAAM,Q,cAAjC1C,mBAAA,CAOM,OAPN2C,WAOM,EAAAb,gBAAA,CANDO,GAAG,CAACI,WAAW,CAACC,MAAM,IAAG,GAC5B,GAAAZ,gBAAA,CACEO,GAAG,CAACI,WAAW,CAACC,MAAM,S,yEAxDpClC,mBAAA,gBA6DUA,mBAAA,mCAAsC,EAC3B6B,GAAG,CAACO,UAAU,CAACF,MAAM,Q,cAAhC1C,mBAAA,CAQM,OARN6C,WAQM,I,kBAPJ7C,mBAAA,CAMIkC,SAAA,QArEhBC,WAAA,CAgEkCE,GAAG,CAACO,UAAU,EAA3BE,SAAS;2BADlB9C,mBAAA,CAMI;QAJDD,GAAG,EAAE+C,SAAS,CAAC7B,EAAE;QAClB8B,KAAoC,EAApC;UAAA;UAAA;QAAA;0BAEGD,SAAS,CAACxB,WAAW;wCApEtCd,mBAAA,e,iBAAAwC,UAAA;oCA0EMxC,mBAAA,oDAAuD,EACvDyC,YAAA,CAoCaC,WAAA;IAnCXC,IAAI,EAAC,MAAM;IACVC,aAAY,EAAE9C,QAAA,CAAA+C,WAAW;IACzBC,OAAK,EAAEhD,QAAA,CAAAiD,KAAK;IACZC,OAAK,EAAElD,QAAA,CAAAmD;;IA/EhBC,OAAA,EAAAC,QAAA,CAiFQ,MA6BM,CA7BKlD,KAAA,CAAAmD,WAAW,I,cAAtB5D,mBAAA,CA6BM,OA7BN6D,WA6BM,GA5BJ3D,mBAAA,CAGK,YAHD,wBACmB,GAAA4B,gBAAA,CAAGrB,KAAA,CAAAmD,WAAW,CAACtB,IAAI,IAAG,GAAC,GAAAR,gBAAA,CAAGrB,KAAA,CAAAsB,UAAU,CAACtB,KAAA,CAAAuB,KAAK,KAAI,GACnE,GAAAF,gBAAA,CAAGrB,KAAA,CAAAwB,IAAI,kBAET/B,mBAAA,CAGI,Y,4BAFFA,mBAAA,CAA0B,gBAAlB,WAAS,sBAvF7B4D,gBAAA,CAuFsC,GAAC,GAAAhC,gBAAA,CAAGrB,KAAA,CAAAsD,eAAe,CAACZ,IAAI,IAAG,GACrD,GAAArB,gBAAA,CAAGrB,KAAA,CAAAsD,eAAe,CAACC,WAAW,iB,GAErBvD,KAAA,CAAAmD,WAAW,CAACnB,WAAW,CAACC,MAAM,Q,cAAzC1C,mBAAA,CAgBM,OA1GhBiE,WAAA,G,4BA2FY/D,mBAAA,CAA8B,YAA1B,uBAAqB,sBACzBA,mBAAA,CAaK,c,kBAZHF,mBAAA,CAWKkC,SAAA,QAxGnBC,WAAA,CA8FqC1B,KAAA,CAAAmD,WAAW,CAACnB,WAAW,EAArCyB,UAAU;2BADnBlE,mBAAA,CAWK;QATFD,GAAG,EAAEmE,UAAU,CAACf;UAEjBjD,mBAAA,CACC,gBAAA4B,gBAAA,CADUoC,UAAU,CAACf,IAAI,kB,4BACzBjD,mBAAA,CAAM,sCACPA,mBAAA,CACC,cAAA4B,gBAAA,CADQoC,UAAU,CAAC5B,IAAI,kB,4BACvBpC,mBAAA,CAAM,sCACPA,mBAAA,CAES;QAFAC,OAAK,EAAAY,MAAA,IAAET,QAAA,CAAA6D,iBAAiB,CAACD,UAAU,CAACE,GAAG;SAAG,uBAEnD,iBAvGhBC,WAAA,E;yDA2GUrE,mBAAA,CAEM,OA7GhBsE,WAAA,EAAAlE,MAAA,SAAAA,MAAA,QA4GYF,mBAAA,CAAoD,WAAjD,+CAA6C,oB,SA5G5DM,mBAAA,e;IAAA+D,CAAA;iFAmHIvE,mBAAA,CAwDMkC,SAAA;IA3KVnC,GAAA;EAAA,IAkHIS,mBAAA,4EAA+E,EAC/EN,mBAAA,CAwDM,cAvDOO,KAAA,CAAA+D,QAAQ,I,cAAnBxE,mBAAA,CA2BM,OA/IZyE,WAAA,GAqHQvE,mBAAA,CAyBM,OAzBNwE,WAyBM,GAxBJxE,mBAAA,CAIM,OAJNyE,WAIM,GAHJzE,mBAAA,CAAiD;IAAxCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAW,MAAA,IAAET,QAAA,CAAAuB,WAAW;KAAM,GAAO,GACxC3B,mBAAA,CAA+C,cAAA4B,gBAAA,CAAtCrB,KAAA,CAAAsB,UAAU,CAACtB,KAAA,CAAAuB,KAAK,KAAI,GAAC,GAAAF,gBAAA,CAAGrB,KAAA,CAAAwB,IAAI,kBACrC/B,mBAAA,CAAgD;IAAvCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAW,MAAA,IAAET,QAAA,CAAAuB,WAAW;KAAK,GAAO,E,GAGzC3B,mBAAA,CAiBM,OAjBN0E,WAiBM,I,kBAhBJ5E,mBAAA,CAeMkC,SAAA,QA5IlBC,WAAA,CA8H4B7B,QAAA,CAAA8B,WAAW,EAAlBC,GAAG;yBADZrC,mBAAA,CAeM;MAbHD,GAAG,EAAEsC,GAAG,CAACC,IAAI;MACdxC,KAAK,EAAC,cAAc;MACnBK,OAAK,EAAAY,MAAA,IAAET,QAAA,CAAAiC,cAAc,CAACF,GAAG;QAE1BnC,mBAAA,CAAsC,OAAtC2E,WAAsC,EAAA/C,gBAAA,CAAjBO,GAAG,CAACC,IAAI,kBAClBD,GAAG,CAACI,WAAW,CAACC,MAAM,Q,cAAjC1C,mBAAA,CAOM,OAPN8E,WAOM,EAAAhD,gBAAA,CANDO,GAAG,CAACI,WAAW,CAACC,MAAM,IAAG,GAC5B,GAAAZ,gBAAA,CACEO,GAAG,CAACI,WAAW,CAACC,MAAM,S,yEAvIxClC,mBAAA,e,iBAAAuE,WAAA;0CAAAvE,mBAAA,gBAiJMA,mBAAA,oDAAuD,EACvDyC,YAAA,CAwBaC,WAAA;IAvBXC,IAAI,EAAC,MAAM;IACVC,aAAY,EAAE9C,QAAA,CAAA+C,WAAW;IACzBC,OAAK,EAAEhD,QAAA,CAAAiD,KAAK;IACZC,OAAK,EAAElD,QAAA,CAAAmD;;IAtJhBC,OAAA,EAAAC,QAAA,CAwJQ,MAiBM,CAjBKlD,KAAA,CAAAmD,WAAW,I,cAAtB5D,mBAAA,CAiBM,OAjBNgF,WAiBM,GAhBJ9E,mBAAA,CAGK,YAHD,wBACmB,GAAA4B,gBAAA,CAAGrB,KAAA,CAAAmD,WAAW,CAACtB,IAAI,IAAG,GAAC,GAAAR,gBAAA,CAAGrB,KAAA,CAAAsB,UAAU,CAACtB,KAAA,CAAAuB,KAAK,KAAI,GACnE,GAAAF,gBAAA,CAAGrB,KAAA,CAAAwB,IAAI,mB,kBAETjC,mBAAA,CAWMkC,SAAA,QAxKhBC,WAAA,CA8JiC1B,KAAA,CAAAmD,WAAW,CAACnB,WAAW,EAArCyB,UAAU;2BADnBlE,mBAAA,CAWM;QATHD,GAAG,EAAEmE,UAAU,CAACf;UAEjBjD,mBAAA,CAGI,YAFFA,mBAAA,CAA8C,gBAAA4B,gBAAA,CAAnCoC,UAAU,CAACe,WAAW,IAAG,GAAC,iBAlKnDnB,gBAAA,CAkK4D,GAC9C,GAAAhC,gBAAA,CAAGoC,UAAU,CAACf,IAAI,iB,GAEpBjD,mBAAA,CAES;QAFAC,OAAK,EAAAY,MAAA,IAAET,QAAA,CAAA6D,iBAAiB,CAACD,UAAU,CAACE,GAAG;SAAG,uBAEnD,iBAvKZc,WAAA,E;wCAAA1E,mBAAA,e;IAAA+D,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}