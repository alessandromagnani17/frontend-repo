{"ast":null,"code":"import { ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport axios from \"axios\";\nexport default {\n  name: \"UserLogin\",\n  setup() {\n    // Stato del form\n    const form = ref({\n      email: \"\",\n      password: \"\",\n      rememberMe: false\n    });\n\n    // Stato degli errori\n    const errors = ref({\n      email: \"\",\n      password: \"\",\n      general: \"\"\n    });\n    const router = useRouter();\n    const currentStep = ref(1);\n    const loading = ref(false);\n    const showPassword = ref(false);\n    const showMfaStep = ref(false); // Toggle MFA step visibility\n    const qrCodeUrl = ref(\"\"); // Store QR code URL\n    const session = ref(\"\"); // Store MFA session token\n    const mfaCode = ref(\"\"); // Store user input MFA code\n\n    // Funzione per passare allo step successivo\n    const goToNextStep = () => {\n      if (isStepValid(currentStep.value)) {\n        currentStep.value++;\n      }\n    };\n\n    // Funzione per tornare allo step precedente\n    const goToPreviousStep = () => {\n      currentStep.value--;\n    };\n\n    // Funzione per validare il form\n    const validateForm = () => {\n      errors.value = {\n        email: form.value.email ? \"\" : \"Email è richiesta\",\n        password: form.value.password ? \"\" : \"Password è richiesta\"\n      };\n      return Object.values(errors.value).every(error => !error);\n    };\n\n    // Funzione per validare lo step\n    const isStepValid = step => {\n      if (step === 1) {\n        return form.value.email;\n      } else if (step === 2) {\n        return form.value.password;\n      }\n      return false;\n    };\n\n    // Funzione per mostrare/nascondere la password\n    const toggleShowPassword = () => {\n      showPassword.value = !showPassword.value;\n    };\n    const onSubmit = async () => {\n      if (!validateForm()) return;\n      loading.value = true;\n      try {\n        // Effettua la richiesta POST per il login usando axios\n        const response = await axios.post(\"http://127.0.0.1:5000/login\", {\n          email: form.value.email,\n          password: form.value.password\n        });\n        if (response.data.message === \"MFA setup required\") {\n          // Step 2: Show MFA setup form\n          showMfaStep.value = true;\n          qrCodeUrl.value = response.data.qr_code;\n          session.value = response.data.session;\n        } else {\n          // Simula successo del login\n          alert(\"Login avvenuto con successo!\");\n          router.push({\n            name: \"Welcome\",\n            query: {\n              username: form.value.email\n            }\n          });\n        }\n      } catch (error) {\n        errors.value.general = error.response?.data?.error || \"Errore sconosciuto durante il login\";\n      } finally {\n        loading.value = false;\n      }\n    };\n    const onMfaSubmit = async () => {\n      loading.value = true;\n      try {\n        // Effettua la richiesta POST per verificare MFA\n        const response = await axios.post(\"http://127.0.0.1:5000/verify-mfa\", {\n          session: session.value,\n          code: mfaCode.value\n        });\n        if (response.data.message === \"MFA verified\") {\n          alert(\"MFA verification successful!\");\n          // Redirect or handle authenticated state here\n        }\n      } catch (error) {\n        errors.value.general = error.response?.data?.error || \"MFA verification failed.\";\n      } finally {\n        loading.value = false;\n      }\n    };\n    return {\n      form,\n      currentStep,\n      loading,\n      showPassword,\n      toggleShowPassword,\n      onSubmit,\n      goToNextStep,\n      goToPreviousStep,\n      isStepValid,\n      errors,\n      showMfaStep,\n      qrCodeUrl,\n      session,\n      mfaCode,\n      onMfaSubmit\n    };\n  }\n};","map":{"version":3,"names":["ref","useRouter","axios","name","setup","form","email","password","rememberMe","errors","general","router","currentStep","loading","showPassword","showMfaStep","qrCodeUrl","session","mfaCode","goToNextStep","isStepValid","value","goToPreviousStep","validateForm","Object","values","every","error","step","toggleShowPassword","onSubmit","response","post","data","message","qr_code","alert","push","query","username","onMfaSubmit","code"],"sources":["C:\\Users\\Utente\\Desktop\\osteoarthritis-project\\frontend\\src\\components\\UserLogin.vue"],"sourcesContent":["<template>\r\n  <div class=\"login\">\r\n    <div class=\"container mt-5\">\r\n      <div class=\"header\">\r\n        <button\r\n          v-if=\"currentStep > 1\"\r\n          class=\"back-button\"\r\n          @click=\"goToPreviousStep\"\r\n        >\r\n          <img src=\"@/assets/back-icon.svg\" alt=\"Indietro\" class=\"back-icon\" />\r\n        </button>\r\n      </div>\r\n\r\n      <span class=\"step-title\">Passaggio {{ currentStep }} di 2</span>\r\n      <h2 class=\"mb-4\">Accedi al tuo Account</h2>\r\n\r\n      <!-- Step 1: Login Form -->\r\n      <form @submit.prevent=\"onSubmit\" v-if=\"!showMfaStep\">\r\n        <!-- Step 1: Inserisci Email -->\r\n        <div v-if=\"currentStep === 1\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"email\" class=\"form-label\">Email</label>\r\n            <input\r\n              id=\"email\"\r\n              v-model=\"form.email\"\r\n              type=\"email\"\r\n              class=\"form-control\"\r\n              :class=\"{ 'is-invalid': errors.email }\"\r\n              required\r\n            />\r\n            <div class=\"invalid-feedback\">{{ errors.email }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Step 2: Inserisci Password -->\r\n        <div v-if=\"currentStep === 2\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"password\" class=\"form-label\">Password</label>\r\n            <div class=\"input-group\">\r\n              <input\r\n                id=\"password\"\r\n                v-model=\"form.password\"\r\n                :type=\"showPassword ? 'text' : 'password'\"\r\n                class=\"form-control\"\r\n                :class=\"{ 'is-invalid': errors.password }\"\r\n                required\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn eye-button\"\r\n                @click=\"toggleShowPassword\"\r\n              >\r\n                <img\r\n                  :src=\"\r\n                    showPassword\r\n                      ? require('@/assets/eye-off.svg')\r\n                      : require('@/assets/eye-on.svg')\r\n                  \"\r\n                  alt=\"Toggle Password Visibility\"\r\n                  class=\"eye-icon\"\r\n                />\r\n              </button>\r\n            </div>\r\n            <div class=\"invalid-feedback\">{{ errors.password }}</div>\r\n          </div>\r\n\r\n          <div class=\"mb-3 form-check\">\r\n            <input\r\n              id=\"rememberMe\"\r\n              v-model=\"form.rememberMe\"\r\n              type=\"checkbox\"\r\n              class=\"form-check-input\"\r\n            />\r\n            <label for=\"rememberMe\" class=\"form-check-label\">Ricordami</label>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Bottone di avanzamento o login -->\r\n        <div v-if=\"currentStep < 2\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary btn-next\"\r\n            @click=\"goToNextStep\"\r\n            :disabled=\"!isStepValid(currentStep)\"\r\n          >\r\n            Avanti\r\n          </button>\r\n        </div>\r\n\r\n        <div v-if=\"currentStep === 2\">\r\n          <button\r\n            type=\"submit\"\r\n            class=\"btn btn-primary btn-next\"\r\n            :disabled=\"loading || !isStepValid(currentStep)\"\r\n          >\r\n            <span v-if=\"loading\">Login...</span>\r\n            <span v-else>Accedi</span>\r\n          </button>\r\n          <!-- Error message -->\r\n          <div v-if=\"errors.general\" class=\"invalid-feedback mt-3\">\r\n            {{ errors.general }}\r\n          </div>\r\n        </div>\r\n      </form>\r\n\r\n      <!-- Step 3: MFA Setup -->\r\n      <div v-if=\"showMfaStep\">\r\n        <h2>Set up Google Authenticator</h2>\r\n        <p>\r\n          Scan the QR code below with your Google Authenticator app, then enter\r\n          the code.\r\n        </p>\r\n\r\n        <!-- QR Code Image -->\r\n        <img\r\n          :src=\"'data:image/png;base64,' + qrCodeUrl\"\r\n          alt=\"QR Code for Google Authenticator\"\r\n        />\r\n\r\n        <!-- Input field for MFA code -->\r\n        <form @submit.prevent=\"onMfaSubmit\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"mfaCode\" class=\"form-label\">Enter 6-digit code</label>\r\n            <input\r\n              id=\"mfaCode\"\r\n              v-model=\"mfaCode\"\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-primary\">Verify Code</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Loading overlay -->\r\n    <div v-if=\"loading\" class=\"loading-overlay\">\r\n      <div class=\"loading-icon\">\r\n        <img src=\"@/assets/loading-icon.svg\" alt=\"Loading...\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from \"vue\";\r\nimport { useRouter } from \"vue-router\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"UserLogin\",\r\n  setup() {\r\n    // Stato del form\r\n    const form = ref({\r\n      email: \"\",\r\n      password: \"\",\r\n      rememberMe: false,\r\n    });\r\n\r\n    // Stato degli errori\r\n    const errors = ref({\r\n      email: \"\",\r\n      password: \"\",\r\n      general: \"\",\r\n    });\r\n\r\n    const router = useRouter();\r\n    const currentStep = ref(1);\r\n    const loading = ref(false);\r\n    const showPassword = ref(false);\r\n    const showMfaStep = ref(false); // Toggle MFA step visibility\r\n    const qrCodeUrl = ref(\"\"); // Store QR code URL\r\n    const session = ref(\"\"); // Store MFA session token\r\n    const mfaCode = ref(\"\"); // Store user input MFA code\r\n\r\n    // Funzione per passare allo step successivo\r\n    const goToNextStep = () => {\r\n      if (isStepValid(currentStep.value)) {\r\n        currentStep.value++;\r\n      }\r\n    };\r\n\r\n    // Funzione per tornare allo step precedente\r\n    const goToPreviousStep = () => {\r\n      currentStep.value--;\r\n    };\r\n\r\n    // Funzione per validare il form\r\n    const validateForm = () => {\r\n      errors.value = {\r\n        email: form.value.email ? \"\" : \"Email è richiesta\",\r\n        password: form.value.password ? \"\" : \"Password è richiesta\",\r\n      };\r\n      return Object.values(errors.value).every((error) => !error);\r\n    };\r\n\r\n    // Funzione per validare lo step\r\n    const isStepValid = (step) => {\r\n      if (step === 1) {\r\n        return form.value.email;\r\n      } else if (step === 2) {\r\n        return form.value.password;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    // Funzione per mostrare/nascondere la password\r\n    const toggleShowPassword = () => {\r\n      showPassword.value = !showPassword.value;\r\n    };\r\n\r\n    const onSubmit = async () => {\r\n      if (!validateForm()) return;\r\n      loading.value = true;\r\n\r\n      try {\r\n        // Effettua la richiesta POST per il login usando axios\r\n        const response = await axios.post(\"http://127.0.0.1:5000/login\", {\r\n          email: form.value.email,\r\n          password: form.value.password,\r\n        });\r\n\r\n        if (response.data.message === \"MFA setup required\") {\r\n          // Step 2: Show MFA setup form\r\n          showMfaStep.value = true;\r\n          qrCodeUrl.value = response.data.qr_code;\r\n          session.value = response.data.session;\r\n        } else {\r\n          // Simula successo del login\r\n          alert(\"Login avvenuto con successo!\");\r\n          router.push({\r\n            name: \"Welcome\",\r\n            query: { username: form.value.email },\r\n          });\r\n        }\r\n      } catch (error) {\r\n        errors.value.general =\r\n          error.response?.data?.error || \"Errore sconosciuto durante il login\";\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    const onMfaSubmit = async () => {\r\n      loading.value = true;\r\n      try {\r\n        // Effettua la richiesta POST per verificare MFA\r\n        const response = await axios.post(\"http://127.0.0.1:5000/verify-mfa\", {\r\n          session: session.value,\r\n          code: mfaCode.value,\r\n        });\r\n\r\n        if (response.data.message === \"MFA verified\") {\r\n          alert(\"MFA verification successful!\");\r\n          // Redirect or handle authenticated state here\r\n        }\r\n      } catch (error) {\r\n        errors.value.general =\r\n          error.response?.data?.error || \"MFA verification failed.\";\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    return {\r\n      form,\r\n      currentStep,\r\n      loading,\r\n      showPassword,\r\n      toggleShowPassword,\r\n      onSubmit,\r\n      goToNextStep,\r\n      goToPreviousStep,\r\n      isStepValid,\r\n      errors,\r\n      showMfaStep,\r\n      qrCodeUrl,\r\n      session,\r\n      mfaCode,\r\n      onMfaSubmit,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login {\r\n  background: #ffffff; /* Sfondo bianco */\r\n  min-height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-shadow: 0 0px 0px rgba(0, 0, 0, 0);\r\n}\r\n\r\n.container {\r\n  max-width: 600px;\r\n  padding: 40px;\r\n  border-radius: 15px;\r\n  background: #ffffff;\r\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\r\n  margin-top: 100px;\r\n  height: auto;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.back-button {\r\n  background: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n  margin-left: -10px;\r\n}\r\n\r\n.back-icon {\r\n  width: 30px;\r\n  height: 30px;\r\n}\r\n\r\n.step-title {\r\n  font-size: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\nh2 {\r\n  font-size: 18px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.form-label {\r\n  font-size: 12px;\r\n}\r\n\r\n.form-control {\r\n  background: #f2f2f2;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  font-size: 12px;\r\n}\r\n\r\n.input-group {\r\n  position: relative;\r\n}\r\n\r\n.eye-button {\r\n  background: transparent;\r\n  border: 1px solid #ccc;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 46px;\r\n}\r\n\r\n.eye-icon {\r\n  width: 18px;\r\n  height: 18px;\r\n  margin: auto;\r\n}\r\n\r\n.btn-next {\r\n  width: 100%;\r\n  margin-top: 20px;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n}\r\n\r\n.loading-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.loading-icon {\r\n  width: 50px;\r\n  height: 50px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}