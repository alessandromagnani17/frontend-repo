{"ast":null,"code":"import Calendar from \"./ScheduleCalendar.vue\";\nimport DayDetails from \"./DayDetails.vue\";\nimport { fetchNotifications, saveOperations, loadPatientsData, loadOperationsAndRadiographs } from \"@/services/api-service\";\nexport default {\n  components: {\n    Calendar,\n    DayDetails\n  },\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(),\n      // Mese corrente\n      year: new Date().getFullYear(),\n      // Anno corrente\n      radiographs: [],\n      // Le radiografie caricate\n      operations: [],\n      selectedDay: null,\n      // Giorno selezionato\n      monthNames: [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"],\n      dayNames: [\"LUN\", \"MAR\", \"MER\", \"GIO\", \"VEN\", \"SAB\", \"DOM\"],\n      isPatient: false,\n      // Indica se l'utente è un paziente\n      isDoctor: false,\n      // Indica se l'utente è un dottore\n      selectedPatient: null,\n      // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [],\n      // Pazienti associati al dottore\n      showModal: false,\n      // Controlla la visibilità del modale\n      operationDate: \"\",\n      // Data dell'operazione\n      operationTime: \"\",\n      description: \"\",\n      // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0],\n      // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\")\n    };\n  },\n  mounted() {\n    this.checkUserRole(); // Verifica il ruolo dell'utente\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\n      if (userData && userData.userId) {\n        const userId = userData.userId; // Recupera lo userId\n        console.log(\"User ID recuperato:\", userId);\n        this.loadPatientData(userId); // Carica operazioni e radiografie per il paziente\n      } else {\n        console.error(\"User ID non trovato in userData.\");\n      }\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n      const firstDayOfMonth = new Date(this.year, this.month, 1);\n      const startDayOfWeek = firstDayOfMonth.getDay(); // Giorno della settimana (0 = Domenica, 1 = Lunedì, ecc.)\n\n      // Calcola quanti giorni del mese precedente devono essere inclusi\n      const daysFromPrevMonth = (startDayOfWeek + 6) % 7; // Se il mese inizia di lunedì, vogliamo 0 giorni precedenti\n      const prevMonthLastDay = new Date(this.year, this.month, 0).getDate();\n\n      // Radiografie e operazioni per ogni giorno\n      const radiographsPerDay = {};\n      const operationsPerDay = {};\n\n      // Se l'utente è un medico\n      if (this.isDoctor) {\n        this.patients.forEach(patient => {\n          if (patient.radiographs) {\n            patient.radiographs.forEach(radiograph => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`\n              });\n            });\n          }\n\n          // Aggiungi le operazioni per ogni paziente\n          if (patient.operations) {\n            patient.operations.forEach(operation => {\n              const operationDate = this.parseISODate(operation.operationDate);\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}` // Include il nome del paziente\n                });\n              }\n            });\n          }\n        });\n      } else {\n        // Se l'utente è un paziente, carica solo le proprie operazioni e radiografie\n        const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\n\n        if (this.radiographs) {\n          this.radiographs.forEach(radiograph => {\n            const radiographDate = new Date(radiograph.date).toDateString(); // Data della radiografia\n            if (!radiographsPerDay[radiographDate]) {\n              radiographsPerDay[radiographDate] = []; // Inizializza se non esiste\n            }\n            radiographsPerDay[radiographDate].push({\n              ...radiograph,\n              patientName: `${userData.name} ${userData.family_name}`\n            }); // Aggiungi radiografia alla data\n          });\n        }\n        if (this.operations) {\n          this.operations.forEach(operation => {\n            const operationDate = this.parseISODate(operation.operationDate);\n            if (operationDate !== \"Invalid Date\") {\n              if (!operationsPerDay[operationDate]) {\n                operationsPerDay[operationDate] = [];\n              }\n              operationsPerDay[operationDate].push({\n                ...operation,\n                patientName: operation.patientName || `${this.userName} ${this.userFamilyName}` // Include il nome del paziente\n              });\n            }\n          });\n        }\n      }\n\n      // Aggiungi i giorni del mese precedente\n      for (let i = daysFromPrevMonth; i > 0; i--) {\n        const date = new Date(this.year, this.month - 1, prevMonthLastDay - i + 1);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: date.getDate(),\n          year: date.getFullYear(),\n          // Aggiungi l'anno\n          month: date.getMonth(),\n          // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true // Per i giorni del mese precedente\n        });\n      }\n\n      // Aggiungi i giorni del mese corrente\n      for (let i = 1; i <= totalDays; i++) {\n        const date = new Date(this.year, this.month, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(),\n          // Aggiungi l'anno\n          month: date.getMonth() + 1,\n          // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: false // Per i giorni del mese corrente\n        });\n      }\n\n      // Calcola quanti giorni del mese successivo devono essere inclusi\n      const remainingDays = 42 - days.length; // Un calendario completo ha 6 settimane = 42 giorni\n      for (let i = 1; i <= remainingDays; i++) {\n        const date = new Date(this.year, this.month + 1, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(),\n          // Aggiungi l'anno\n          month: date.getMonth() + 1,\n          // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true // Per i giorni del mese successivo\n        });\n      }\n      return days;\n    }\n  },\n  methods: {\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        console.log(\"Ruolo utente: Paziente\");\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    updateSelectedDay(day) {\n      this.selectedDay = day;\n    },\n    async scheduleOperation() {\n      // Controlla che i campi non siano vuoti\n      if (!this.selectedPatientId || !this.operationDate || !this.operationTime || !this.description) {\n        alert(\"Data, ora o descrizione mancanti.\");\n        return;\n      }\n\n      // Recupera l'ID del dottore e del paziente\n      const doctorId = localStorage.getItem(\"doctorId\");\n\n      // Verifica che la data selezionata non sia nel passato\n      const selectedDate = new Date(this.operationDate);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n      if (selectedDate < today) {\n        alert(\"La data deve essere futura!\");\n        return;\n      }\n\n      // Combinare la data e l'ora\n      const formattedDate = this.combineDateAndTime(this.operationDate, this.operationTime);\n\n      // Chiamata al backend per salvare l'operazione\n      const data = JSON.stringify({\n        doctorId,\n        patientId: this.selectedPatientId,\n        operationDate: formattedDate,\n        // Invio la data + ora combinata\n        description: this.description,\n        createdAt: new Date().toISOString() // Timestamp di creazione\n      });\n      const response = await saveOperations(data);\n      await response.json();\n      alert(\"Operazione pianificata con successo!\");\n\n      // Dopo che l'operazione è stata pianificata, invia una notifica al paziente\n      await this.sendNotificationToPatient();\n\n      // Mostra il calendario delle attività\n      this.showActivityCalendar();\n\n      // Chiudi il modal\n      this.closeScheduleModal();\n    },\n    // Aggiungi questa funzione per inviare la notifica\n    async sendNotificationToPatient() {\n      if (!this.operationDate || !this.operationTime || !this.description) {\n        alert(\"Assicurati di aver inserito tutti i dettagli dell'operazione.\");\n        return;\n      }\n\n      // Estrae solo la parte dell'ora e dei minuti per `time`\n      const notificationTime = this.operationTime; // Già in formato HH:mm\n\n      // Crea il messaggio della notifica usando le informazioni dell'operazione\n      const notificationMessage = `Una nuova operazione è stata pianificata per te!`;\n\n      // Aggiunge la data e ora di invio della notifica\n      const sentAt = new Date().toISOString(); // Data e ora corrente in formato ISO 8601\n\n      // Chiamata al backend per inviare la notifica al paziente selezionato\n      const data = JSON.stringify({\n        patientId: this.selectedPatientId,\n        message: notificationMessage,\n        date: this.operationDate,\n        time: notificationTime,\n        sentAt // Aggiunge l'attributo sentAt alla richiesta\n      });\n      await fetchNotifications(data);\n      alert(\"Notifica inviata al paziente.\");\n    },\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(`DEBUG: Errore nella conversione della data ISO \"${isoString}\":`, error);\n        return \"Invalid Date\";\n      }\n    },\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n    },\n    // Modifica per caricare i pazienti (solo per i medici)\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        const response = await loadPatientsData(doctorId);\n        const data = await response.json();\n\n        // Assicurati che sia un array prima di assegnarlo\n        if (Array.isArray(data)) {\n          this.patients = data;\n        } else {\n          this.patients = []; // Imposta un array vuoto per evitare errori\n        }\n\n        // Carica i dati di tutti i pazienti in batch\n        await this.loadAllPatientData();\n      }\n    },\n    // Nuovo metodo per caricare i dati in batch\n    async loadAllPatientData() {\n      const batchPromises = this.patients.map(patient => this.loadPatientData(patient.userId));\n\n      // Usa Promise.allSettled per evitare errori bloccanti\n      const results = await Promise.allSettled(batchPromises);\n\n      // Log dei risultati per il debug\n      results.forEach((result, index) => {\n        if (result.status === \"fulfilled\") {\n          console.log(`Dati caricati per paziente ${this.patients[index].userId}`);\n        } else {\n          console.error(`Errore nel caricamento dei dati per paziente ${this.patients[index].userId}:`, result.reason);\n        }\n      });\n    },\n    // Funzione generica per caricare le operazioni e le radiografie\n    async loadPatientData(patientId) {\n      // Carica le operazioni e le radiografie in parallelo\n      console.log(\"Id paziente: \", patientId);\n      const [operationsResponse, radiographsResponse, patientResponse] = await loadOperationsAndRadiographs(patientId);\n\n      // Controlla se tutte le risposte sono valide\n      if (operationsResponse.ok) {\n        const operationsData = await operationsResponse.json();\n\n        // Recupera il nome e il cognome del paziente\n        if (patientResponse.ok) {\n          const patientData = await patientResponse.json();\n          operationsData.forEach(operation => {\n            operation.patientName = `${patientData.name} ${patientData.family_name}`;\n            console.log(\"Dati utente: \", patientData);\n          });\n        }\n        console.log(\"Operazioni: \", operationsData);\n        this.handleLoadedData(\"operations\", patientId, operationsData);\n      }\n      if (radiographsResponse.ok) {\n        const radiographsData = await radiographsResponse.json();\n        console.log(\"Radiografie: \", radiographsData);\n        this.handleLoadedData(\"radiographs\", patientId, radiographsData);\n      }\n    },\n    // Funzione per gestire i dati caricati (operazioni o radiografie)\n    handleLoadedData(type, patientId, data) {\n      // Se l'utente è un medico, aggiorna la lista dei pazienti\n      if (this.isDoctor) {\n        const patient = this.patients.find(p => p.userId === patientId);\n        if (patient) {\n          patient[type] = data; // Aggiungi le operazioni o radiografie al paziente\n          console.log(`${type.charAt(0).toUpperCase() + type.slice(1)} aggiunti al paziente:`, patient[type]);\n        }\n      } else {\n        // Se l'utente è un paziente, aggiorna direttamente il proprio profilo\n        this[type] = data; // Aggiungi le operazioni o radiografie al profilo del paziente\n        console.log(`${type.charAt(0).toUpperCase() + type.slice(1)} aggiunti al profilo del paziente:`, this[type]);\n      }\n    },\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n    formatDate(dateTime) {\n      const date = new Date(dateTime);\n      return date.toLocaleDateString(\"it-IT\"); // Mostra solo la data in formato italiano\n    },\n    formatTime(dateTime) {\n      const date = new Date(dateTime);\n      return date.toLocaleTimeString(\"it-IT\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      }); // Mostra solo l'ora in formato 24 ore\n    },\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // Trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    }\n  }\n};","map":{"version":3,"names":["Calendar","DayDetails","fetchNotifications","saveOperations","loadPatientsData","loadOperationsAndRadiographs","components","data","loadingPrediction","successMessage","month","Date","getMonth","year","getFullYear","radiographs","operations","selectedDay","monthNames","dayNames","isPatient","isDoctor","selectedPatient","selectedPatientId","patients","showModal","operationDate","operationTime","description","minDate","toISOString","split","operationIcon","require","radiographIcon","mounted","checkUserRole","loadPatients","userData","JSON","parse","localStorage","getItem","userId","console","log","loadPatientData","error","computed","daysInMonth","days","lastDayOfMonth","totalDays","getDate","firstDayOfMonth","startDayOfWeek","getDay","daysFromPrevMonth","prevMonthLastDay","radiographsPerDay","operationsPerDay","forEach","patient","radiograph","radiographDate","date","toDateString","push","patientName","name","family_name","operation","parseISODate","userName","userFamilyName","i","dayString","radiographsOnDay","operationsOnDay","isDisabled","remainingDays","length","methods","role","openScheduleModal","closeScheduleModal","updateSelectedDay","day","scheduleOperation","alert","doctorId","selectedDate","today","setHours","formattedDate","combineDateAndTime","stringify","patientId","createdAt","response","json","sendNotificationToPatient","showActivityCalendar","notificationTime","notificationMessage","sentAt","message","time","isoString","Error","isNaN","getMinDate","yyyy","mm","toString","padStart","dd","closeModal","Array","isArray","loadAllPatientData","batchPromises","map","results","Promise","allSettled","result","index","status","reason","operationsResponse","radiographsResponse","patientResponse","ok","operationsData","patientData","handleLoadedData","radiographsData","type","find","p","charAt","toUpperCase","slice","refreshCalendar","$forceUpdate","showDayDetails","formatDate","dateTime","toLocaleDateString","formatTime","toLocaleTimeString","hour","minute","enlargeRadiograph","url","modalImageUrl","isModalOpen","changeMonth","direction","beforeEnter","el","style","opacity","enter","done","offsetHeight","transition","leave"],"sources":["C:\\Users\\Utente\\Desktop\\osteoarthritis-project\\frontend\\src\\components\\ActivityCalendar.vue"],"sourcesContent":["<template>\r\n  <div class=\"activity-calendar\">\r\n    <div class=\"calendar-container\">\r\n      <h1 class=\"calendar\">Calendario Attività</h1>\r\n\r\n      <!-- Calendario per utente (paziente o dottore) -->\r\n      <Calendar\r\n        :month=\"month\"\r\n        :year=\"year\"\r\n        :daysInMonth=\"daysInMonth\"\r\n        :monthNames=\"monthNames\"\r\n        :dayNames=\"dayNames\"\r\n        :minDate=\"minDate\"\r\n        :operationIcon=\"operationIcon\"\r\n        :radiographIcon=\"radiographIcon\"\r\n        :showDayDetails=\"showDayDetails\"\r\n        :changeMonth=\"changeMonth\"\r\n        :selectedDay=\"selectedDay\"\r\n        @update-selected-day=\"updateSelectedDay\"\r\n      />\r\n\r\n      <!-- Dettagli del giorno selezionato -->\r\n      <transition\r\n        name=\"fade\"\r\n        @before-enter=\"beforeEnter\"\r\n        @enter=\"enter\"\r\n        @leave=\"leave\"\r\n      >\r\n        <DayDetails\r\n          v-if=\"selectedDay\"\r\n          :selectedDay=\"selectedDay\"\r\n          :monthNames=\"monthNames\"\r\n          :month=\"month\"\r\n          :year=\"year\"\r\n          :formatDate=\"formatDate\"\r\n          :formatTime=\"formatTime\"\r\n          :enlargeRadiograph=\"enlargeRadiograph\"\r\n        />\r\n      </transition>\r\n\r\n      <!-- Modale per pianificare l'operazione (solo per dottore) -->\r\n      <div v-if=\"isDoctor\">\r\n        <button @click=\"openScheduleModal\" class=\"btn btn-primary custom-btn\">\r\n          Pianifica Operazione\r\n        </button>\r\n\r\n        <!-- Modale per inserire i dettagli dell'operazione -->\r\n        <div v-if=\"showModal\" class=\"modal\">\r\n          <div class=\"modal-content\">\r\n            <h2>Pianifica una nuova operazione</h2>\r\n            <label for=\"patientSelect\">Seleziona un paziente:</label>\r\n            <select\r\n              v-model=\"selectedPatientId\"\r\n              id=\"patientSelect\"\r\n              class=\"form-select\"\r\n            >\r\n              <option value=\"\" disabled>Seleziona un paziente</option>\r\n              <option\r\n                v-for=\"patient in patients\"\r\n                :key=\"patient.userId\"\r\n                :value=\"patient.userId\"\r\n              >\r\n                {{ patient.name }} {{ patient.family_name }}\r\n              </option>\r\n            </select>\r\n\r\n            <label for=\"operationDate\">Data dell'operazione:</label>\r\n            <input\r\n              type=\"date\"\r\n              v-model=\"operationDate\"\r\n              id=\"operationDate\"\r\n              :min=\"minDate\"\r\n            />\r\n\r\n            <label for=\"operationTime\">Ora dell'operazione:</label>\r\n            <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\r\n\r\n            <label for=\"description\">Descrizione:</label>\r\n            <textarea v-model=\"description\" id=\"description\"></textarea>\r\n\r\n            <div>\r\n              <button @click=\"scheduleOperation\" class=\"btn btn-success\">\r\n                Salva\r\n              </button>\r\n              <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\r\n                Annulla\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Calendar from \"./ScheduleCalendar.vue\";\r\nimport DayDetails from \"./DayDetails.vue\";\r\nimport {\r\n  fetchNotifications,\r\n  saveOperations,\r\n  loadPatientsData,\r\n  loadOperationsAndRadiographs,\r\n} from \"@/services/api-service\";\r\n\r\nexport default {\r\n  components: {\r\n    Calendar,\r\n    DayDetails,\r\n  },\r\n  data() {\r\n    return {\r\n      loadingPrediction: false,\r\n      successMessage: \"\",\r\n      month: new Date().getMonth(), // Mese corrente\r\n      year: new Date().getFullYear(), // Anno corrente\r\n      radiographs: [], // Le radiografie caricate\r\n      operations: [],\r\n      selectedDay: null, // Giorno selezionato\r\n      monthNames: [\r\n        \"Gennaio\",\r\n        \"Febbraio\",\r\n        \"Marzo\",\r\n        \"Aprile\",\r\n        \"Maggio\",\r\n        \"Giugno\",\r\n        \"Luglio\",\r\n        \"Agosto\",\r\n        \"Settembre\",\r\n        \"Ottobre\",\r\n        \"Novembre\",\r\n        \"Dicembre\",\r\n      ],\r\n      dayNames: [\"LUN\", \"MAR\", \"MER\", \"GIO\", \"VEN\", \"SAB\", \"DOM\"],\r\n      isPatient: false, // Indica se l'utente è un paziente\r\n      isDoctor: false, // Indica se l'utente è un dottore\r\n      selectedPatient: null, // Paziente selezionato (loggato)\r\n      selectedPatientId: \"\",\r\n      patients: [], // Pazienti associati al dottore\r\n      showModal: false, // Controlla la visibilità del modale\r\n      operationDate: \"\", // Data dell'operazione\r\n      operationTime: \"\",\r\n      description: \"\", // Descrizione dell'operazione\r\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\r\n      operationIcon: require(\"@/assets/operation-icon.png\"),\r\n      radiographIcon: require(\"@/assets/radiograph-icon.png\"),\r\n    };\r\n  },\r\n  mounted() {\r\n    this.checkUserRole(); // Verifica il ruolo dell'utente\r\n    if (this.isDoctor) {\r\n      this.loadPatients(); // Carica i pazienti del dottore\r\n    }\r\n    if (this.isPatient) {\r\n      const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\r\n      if (userData && userData.userId) {\r\n        const userId = userData.userId; // Recupera lo userId\r\n        console.log(\"User ID recuperato:\", userId);\r\n        this.loadPatientData(userId); // Carica operazioni e radiografie per il paziente\r\n      } else {\r\n        console.error(\"User ID non trovato in userData.\");\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    daysInMonth() {\r\n      const days = [];\r\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\r\n      const totalDays = lastDayOfMonth.getDate();\r\n      const firstDayOfMonth = new Date(this.year, this.month, 1);\r\n      const startDayOfWeek = firstDayOfMonth.getDay(); // Giorno della settimana (0 = Domenica, 1 = Lunedì, ecc.)\r\n\r\n      // Calcola quanti giorni del mese precedente devono essere inclusi\r\n      const daysFromPrevMonth = (startDayOfWeek + 6) % 7; // Se il mese inizia di lunedì, vogliamo 0 giorni precedenti\r\n      const prevMonthLastDay = new Date(this.year, this.month, 0).getDate();\r\n\r\n      // Radiografie e operazioni per ogni giorno\r\n      const radiographsPerDay = {};\r\n      const operationsPerDay = {};\r\n\r\n      // Se l'utente è un medico\r\n      if (this.isDoctor) {\r\n        this.patients.forEach((patient) => {\r\n          if (patient.radiographs) {\r\n            patient.radiographs.forEach((radiograph) => {\r\n              const radiographDate = new Date(radiograph.date).toDateString();\r\n              if (!radiographsPerDay[radiographDate]) {\r\n                radiographsPerDay[radiographDate] = [];\r\n              }\r\n              radiographsPerDay[radiographDate].push({\r\n                ...radiograph,\r\n                patientName: `${patient.name} ${patient.family_name}`,\r\n              });\r\n            });\r\n          }\r\n\r\n          // Aggiungi le operazioni per ogni paziente\r\n          if (patient.operations) {\r\n            patient.operations.forEach((operation) => {\r\n              const operationDate = this.parseISODate(operation.operationDate);\r\n              if (operationDate !== \"Invalid Date\") {\r\n                if (!operationsPerDay[operationDate]) {\r\n                  operationsPerDay[operationDate] = [];\r\n                }\r\n                operationsPerDay[operationDate].push({\r\n                  ...operation,\r\n                  patientName: `${patient.name} ${patient.family_name}`, // Include il nome del paziente\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        // Se l'utente è un paziente, carica solo le proprie operazioni e radiografie\r\n        const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\r\n\r\n        if (this.radiographs) {\r\n          this.radiographs.forEach((radiograph) => {\r\n            const radiographDate = new Date(radiograph.date).toDateString(); // Data della radiografia\r\n            if (!radiographsPerDay[radiographDate]) {\r\n              radiographsPerDay[radiographDate] = []; // Inizializza se non esiste\r\n            }\r\n            radiographsPerDay[radiographDate].push({\r\n              ...radiograph,\r\n              patientName: `${userData.name} ${userData.family_name}`,\r\n            }); // Aggiungi radiografia alla data\r\n          });\r\n        }\r\n\r\n        if (this.operations) {\r\n          this.operations.forEach((operation) => {\r\n            const operationDate = this.parseISODate(operation.operationDate);\r\n            if (operationDate !== \"Invalid Date\") {\r\n              if (!operationsPerDay[operationDate]) {\r\n                operationsPerDay[operationDate] = [];\r\n              }\r\n              operationsPerDay[operationDate].push({\r\n                ...operation,\r\n                patientName:\r\n                  operation.patientName ||\r\n                  `${this.userName} ${this.userFamilyName}`, // Include il nome del paziente\r\n              });\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Aggiungi i giorni del mese precedente\r\n      for (let i = daysFromPrevMonth; i > 0; i--) {\r\n        const date = new Date(\r\n          this.year,\r\n          this.month - 1,\r\n          prevMonthLastDay - i + 1\r\n        );\r\n        const dayString = date.toDateString();\r\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\r\n        const operationsOnDay = operationsPerDay[dayString] || [];\r\n        days.push({\r\n          date: date.getDate(),\r\n          year: date.getFullYear(), // Aggiungi l'anno\r\n          month: date.getMonth(), // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\r\n          radiographs: radiographsOnDay,\r\n          operations: operationsOnDay,\r\n          isDisabled: true, // Per i giorni del mese precedente\r\n        });\r\n      }\r\n\r\n      // Aggiungi i giorni del mese corrente\r\n      for (let i = 1; i <= totalDays; i++) {\r\n        const date = new Date(this.year, this.month, i);\r\n        const dayString = date.toDateString();\r\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\r\n        const operationsOnDay = operationsPerDay[dayString] || [];\r\n        days.push({\r\n          date: i,\r\n          year: date.getFullYear(), // Aggiungi l'anno\r\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\r\n          radiographs: radiographsOnDay,\r\n          operations: operationsOnDay,\r\n          isDisabled: false, // Per i giorni del mese corrente\r\n        });\r\n      }\r\n\r\n      // Calcola quanti giorni del mese successivo devono essere inclusi\r\n      const remainingDays = 42 - days.length; // Un calendario completo ha 6 settimane = 42 giorni\r\n      for (let i = 1; i <= remainingDays; i++) {\r\n        const date = new Date(this.year, this.month + 1, i);\r\n        const dayString = date.toDateString();\r\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\r\n        const operationsOnDay = operationsPerDay[dayString] || [];\r\n        days.push({\r\n          date: i,\r\n          year: date.getFullYear(), // Aggiungi l'anno\r\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\r\n          radiographs: radiographsOnDay,\r\n          operations: operationsOnDay,\r\n          isDisabled: true, // Per i giorni del mese successivo\r\n        });\r\n      }\r\n\r\n      return days;\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    checkUserRole() {\r\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n      if (userData && userData.role === \"patient\") {\r\n        this.isPatient = true;\r\n        console.log(\"Ruolo utente: Paziente\");\r\n      } else if (userData && userData.role === \"doctor\") {\r\n        this.isDoctor = true;\r\n        console.log(\"Ruolo utente: Dottore\");\r\n      }\r\n    },\r\n    openScheduleModal() {\r\n      this.showModal = true;\r\n    },\r\n    // Chiude il modale\r\n    closeScheduleModal() {\r\n      this.showModal = false;\r\n      this.operationDate = \"\";\r\n      this.description = \"\";\r\n    },\r\n    updateSelectedDay(day) {\r\n      this.selectedDay = day;\r\n    },\r\n    async scheduleOperation() {\r\n      // Controlla che i campi non siano vuoti\r\n      if (\r\n        !this.selectedPatientId ||\r\n        !this.operationDate ||\r\n        !this.operationTime ||\r\n        !this.description\r\n      ) {\r\n        alert(\"Data, ora o descrizione mancanti.\");\r\n        return;\r\n      }\r\n\r\n      // Recupera l'ID del dottore e del paziente\r\n      const doctorId = localStorage.getItem(\"doctorId\");\r\n\r\n      // Verifica che la data selezionata non sia nel passato\r\n      const selectedDate = new Date(this.operationDate);\r\n      const today = new Date();\r\n      today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\r\n      if (selectedDate < today) {\r\n        alert(\"La data deve essere futura!\");\r\n        return;\r\n      }\r\n\r\n      // Combinare la data e l'ora\r\n      const formattedDate = this.combineDateAndTime(\r\n        this.operationDate,\r\n        this.operationTime\r\n      );\r\n\r\n      // Chiamata al backend per salvare l'operazione\r\n      const data = JSON.stringify({\r\n        doctorId,\r\n        patientId: this.selectedPatientId,\r\n        operationDate: formattedDate, // Invio la data + ora combinata\r\n        description: this.description,\r\n        createdAt: new Date().toISOString(), // Timestamp di creazione\r\n      });\r\n      const response = await saveOperations(data);\r\n\r\n      await response.json();\r\n      alert(\"Operazione pianificata con successo!\");\r\n\r\n      // Dopo che l'operazione è stata pianificata, invia una notifica al paziente\r\n      await this.sendNotificationToPatient();\r\n\r\n      // Mostra il calendario delle attività\r\n      this.showActivityCalendar();\r\n\r\n      // Chiudi il modal\r\n      this.closeScheduleModal();\r\n    },\r\n\r\n    // Aggiungi questa funzione per inviare la notifica\r\n    async sendNotificationToPatient() {\r\n      if (!this.operationDate || !this.operationTime || !this.description) {\r\n        alert(\"Assicurati di aver inserito tutti i dettagli dell'operazione.\");\r\n        return;\r\n      }\r\n\r\n      // Estrae solo la parte dell'ora e dei minuti per `time`\r\n      const notificationTime = this.operationTime; // Già in formato HH:mm\r\n\r\n      // Crea il messaggio della notifica usando le informazioni dell'operazione\r\n      const notificationMessage = `Una nuova operazione è stata pianificata per te!`;\r\n\r\n      // Aggiunge la data e ora di invio della notifica\r\n      const sentAt = new Date().toISOString(); // Data e ora corrente in formato ISO 8601\r\n\r\n      // Chiamata al backend per inviare la notifica al paziente selezionato\r\n      const data = JSON.stringify({\r\n        patientId: this.selectedPatientId,\r\n        message: notificationMessage,\r\n        date: this.operationDate,\r\n        time: notificationTime,\r\n        sentAt, // Aggiunge l'attributo sentAt alla richiesta\r\n      });\r\n      await fetchNotifications(data);\r\n      alert(\"Notifica inviata al paziente.\");\r\n    },\r\n\r\n    parseISODate(isoString) {\r\n      try {\r\n        if (!isoString) {\r\n          throw new Error(\"La stringa della data è undefined o vuota\");\r\n        }\r\n        const date = new Date(isoString);\r\n        if (isNaN(date)) {\r\n          throw new Error(\"Formato della data non valido\");\r\n        }\r\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\r\n      } catch (error) {\r\n        console.error(\r\n          `DEBUG: Errore nella conversione della data ISO \"${isoString}\":`,\r\n          error\r\n        );\r\n        return \"Invalid Date\";\r\n      }\r\n    },\r\n\r\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\r\n    combineDateAndTime(date, time) {\r\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\r\n    },\r\n\r\n    // Funzione per ottenere la data minima per l'input (oggi)\r\n    getMinDate() {\r\n      const today = new Date();\r\n      const yyyy = today.getFullYear();\r\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\r\n      const dd = today.getDate().toString().padStart(2, \"0\");\r\n      return `${yyyy}-${mm}-${dd}`;\r\n    },\r\n\r\n    // Chiude il modal\r\n    closeModal() {\r\n      this.showModal = false;\r\n    },\r\n\r\n    // Mostra il calendario delle attività\r\n    showActivityCalendar() {\r\n      // Logica per visualizzare il calendario\r\n      this.selectedDay = null; // Resetta la selezione del giorno\r\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\r\n    },\r\n\r\n    // Modifica per caricare i pazienti (solo per i medici)\r\n    async loadPatients() {\r\n      const doctorId = localStorage.getItem(\"doctorId\");\r\n      if (doctorId) {\r\n        const response = await loadPatientsData(doctorId);\r\n        const data = await response.json();\r\n\r\n        // Assicurati che sia un array prima di assegnarlo\r\n        if (Array.isArray(data)) {\r\n          this.patients = data;\r\n        } else {\r\n          this.patients = []; // Imposta un array vuoto per evitare errori\r\n        }\r\n\r\n        // Carica i dati di tutti i pazienti in batch\r\n        await this.loadAllPatientData();\r\n      }\r\n    },\r\n\r\n    // Nuovo metodo per caricare i dati in batch\r\n    async loadAllPatientData() {\r\n      const batchPromises = this.patients.map((patient) =>\r\n        this.loadPatientData(patient.userId)\r\n      );\r\n\r\n      // Usa Promise.allSettled per evitare errori bloccanti\r\n      const results = await Promise.allSettled(batchPromises);\r\n\r\n      // Log dei risultati per il debug\r\n      results.forEach((result, index) => {\r\n        if (result.status === \"fulfilled\") {\r\n          console.log(\r\n            `Dati caricati per paziente ${this.patients[index].userId}`\r\n          );\r\n        } else {\r\n          console.error(\r\n            `Errore nel caricamento dei dati per paziente ${this.patients[index].userId}:`,\r\n            result.reason\r\n          );\r\n        }\r\n      });\r\n    },\r\n\r\n    // Funzione generica per caricare le operazioni e le radiografie\r\n    async loadPatientData(patientId) {\r\n      // Carica le operazioni e le radiografie in parallelo\r\n      console.log(\"Id paziente: \", patientId);\r\n      const [operationsResponse, radiographsResponse, patientResponse] =\r\n        await loadOperationsAndRadiographs(patientId);\r\n\r\n      // Controlla se tutte le risposte sono valide\r\n      if (operationsResponse.ok) {\r\n        const operationsData = await operationsResponse.json();\r\n\r\n        // Recupera il nome e il cognome del paziente\r\n        if (patientResponse.ok) {\r\n          const patientData = await patientResponse.json();\r\n          operationsData.forEach((operation) => {\r\n            operation.patientName = `${patientData.name} ${patientData.family_name}`;\r\n            console.log(\"Dati utente: \", patientData);\r\n          });\r\n        }\r\n\r\n        console.log(\"Operazioni: \", operationsData);\r\n        this.handleLoadedData(\"operations\", patientId, operationsData);\r\n      }\r\n\r\n      if (radiographsResponse.ok) {\r\n        const radiographsData = await radiographsResponse.json();\r\n        console.log(\"Radiografie: \", radiographsData);\r\n        this.handleLoadedData(\"radiographs\", patientId, radiographsData);\r\n      }\r\n    },\r\n\r\n    // Funzione per gestire i dati caricati (operazioni o radiografie)\r\n    handleLoadedData(type, patientId, data) {\r\n      // Se l'utente è un medico, aggiorna la lista dei pazienti\r\n      if (this.isDoctor) {\r\n        const patient = this.patients.find((p) => p.userId === patientId);\r\n        if (patient) {\r\n          patient[type] = data; // Aggiungi le operazioni o radiografie al paziente\r\n          console.log(\r\n            `${\r\n              type.charAt(0).toUpperCase() + type.slice(1)\r\n            } aggiunti al paziente:`,\r\n            patient[type]\r\n          );\r\n        }\r\n      } else {\r\n        // Se l'utente è un paziente, aggiorna direttamente il proprio profilo\r\n        this[type] = data; // Aggiungi le operazioni o radiografie al profilo del paziente\r\n        console.log(\r\n          `${\r\n            type.charAt(0).toUpperCase() + type.slice(1)\r\n          } aggiunti al profilo del paziente:`,\r\n          this[type]\r\n        );\r\n      }\r\n    },\r\n\r\n    refreshCalendar() {\r\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\r\n    },\r\n\r\n    showDayDetails(day) {\r\n      if (this.selectedDay && this.selectedDay.date === day.date) {\r\n        this.selectedDay = null;\r\n      } else {\r\n        this.selectedDay = day;\r\n      }\r\n      console.log(`Giorno selezionato: ${day.date}`);\r\n    },\r\n\r\n    formatDate(dateTime) {\r\n      const date = new Date(dateTime);\r\n      return date.toLocaleDateString(\"it-IT\"); // Mostra solo la data in formato italiano\r\n    },\r\n    formatTime(dateTime) {\r\n      const date = new Date(dateTime);\r\n      return date.toLocaleTimeString(\"it-IT\", {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      }); // Mostra solo l'ora in formato 24 ore\r\n    },\r\n\r\n    enlargeRadiograph(url) {\r\n      this.modalImageUrl = url;\r\n      this.isModalOpen = true;\r\n    },\r\n\r\n    changeMonth(direction) {\r\n      if (direction === 1) {\r\n        if (this.month === 11) {\r\n          this.month = 0;\r\n          this.year++;\r\n        } else {\r\n          this.month++;\r\n        }\r\n      } else {\r\n        if (this.month === 0) {\r\n          this.month = 11;\r\n          this.year--;\r\n        } else {\r\n          this.month--;\r\n        }\r\n      }\r\n    },\r\n    // Animazioni di transizione\r\n    beforeEnter(el) {\r\n      el.style.opacity = 0;\r\n    },\r\n    enter(el, done) {\r\n      el.offsetHeight; // Trigger reflow\r\n      el.style.transition = \"opacity 0.5s ease\";\r\n      el.style.opacity = 1;\r\n      done();\r\n    },\r\n    leave(el, done) {\r\n      el.style.transition = \"opacity 0.5s ease\";\r\n      el.style.opacity = 0;\r\n      done();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.calendar-container {\r\n  max-width: 100%;\r\n  padding: 40px;\r\n  border-radius: 10px;\r\n  background: #ffffff;\r\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh1.calendar {\r\n  font-size: 18px;\r\n  font-family: inherit;\r\n  font-weight: normal;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 999;\r\n}\r\n\r\n.modal-content {\r\n  background: #fff;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  width: 500px; /* Aumentiamo la larghezza del modale */\r\n  text-align: left;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.modal-content h2 {\r\n  font-size: 1.2em; /* Aumentiamo leggermente il font per il titolo */\r\n  margin-bottom: 15px;\r\n  color: #333;\r\n  font-weight: bold;\r\n}\r\n\r\n.modal-content label {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  color: #555;\r\n  font-weight: 600;\r\n  font-size: 0.85em; /* Ridotto per le etichette */\r\n}\r\n\r\n.modal-content select,\r\n.modal-content input,\r\n.modal-content textarea {\r\n  width: 100%;\r\n  padding: 4px 8px; /* Ridotto ulteriormente il padding dei campi */\r\n  margin-bottom: 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px; /* Border-radius più sottile */\r\n  font-size: 0.75em; /* Ridotto ulteriormente la dimensione del font */\r\n  box-sizing: border-box;\r\n  transition: border 0.3s ease;\r\n}\r\n\r\n.modal-content select:focus,\r\n.modal-content input:focus,\r\n.modal-content textarea:focus {\r\n  border-color: #007bff;\r\n  outline: none;\r\n}\r\n\r\n.modal-content textarea {\r\n  resize: vertical;\r\n  height: 60px; /* Ancora più piccola la textarea */\r\n}\r\n\r\n.modal-content button {\r\n  padding: 6px 12px; /* Ridotto il padding dei pulsanti */\r\n  border-radius: 4px;\r\n  border: none;\r\n  font-size: 12px; /* Ridotto ulteriormente la dimensione dei pulsanti */\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease, transform 0.3s ease;\r\n  margin-right: 6px;\r\n}\r\n\r\n.modal-content .btn-success {\r\n  background-color: #28a745;\r\n  color: white;\r\n}\r\n\r\n.modal-content .btn-success:hover {\r\n  background-color: #218838;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.modal-content .btn-secondary {\r\n  background-color: #6c757d;\r\n  color: white;\r\n}\r\n\r\n.modal-content .btn-secondary:hover {\r\n  background-color: #5a6268;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.modal-content .btn {\r\n  min-width: 90px; /* Ridotto il minimo larghezza dei pulsanti */\r\n}\r\n\r\n.modal-content .btn:focus {\r\n  outline: none;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n  background: none;\r\n  border: none;\r\n  color: #007bff;\r\n  font-size: 0.7em;\r\n}\r\n\r\nbutton:hover {\r\n  color: #007bff;\r\n}\r\n\r\n.custom-btn {\r\n  display: block; /* Imposta il pulsante come blocco per permettere il centramento */\r\n  margin: 20px auto; /* Centra il pulsante e aggiungi un margine superiore di 20px */\r\n  background-color: #007bff; /* Colore di sfondo */\r\n  color: white; /* Colore del testo */\r\n  border-radius: 5px; /* Raggio dei bordi per renderlo arrotondato */\r\n  padding: 6px 12px; /* Ridotto il padding per rendere il pulsante più piccolo */\r\n  text-align: center; /* Allinea il testo al centro */\r\n  font-size: 14px; /* Dimensione del font più piccola */\r\n  max-width: 200px; /* Limita la larghezza massima del pulsante */\r\n  width: 100%; /* Permette di ridimensionare il pulsante in base alla larghezza del contenitore */\r\n}\r\n\r\n.custom-btn:hover {\r\n  background-color: #0056b3; /* Colore di hover per effetto */\r\n  color: white;\r\n  cursor: pointer; /* Cambia il cursore su hover */\r\n}\r\n\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: opacity 0.5s ease;\r\n}\r\n\r\n.fade-enter,\r\n.fade-leave-to {\r\n  opacity: 0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}