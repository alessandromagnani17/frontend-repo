{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"activity-calendar\"\n};\nconst _hoisted_2 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 1\n};\nconst _hoisted_5 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Calendar = _resolveComponent(\"Calendar\");\n  const _component_DayDetails = _resolveComponent(\"DayDetails\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[1] || (_cache[1] = _createElementVNode(\"h1\", {\n    class: \"calendar\"\n  }, \"Calendario Attività\", -1 /* HOISTED */)), $data.isPatient ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createCommentVNode(\" Calendario per paziente \"), _createVNode(_component_Calendar, {\n    month: $data.month,\n    year: $data.year,\n    daysInMonth: $options.daysInMonth,\n    monthNames: $data.monthNames,\n    dayNames: $data.dayNames,\n    minDate: $data.minDate,\n    operationIcon: $data.operationIcon,\n    radiographIcon: $data.radiographIcon,\n    showDayDetails: $options.showDayDetails,\n    changeMonth: $options.changeMonth\n  }, null, 8 /* PROPS */, [\"month\", \"year\", \"daysInMonth\", \"monthNames\", \"dayNames\", \"minDate\", \"operationIcon\", \"radiographIcon\", \"showDayDetails\", \"changeMonth\"]), $data.selectedDay ? (_openBlock(), _createBlock(_component_DayDetails, {\n    key: 0,\n    selectedDay: $data.selectedDay,\n    monthNames: $data.monthNames,\n    month: $data.month,\n    year: $data.year,\n    formatDate: $options.formatDate,\n    formatTime: $options.formatTime,\n    enlargeRadiograph: $options.enlargeRadiograph\n  }, null, 8 /* PROPS */, [\"selectedDay\", \"monthNames\", \"month\", \"year\", \"formatDate\", \"formatTime\", \"enlargeRadiograph\"])) : _createCommentVNode(\"v-if\", true)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createCommentVNode(\" Calendario per dottore \"), $data.isDoctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.openScheduleModal && $options.openScheduleModal(...args)),\n    class: \"btn btn-primary\"\n  }, \"Pianifica Operazione\"), _createCommentVNode(\" Calendario per il dottore \"), _createVNode(_component_Calendar, {\n    month: $data.month,\n    year: $data.year,\n    daysInMonth: $options.daysInMonth,\n    monthNames: $data.monthNames,\n    dayNames: $data.dayNames,\n    minDate: $data.minDate,\n    operationIcon: $data.operationIcon,\n    radiographIcon: $data.radiographIcon,\n    showDayDetails: $options.showDayDetails,\n    changeMonth: $options.changeMonth\n  }, null, 8 /* PROPS */, [\"month\", \"year\", \"daysInMonth\", \"monthNames\", \"dayNames\", \"minDate\", \"operationIcon\", \"radiographIcon\", \"showDayDetails\", \"changeMonth\"]), $data.selectedDay ? (_openBlock(), _createBlock(_component_DayDetails, {\n    key: 0,\n    selectedDay: $data.selectedDay,\n    monthNames: $data.monthNames,\n    month: $data.month,\n    year: $data.year,\n    formatDate: $options.formatDate,\n    formatTime: $options.formatTime,\n    enlargeRadiograph: $options.enlargeRadiograph\n  }, null, 8 /* PROPS */, [\"selectedDay\", \"monthNames\", \"month\", \"year\", \"formatDate\", \"formatTime\", \"enlargeRadiograph\"])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$data","isPatient","_hoisted_3","_createCommentVNode","_createVNode","_component_Calendar","month","year","daysInMonth","$options","monthNames","dayNames","minDate","operationIcon","radiographIcon","showDayDetails","changeMonth","selectedDay","_createBlock","_component_DayDetails","formatDate","formatTime","enlargeRadiograph","_hoisted_4","isDoctor","_hoisted_5","onClick","_cache","args","openScheduleModal"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"activity-calendar\">\n    <div class=\"calendar-container\">\n      <h1 class=\"calendar\">Calendario Attività</h1>\n\n      <div v-if=\"isPatient\">\n        <!-- Calendario per paziente -->\n        <Calendar\n          :month=\"month\"\n          :year=\"year\"\n          :daysInMonth=\"daysInMonth\"\n          :monthNames=\"monthNames\"\n          :dayNames=\"dayNames\"\n          :minDate=\"minDate\"\n          :operationIcon=\"operationIcon\"\n          :radiographIcon=\"radiographIcon\"\n          :showDayDetails=\"showDayDetails\"\n          :changeMonth=\"changeMonth\"\n        />\n        <DayDetails\n          v-if=\"selectedDay\"\n          :selectedDay=\"selectedDay\"\n          :monthNames=\"monthNames\"\n          :month=\"month\"\n          :year=\"year\"\n          :formatDate=\"formatDate\"\n          :formatTime=\"formatTime\"\n          :enlargeRadiograph=\"enlargeRadiograph\"\n        />\n      </div>\n\n      <div v-else>\n        <!-- Calendario per dottore -->\n        <div v-if=\"isDoctor\">\n          <button @click=\"openScheduleModal\" class=\"btn btn-primary\">Pianifica Operazione</button>\n\n          <!-- Calendario per il dottore -->\n          <Calendar\n            :month=\"month\"\n            :year=\"year\"\n            :daysInMonth=\"daysInMonth\"\n            :monthNames=\"monthNames\"\n            :dayNames=\"dayNames\"\n            :minDate=\"minDate\"\n            :operationIcon=\"operationIcon\"\n            :radiographIcon=\"radiographIcon\"\n            :showDayDetails=\"showDayDetails\"\n            :changeMonth=\"changeMonth\"\n          />\n          <DayDetails\n            v-if=\"selectedDay\"\n            :selectedDay=\"selectedDay\"\n            :monthNames=\"monthNames\"\n            :month=\"month\"\n            :year=\"year\"\n            :formatDate=\"formatDate\"\n            :formatTime=\"formatTime\"\n            :enlargeRadiograph=\"enlargeRadiograph\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Calendar from './Calendar.vue';\nimport DayDetails from './DayDetails.vue';\n\nexport default {\n  components: {\n    Calendar,\n    DayDetails,\n  },\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      operations: [],\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      dayNames: [\"LUN\", \"MAR\", \"MER\", \"GIO\", \"VEN\", \"SAB\", \"DOM\"],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      selectedPatient: null, // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [], // Pazienti associati al dottore\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\"),\n    };\n  },\n  mounted() {\n    this.checkUserRole(); // Verifica il ruolo dell'utente\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\n      if (userData && userData.userId) {\n        const userId = userData.userId; // Recupera lo userId\n        console.log(\"User ID recuperato:\", userId);\n        this.loadPatientData(userId); // Carica operazioni e radiografie per il paziente\n      } else {\n        console.error(\"User ID non trovato in userData.\");\n      }\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n      const firstDayOfMonth = new Date(this.year, this.month, 1);\n      const startDayOfWeek = firstDayOfMonth.getDay(); // Giorno della settimana (0 = Domenica, 1 = Lunedì, ecc.)\n\n      // Calcola quanti giorni del mese precedente devono essere inclusi\n      const daysFromPrevMonth = (startDayOfWeek + 6) % 7; // Se il mese inizia di lunedì, vogliamo 0 giorni precedenti\n      const prevMonthLastDay = new Date(this.year, this.month, 0).getDate();\n\n      // Radiografie e operazioni per ogni giorno\n      const radiographsPerDay = {};\n      const operationsPerDay = {};\n\n      // Se l'utente è un medico\n      if (this.isDoctor) {\n        this.patients.forEach((patient) => {\n          if (patient.radiographs) {\n            patient.radiographs.forEach((radiograph) => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n\n          if (patient.operations) {\n            patient.operations.forEach((operation) => {\n              const operationDate = this.parseISODate(operation.operationDate);\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}`,\n                });\n              }\n            });\n          }\n        });\n      } else {\n        const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\n\n        if (this.radiographs) {\n          this.radiographs.forEach((radiograph) => {\n            const radiographDate = new Date(radiograph.date).toDateString(); // Data della radiografia\n            if (!radiographsPerDay[radiographDate]) {\n              radiographsPerDay[radiographDate] = []; // Inizializza se non esiste\n            }\n            radiographsPerDay[radiographDate].push({\n              ...radiograph,\n              patientName: `${userData.name} ${userData.family_name}`,\n            }); // Aggiungi radiografia alla data\n          });\n        }\n\n        if (this.operations) {\n          this.operations.forEach((operation) => {\n            const operationDate = this.parseISODate(operation.operationDate); // Data dell'operazione\n            if (operationDate !== \"Invalid Date\") {\n              if (!operationsPerDay[operationDate]) {\n                operationsPerDay[operationDate] = []; // Inizializza se non esiste\n              }\n              operationsPerDay[operationDate].push({\n                ...operation,\n                patientName: `${userData.name} ${userData.family_name}`,\n              }); // Aggiungi operazione alla data\n            }\n          });\n        }\n      }\n\n      // Aggiungi i giorni del mese precedente\n      for (let i = daysFromPrevMonth; i > 0; i--) {\n        const date = new Date(\n          this.year,\n          this.month - 1,\n          prevMonthLastDay - i + 1\n        );\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: date.getDate(),\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth(), // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true, // Per i giorni del mese precedente\n        });\n      }\n\n      // Aggiungi i giorni del mese corrente\n      for (let i = 1; i <= totalDays; i++) {\n        const date = new Date(this.year, this.month, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: false, // Per i giorni del mese corrente\n        });\n      }\n\n      // Calcola quanti giorni del mese successivo devono essere inclusi\n      const remainingDays = 42 - days.length; // Un calendario completo ha 6 settimane = 42 giorni\n      for (let i = 1; i <= remainingDays; i++) {\n        const date = new Date(this.year, this.month + 1, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true, // Per i giorni del mese successivo\n        });\n      }\n\n      return days;\n    },\n  },\n\n  methods: {\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        console.log(\"Ruolo utente: Paziente\");\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (\n          !this.selectedPatientId ||\n          !this.operationDate ||\n          !this.operationTime ||\n          !this.description\n        ) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(\n          this.operationDate,\n          this.operationTime\n        );\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate, // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString(), // Timestamp di creazione\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\n          );\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\n          \"Errore durante la pianificazione dell'operazione:\",\n          error\n        );\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(\n          `DEBUG: Errore nella conversione della data ISO \"${isoString}\":`,\n          error\n        );\n        return \"Invalid Date\";\n      }\n    },\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n\n    // Modifica per caricare i pazienti (solo per i medici)\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie e le operazioni per ogni paziente\n          this.patients.forEach((patient) => {\n            this.loadPatientData(patient.userId); // Carica i dati per ogni paziente\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    // Funzione generica per caricare le operazioni e le radiografie\n    async loadPatientData(patientId) {\n      try {\n        // Carica le operazioni\n        const operationsResponse = await fetch(\n          `/api/patients/${patientId}/operations`\n        );\n        if (operationsResponse.ok) {\n          const operationsData = await operationsResponse.json();\n          console.log(\"RADIOGRNJCNEJCD: \", operationsData);\n          this.handleLoadedData(\"operations\", patientId, operationsData);\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n\n        // Carica le radiografie\n        const radiographsResponse = await fetch(\n          `/api/patients/${patientId}/radiographs`\n        );\n        if (radiographsResponse.ok) {\n          const radiographsData = await radiographsResponse.json();\n          this.handleLoadedData(\"radiographs\", patientId, radiographsData);\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    // Funzione per gestire i dati caricati (operazioni o radiografie)\n    handleLoadedData(type, patientId, data) {\n      // Se l'utente è un medico, aggiorna la lista dei pazienti\n      if (this.isDoctor) {\n        const patient = this.patients.find((p) => p.userId === patientId);\n        if (patient) {\n          patient[type] = data; // Aggiungi le operazioni o radiografie al paziente\n          console.log(\n            `${\n              type.charAt(0).toUpperCase() + type.slice(1)\n            } aggiunti al paziente:`,\n            patient[type]\n          );\n        }\n      } else {\n        // Se l'utente è un paziente, aggiorna direttamente il proprio profilo\n        this[type] = data; // Aggiungi le operazioni o radiografie al profilo del paziente\n        console.log(\n          `${\n            type.charAt(0).toUpperCase() + type.slice(1)\n          } aggiunti al profilo del paziente:`,\n          this[type]\n        );\n      }\n    },\n\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    formatDate(dateTime) {\n      const date = new Date(dateTime);\n      return date.toLocaleDateString(\"it-IT\"); // Mostra solo la data in formato italiano\n    },\n    formatTime(dateTime) {\n      const date = new Date(dateTime);\n      return date.toLocaleTimeString(\"it-IT\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      }); // Mostra solo l'ora in formato 24 ore\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.calendar-calendar {\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  position: relative;\n}\n\n.calendar-container {\n  max-width: 100%;\n  padding: 40px;\n  border-radius: 10px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n}\n\nh1.calendar {\n  font-size: 18px; /* Stessa dimensione del testo di \"Elenco Pazienti\" */\n  font-family: inherit; /* Assicura che usi lo stesso font ereditato dal contesto */\n  font-weight: normal; /* Mantenere il peso del font uguale */\n  margin-bottom: 20px; /* Margine inferiore uguale per allineamento */\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 70px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n/* Giorni disabilitati (mese precedente e successivo) */\n.calendar-day.disabled {\n  opacity: 0.5;\n  color: #ccc; /* Testo grigio chiaro */\n  pointer-events: none; /* Non cliccabili */\n  background-color: #f9f9f9; /* Sfondo leggermente diverso, opzionale */\n}\n\n/* Puoi anche aggiungere un bordo per evidenziare meglio i giorni */\n.calendar-day.disabled:hover {\n  border: 1px dashed #ddd; /* Aggiunge un bordo hover sui giorni disabilitati */\n}\n\n.calendar-day.today {\n  border: 2px solid #fc2424db; /* Bordo rosso per il giorno corrente */\n  border-radius: 5px; /* Bordo arrotondato (opzionale) */\n}\n\n.calendar-day-names {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  background-color: #f0f0f0;\n  padding: 10px 0;\n  font-weight: bold;\n  color: #555;\n  text-align: center;\n  border-bottom: 1px solid #ddd;\n}\n\n.day-name {\n  text-transform: uppercase;\n  font-size: 0.9em;\n}\n\n.date {\n  font-size: 1em;\n}\n\n.activity-icons {\n  display: flex;\n  flex-direction: column; /* Cambia la direzione per impilare le righe */\n  align-items: center;\n  gap: 10px; /* Spazio tra righe */\n  margin-top: 5px;\n}\n\n.icon-row {\n  display: flex;\n  justify-content: center;\n  gap: 2px; /* Spazio tra le icone nella stessa riga */\n}\n\n.operations {\n  min-height: 7px;\n  margin-bottom: 3px; /* Aggiunge margine tra operazioni e radiografie */\n}\n\n.icon {\n  width: 7px;\n  height: 7px;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 0.7em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 50px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 0.7em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 400px;\n  text-align: center;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 10px;\n  text-align: left;\n}\n\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n}\n\n.btn {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n\n.small-text {\n  font-size: 0.9rem; /* Puoi regolare la dimensione come preferisci */\n  font-weight: 600; /* Opzionale, per mantenere il testo in grassetto */\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAmB;;EACvBA,KAAK,EAAC;AAAoB;;EAFnCC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;;uBACEC,mBAAA,CA6DM,OA7DNC,UA6DM,GA5DJC,mBAAA,CA2DM,OA3DNC,UA2DM,G,0BA1DJD,mBAAA,CAA6C;IAAzCJ,KAAK,EAAC;EAAU,GAAC,qBAAmB,sBAE7BM,KAAA,CAAAC,SAAS,I,cAApBL,mBAAA,CAwBM,OA7BZM,UAAA,GAMQC,mBAAA,6BAAgC,EAChCC,YAAA,CAWEC,mBAAA;IAVCC,KAAK,EAAEN,KAAA,CAAAM,KAAK;IACZC,IAAI,EAAEP,KAAA,CAAAO,IAAI;IACVC,WAAW,EAAEC,QAAA,CAAAD,WAAW;IACxBE,UAAU,EAAEV,KAAA,CAAAU,UAAU;IACtBC,QAAQ,EAAEX,KAAA,CAAAW,QAAQ;IAClBC,OAAO,EAAEZ,KAAA,CAAAY,OAAO;IAChBC,aAAa,EAAEb,KAAA,CAAAa,aAAa;IAC5BC,cAAc,EAAEd,KAAA,CAAAc,cAAc;IAC9BC,cAAc,EAAEN,QAAA,CAAAM,cAAc;IAC9BC,WAAW,EAAEP,QAAA,CAAAO;sKAGRhB,KAAA,CAAAiB,WAAW,I,cADnBC,YAAA,CASEC,qBAAA;IA5BVxB,GAAA;IAqBWsB,WAAW,EAAEjB,KAAA,CAAAiB,WAAW;IACxBP,UAAU,EAAEV,KAAA,CAAAU,UAAU;IACtBJ,KAAK,EAAEN,KAAA,CAAAM,KAAK;IACZC,IAAI,EAAEP,KAAA,CAAAO,IAAI;IACVa,UAAU,EAAEX,QAAA,CAAAW,UAAU;IACtBC,UAAU,EAAEZ,QAAA,CAAAY,UAAU;IACtBC,iBAAiB,EAAEb,QAAA,CAAAa;8HA3B9BnB,mBAAA,e,oBA+BMP,mBAAA,CA6BM,OA5DZ2B,UAAA,GAgCQpB,mBAAA,4BAA+B,EACpBH,KAAA,CAAAwB,QAAQ,I,cAAnB5B,mBAAA,CA0BM,OA3Dd6B,UAAA,GAkCU3B,mBAAA,CAAwF;IAA/E4B,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEnB,QAAA,CAAAoB,iBAAA,IAAApB,QAAA,CAAAoB,iBAAA,IAAAD,IAAA,CAAiB;IAAElC,KAAK,EAAC;KAAkB,sBAAoB,GAE/ES,mBAAA,+BAAkC,EAClCC,YAAA,CAWEC,mBAAA;IAVCC,KAAK,EAAEN,KAAA,CAAAM,KAAK;IACZC,IAAI,EAAEP,KAAA,CAAAO,IAAI;IACVC,WAAW,EAAEC,QAAA,CAAAD,WAAW;IACxBE,UAAU,EAAEV,KAAA,CAAAU,UAAU;IACtBC,QAAQ,EAAEX,KAAA,CAAAW,QAAQ;IAClBC,OAAO,EAAEZ,KAAA,CAAAY,OAAO;IAChBC,aAAa,EAAEb,KAAA,CAAAa,aAAa;IAC5BC,cAAc,EAAEd,KAAA,CAAAc,cAAc;IAC9BC,cAAc,EAAEN,QAAA,CAAAM,cAAc;IAC9BC,WAAW,EAAEP,QAAA,CAAAO;sKAGRhB,KAAA,CAAAiB,WAAW,I,cADnBC,YAAA,CASEC,qBAAA;IA1DZxB,GAAA;IAmDasB,WAAW,EAAEjB,KAAA,CAAAiB,WAAW;IACxBP,UAAU,EAAEV,KAAA,CAAAU,UAAU;IACtBJ,KAAK,EAAEN,KAAA,CAAAM,KAAK;IACZC,IAAI,EAAEP,KAAA,CAAAO,IAAI;IACVa,UAAU,EAAEX,QAAA,CAAAW,UAAU;IACtBC,UAAU,EAAEZ,QAAA,CAAAY,UAAU;IACtBC,iBAAiB,EAAEb,QAAA,CAAAa;8HAzDhCnB,mBAAA,e,KAAAA,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}