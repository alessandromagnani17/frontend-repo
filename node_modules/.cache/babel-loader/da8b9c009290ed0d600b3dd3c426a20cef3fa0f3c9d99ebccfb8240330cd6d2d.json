{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  class: \"calendar\"\n};\nconst _hoisted_4 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_5 = {\n  class: \"calendar-grid\"\n};\nconst _hoisted_6 = {\n  class: \"date\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"Calendario Attività\", -1 /* HOISTED */)), _createCommentVNode(\" Verifica se l'utente è un paziente \"), $data.isPatient ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.changeMonth(-1))\n  }, \"‹\"), _createElementVNode(\"span\", null, _toDisplayString($data.monthNames[$data.month]) + \" \" + _toDisplayString($data.year), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.changeMonth(1))\n  }, \"›\")]), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.daysInMonth, day => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      class: \"calendar-day\"\n    }, [_createElementVNode(\"div\", _hoisted_6, _toDisplayString(day.date), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(day.radiographs, radiograph => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: radiograph.name,\n        class: \"radiograph-name\"\n      }, _toDisplayString(radiograph.name), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])])])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Messaggio per gli altri ruoli (es. medico) \"), _cache[2] || (_cache[2] = _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, \"Solo i pazienti possono vedere le loro radiografie nel calendario.\")], -1 /* HOISTED */))], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","$data","isPatient","_hoisted_2","_hoisted_3","_hoisted_4","onClick","_cache","$event","$options","changeMonth","_toDisplayString","monthNames","month","year","_hoisted_5","_Fragment","_renderList","daysInMonth","day","date","_hoisted_6","radiographs","radiograph","name"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n\n    <!-- Verifica se l'utente è un paziente -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <div class=\"calendar-grid\">\n          <div v-for=\"day in daysInMonth\" :key=\"day.date\" class=\"calendar-day\">\n            <div class=\"date\">{{ day.date }}</div>\n            <div\n              v-for=\"radiograph in day.radiographs\"\n              :key=\"radiograph.name\"\n              class=\"radiograph-name\"\n            >\n              {{ radiograph.name }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Messaggio per gli altri ruoli (es. medico) -->\n    <div v-else>\n      <p>Solo i pazienti possono vedere le loro radiografie nel calendario.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    const userData = JSON.parse(localStorage.getItem(\"userData\")); // Recupera le informazioni dell'utente loggato\n\n    if (userData && userData.role === \"patient\") {\n      selectedPatient.value = userData; // Imposta selectedPatient con userData\n      console.log(\"Informazioni utente loggato:\", userData); // Stampa le informazioni dell'utente\n    } else {\n      console.error(\"Nessun ID paziente trovato nel localStorage.\");\n    }\n    if (this.isPatient) {\n      this.loadRadiographs();\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i);\n        const radiographsOnDay = this.radiographs.filter(\n          (radiograph) =>\n            new Date(radiograph.date).toDateString() === dayDate.toDateString()\n        );\n\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay,\n        });\n      }\n      return days;\n    },\n  },\n  methods: {\n    checkUserRole() {\n      // Verifica il ruolo dell'utente\n      const userRole = localStorage.getItem(\"userRole\");\n      if (userRole === \"patient\") {\n        this.isPatient = true;\n      } else {\n        this.isPatient = false;\n      }\n    },\n\n    async loadRadiographs() {\n      // Carica le radiografie dal backend solo per il paziente loggato\n      try {\n        const patientId = localStorage.getItem(\"patientId\"); // Recupera l'ID del paziente dal localStorage\n        console.log(\"PAIENTID: \", patientId);\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n\n        if (response.ok) {\n          const data = await response.json();\n          this.radiographs = data;\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    changeMonth(direction) {\n      // Cambia mese\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.radiograph-name {\n  position: absolute;\n  bottom: 10px;\n  left: 5px;\n  font-size: 0.9em;\n  color: #007bff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 1.5em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAoB;;EADjCC,GAAA;AAAA;;EAMWD,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAiB;;EAMvBA,KAAK,EAAC;AAAe;;EAEjBA,KAAK,EAAC;AAAM;;uBAd3BE,mBAAA,CA+BM,OA/BNC,UA+BM,G,0BA9BJC,mBAAA,CAA4B,YAAxB,qBAAmB,sBAEvBC,mBAAA,wCAA2C,EAChCC,KAAA,CAAAC,SAAS,I,cAApBL,mBAAA,CAqBM,OA1BVM,UAAA,GAMMJ,mBAAA,CAmBM,OAnBNK,UAmBM,GAlBJL,mBAAA,CAIM,OAJNM,UAIM,GAHJN,mBAAA,CAAiD;IAAxCO,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW;KAAM,GAAO,GACxCX,mBAAA,CAA+C,cAAAY,gBAAA,CAAtCV,KAAA,CAAAW,UAAU,CAACX,KAAA,CAAAY,KAAK,KAAI,GAAC,GAAAF,gBAAA,CAAGV,KAAA,CAAAa,IAAI,kBACrCf,mBAAA,CAAgD;IAAvCO,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW;KAAK,GAAO,E,GAGzCX,mBAAA,CAWM,OAXNgB,UAWM,I,kBAVJlB,mBAAA,CASMmB,SAAA,QAvBhBC,WAAA,CAc6BR,QAAA,CAAAS,WAAW,EAAlBC,GAAG;yBAAftB,mBAAA,CASM;MAT2BD,GAAG,EAAEuB,GAAG,CAACC,IAAI;MAAEzB,KAAK,EAAC;QACpDI,mBAAA,CAAsC,OAAtCsB,UAAsC,EAAAV,gBAAA,CAAjBQ,GAAG,CAACC,IAAI,mB,kBAC7BvB,mBAAA,CAMMmB,SAAA,QAtBlBC,WAAA,CAiBmCE,GAAG,CAACG,WAAW,EAA7BC,UAAU;2BADnB1B,mBAAA,CAMM;QAJHD,GAAG,EAAE2B,UAAU,CAACC,IAAI;QACrB7B,KAAK,EAAC;0BAEH4B,UAAU,CAACC,IAAI;;yDAQ5B3B,mBAAA,CAEMmB,SAAA;IA/BVpB,GAAA;EAAA,IA4BII,mBAAA,gDAAmD,E,0BACnDD,mBAAA,CAEM,cADJA,mBAAA,CAAyE,WAAtE,oEAAkE,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}