{"ast":null,"code":"export default {\n  props: {\n    month: Number,\n    year: Number,\n    daysInMonth: Array,\n    monthNames: Array,\n    dayNames: Array,\n    minDate: String,\n    operationIcon: String,\n    radiographIcon: String,\n    showDayDetails: Function,\n    changeMonth: Function,\n    selectedDay: Object\n  },\n  data() {\n    return {\n      // Ottieni la data di oggi in formato YYYY-MM-DD per il confronto\n      formattedToday: new Date().toISOString().split(\"T\")[0]\n    };\n  },\n  methods: {\n    selectDay(day) {\n      const formattedDate = `${day.year}-${String(day.month).padStart(2, \"0\")}-${String(day.date).padStart(2, \"0\")}`;\n      this.$emit(\"update-selected-day\", {\n        ...day,\n        formattedDate\n      });\n    },\n    isSelectedDay(day) {\n      return this.selectedDay && this.selectedDay.formattedDate === `${day.year}-${String(day.month).padStart(2, \"0\")}-${String(day.date).padStart(2, \"0\")}`;\n    },\n    generateTooltip(day) {\n      const operations = day.operations || [];\n      const numberOfOperations = operations.length;\n\n      // Verifica se è oggi\n      const isToday = `${day.year}-${String(day.month).padStart(2, \"0\")}-${String(day.date).padStart(2, \"0\")}` === this.formattedToday;\n      if (numberOfOperations === 0) {\n        return isToday ? \"Nessuna operazione programmata per oggi.\" : `Nessuna operazione programmata per ${this.dayNames[new Date(day.year, day.month - 1, day.date).getDay()]} ${day.date}.`;\n      }\n      const operationTimes = operations.map(op => {\n        const operationTime = new Date(op.operationDate);\n        const hours = String(operationTime.getHours()).padStart(2, \"0\");\n        const minutes = String(operationTime.getMinutes()).padStart(2, \"0\");\n        return `${hours}:${minutes}`;\n      }).sort();\n      let operationText;\n      if (numberOfOperations >= 3) {\n        operationText = `Hai ${numberOfOperations} operazion${numberOfOperations > 1 ? \"i\" : \"e\"} programmat${numberOfOperations > 1 ? \"e\" : \"a\"} per ${isToday ? \"oggi\" : `${this.dayNames[new Date(day.year, day.month - 1, day.date).getDay()]} ${day.date}`} alle ${operationTimes.slice(0, -1).join(\", alle \")} e alle ${operationTimes[operationTimes.length - 1]}`;\n      } else {\n        operationText = `Hai ${numberOfOperations} operazion${numberOfOperations > 1 ? \"i\" : \"e\"} programmat${numberOfOperations > 1 ? \"e\" : \"a\"} per ${isToday ? \"oggi\" : `${this.dayNames[new Date(day.year, day.month - 1, day.date).getDay()]} ${day.date}`} alle ${operationTimes.join(\" e alle \")}`;\n      }\n      return operationText;\n    }\n  }\n};","map":{"version":3,"names":["props","month","Number","year","daysInMonth","Array","monthNames","dayNames","minDate","String","operationIcon","radiographIcon","showDayDetails","Function","changeMonth","selectedDay","Object","data","formattedToday","Date","toISOString","split","methods","selectDay","day","formattedDate","padStart","date","$emit","isSelectedDay","generateTooltip","operations","numberOfOperations","length","isToday","getDay","operationTimes","map","op","operationTime","operationDate","hours","getHours","minutes","getMinutes","sort","operationText","slice","join"],"sources":["C:\\Users\\Utente\\Desktop\\osteoarthritis-project\\frontend\\src\\components\\ScheduleCalendar.vue"],"sourcesContent":["<template>\r\n  <div class=\"calendar\">\r\n    <div class=\"calendar-header\">\r\n      <button class=\"month-button\" @click=\"changeMonth(-1)\">&#8249;</button>\r\n      <span>{{ monthNames[month] }} {{ year }}</span>\r\n      <button class=\"month-button\" @click=\"changeMonth(1)\">&#8250;</button>\r\n    </div>\r\n\r\n    <!-- Riga per i nomi dei giorni -->\r\n    <div class=\"calendar-day-names\">\r\n      <div v-for=\"dayName in dayNames\" :key=\"dayName\" class=\"day-name\">\r\n        {{ dayName }}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"calendar-grid\">\r\n      <div\r\n        v-for=\"day in daysInMonth\"\r\n        :key=\"`${day.year}-${day.month}-${day.date}`\"\r\n        :class=\"[\r\n          'calendar-day',\r\n          {\r\n            disabled: day.isDisabled,\r\n            today:\r\n              `${day.year}-${String(day.month).padStart(2, '0')}-${String(\r\n                day.date\r\n              ).padStart(2, '0')}` === formattedToday,\r\n            selected: isSelectedDay(day),\r\n          },\r\n        ]\"\r\n        @click=\"!day.isDisabled && selectDay(day)\"\r\n        :title=\"generateTooltip(day)\"\r\n      >\r\n        <!-- Data -->\r\n        <div class=\"date\">{{ day.date }}</div>\r\n\r\n        <!-- Icone Operazioni -->\r\n        <div class=\"icons\">\r\n          <div class=\"icon-row operations\">\r\n            <img\r\n              v-for=\"(operation, index) in day.operations\"\r\n              :key=\"'operation-' + index + '-' + day.date\"\r\n              :src=\"operationIcon\"\r\n              alt=\"Operazione\"\r\n              class=\"icon\"\r\n            />\r\n          </div>\r\n\r\n          <!-- Icone Radiografie -->\r\n          <div class=\"icon-row radiographs\">\r\n            <img\r\n              v-for=\"(radiograph, index) in day.radiographs\"\r\n              :key=\"'radiograph-' + index + '-' + day.date\"\r\n              :src=\"radiographIcon\"\r\n              alt=\"Radiografia\"\r\n              class=\"icon\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    month: Number,\r\n    year: Number,\r\n    daysInMonth: Array,\r\n    monthNames: Array,\r\n    dayNames: Array,\r\n    minDate: String,\r\n    operationIcon: String,\r\n    radiographIcon: String,\r\n    showDayDetails: Function,\r\n    changeMonth: Function,\r\n    selectedDay: Object,\r\n  },\r\n  data() {\r\n    return {\r\n      // Ottieni la data di oggi in formato YYYY-MM-DD per il confronto\r\n      formattedToday: new Date().toISOString().split(\"T\")[0],\r\n    };\r\n  },\r\n  methods: {\r\n    selectDay(day) {\r\n      const formattedDate = `${day.year}-${String(day.month).padStart(\r\n        2,\r\n        \"0\"\r\n      )}-${String(day.date).padStart(2, \"0\")}`;\r\n      this.$emit(\"update-selected-day\", { ...day, formattedDate });\r\n    },\r\n    isSelectedDay(day) {\r\n      return (\r\n        this.selectedDay &&\r\n        this.selectedDay.formattedDate ===\r\n          `${day.year}-${String(day.month).padStart(2, \"0\")}-${String(\r\n            day.date\r\n          ).padStart(2, \"0\")}`\r\n      );\r\n    },\r\n    generateTooltip(day) {\r\n      const operations = day.operations || [];\r\n      const numberOfOperations = operations.length;\r\n\r\n      // Verifica se è oggi\r\n      const isToday =\r\n        `${day.year}-${String(day.month).padStart(2, \"0\")}-${String(\r\n          day.date\r\n        ).padStart(2, \"0\")}` === this.formattedToday;\r\n\r\n      if (numberOfOperations === 0) {\r\n        return isToday\r\n          ? \"Nessuna operazione programmata per oggi.\"\r\n          : `Nessuna operazione programmata per ${\r\n              this.dayNames[\r\n                new Date(day.year, day.month - 1, day.date).getDay()\r\n              ]\r\n            } ${day.date}.`;\r\n      }\r\n\r\n      const operationTimes = operations\r\n        .map((op) => {\r\n          const operationTime = new Date(op.operationDate);\r\n          const hours = String(operationTime.getHours()).padStart(2, \"0\");\r\n          const minutes = String(operationTime.getMinutes()).padStart(2, \"0\");\r\n          return `${hours}:${minutes}`;\r\n        })\r\n        .sort();\r\n\r\n      let operationText;\r\n      if (numberOfOperations >= 3) {\r\n        operationText = `Hai ${numberOfOperations} operazion${\r\n          numberOfOperations > 1 ? \"i\" : \"e\"\r\n        } programmat${numberOfOperations > 1 ? \"e\" : \"a\"} per ${\r\n          isToday\r\n            ? \"oggi\"\r\n            : `${\r\n                this.dayNames[\r\n                  new Date(day.year, day.month - 1, day.date).getDay()\r\n                ]\r\n              } ${day.date}`\r\n        } alle ${operationTimes.slice(0, -1).join(\", alle \")} e alle ${\r\n          operationTimes[operationTimes.length - 1]\r\n        }`;\r\n      } else {\r\n        operationText = `Hai ${numberOfOperations} operazion${\r\n          numberOfOperations > 1 ? \"i\" : \"e\"\r\n        } programmat${numberOfOperations > 1 ? \"e\" : \"a\"} per ${\r\n          isToday\r\n            ? \"oggi\"\r\n            : `${\r\n                this.dayNames[\r\n                  new Date(day.year, day.month - 1, day.date).getDay()\r\n                ]\r\n              } ${day.date}`\r\n        } alle ${operationTimes.join(\" e alle \")}`;\r\n      }\r\n      return operationText;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.schedule-calendar {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.calendar-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  font-size: 1em;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.month-button {\r\n  background: none;\r\n  border: none;\r\n  padding: 5px;\r\n  cursor: pointer;\r\n  font-size: 1.5em;\r\n  color: #007bff;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.month-button:hover {\r\n  color: #0056b3;\r\n}\r\n\r\n.calendar-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  gap: 10px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.calendar-day {\r\n  position: relative;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  height: 70px;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n}\r\n\r\n.calendar-day.disabled {\r\n  opacity: 0.5;\r\n  color: #ccc;\r\n  pointer-events: none;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.calendar-day.today {\r\n  background-color: #f9f4f4;\r\n  border: 2px solid #ffa8a8db;\r\n  border-radius: 5px;\r\n}\r\n\r\n.calendar-day.selected {\r\n  border-radius: 5px;\r\n  border: 2px solid #7bbbffe7;\r\n}\r\n\r\n.calendar-day.today.selected {\r\n  background-color: #ffebeb;\r\n  border: 2px solid #7bbbffe7;\r\n}\r\n\r\n.calendar-day-names {\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  background-color: #f0f0f0;\r\n  padding: 10px 0;\r\n  font-weight: bold;\r\n  color: #555;\r\n  text-align: center;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.day-name {\r\n  text-transform: uppercase;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.icon-row {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 2px;\r\n}\r\n\r\n.operations {\r\n  min-height: 7px;\r\n  margin-bottom: 3px;\r\n}\r\n\r\n.icon {\r\n  width: 7px;\r\n  height: 7px;\r\n}\r\n\r\n/* Tooltip */\r\n.tooltip {\r\n  position: absolute;\r\n  top: -25px; /* Posiziona il tooltip sopra la data */\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  background-color: #333;\r\n  color: white;\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n  font-size: 12px;\r\n  z-index: 10;\r\n  visibility: visible;\r\n  opacity: 0.9;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}