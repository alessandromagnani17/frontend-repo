{"ast":null,"code":"export default {\n  name: \"PatientRadiographs\",\n  props: {\n    patientId: {\n      type: String,\n      required: true\n    },\n    patientName: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      radiographs: [],\n      selectedRadiograph: null,\n      // Per tracciare quale radiografia è stata selezionata\n      isModalOpen: false,\n      // Stato per il modale\n      modalImageUrl: \"\",\n      // URL dell'immagine ingrandita\n      isPreviewVisible: false\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch(`/api/patients/${this.patientId}/radiographs`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        this.radiographs = await response.json();\n      } else {\n        console.error(\"Errore nel recupero delle radiografie.\");\n      }\n    } catch (error) {\n      console.error(\"Errore:\", error);\n    }\n  },\n  methods: {\n    enlargeRadiograph(url) {\n      // Apri il modale e mostra l'immagine ingrandita\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    toggleRadiograph(radiograph) {\n      // Se la radiografia selezionata è già aperta, chiudila\n      if (this.selectedRadiograph === radiograph) {\n        this.isPreviewVisible = false; // Nascondi l'anteprima\n        setTimeout(() => {\n          this.selectedRadiograph = null; // Chiudi la radiografia dopo il delay\n        }, 500); // Delay per l'animazione\n      } else {\n        this.selectedRadiograph = radiograph;\n        this.isPreviewVisible = true; // Mostra l'anteprima\n        // Aspetta che l'animazione sia completa, poi mostra l'immagine\n        setTimeout(() => {\n          this.modalImageUrl = radiograph.url; // Imposta l'URL dell'immagine nel modale\n          this.isModalOpen = true; // Apri il modale dopo che l'immagine è pronta\n        }, 500); // Delay per l'animazione\n      }\n    },\n    closeModal() {\n      this.isModalOpen = false; // Chiudi il modale immediatamente\n      setTimeout(() => {\n        this.isPreviewVisible = false; // Nascondi l'anteprima dopo il delay\n      }, 500); // Delay per l'animazione\n    }\n  }\n};","map":{"version":3,"names":["name","props","patientId","type","String","required","patientName","data","radiographs","selectedRadiograph","isModalOpen","modalImageUrl","isPreviewVisible","mounted","response","fetch","method","headers","ok","json","console","error","methods","enlargeRadiograph","url","toggleRadiograph","radiograph","setTimeout","closeModal"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/PatientRadiographs.vue"],"sourcesContent":["<template>\n  <div class=\"radiograph-list\">\n    <h2>Radiografie di {{ patientName }}</h2>\n    <ul v-if=\"radiographs.length\">\n      <li\n        v-for=\"radiograph in radiographs\"\n        :key=\"radiograph.name\"\n        class=\"radiograph-item\"\n      >\n        <div>\n          {{ radiograph.date }} -\n          <button @click=\"toggleRadiograph(radiograph)\" class=\"view-link\">\n            Visualizza\n          </button>\n        </div>\n\n        <!-- Se l'immagine è selezionata, mostriamo l'anteprima -->\n        <transition name=\"radiograph-preview\">\n          <div\n            v-if=\"selectedRadiograph === radiograph && isPreviewVisible\"\n            class=\"radiograph-preview\"\n          >\n            <img\n              :src=\"radiograph.url\"\n              alt=\"Radiografia\"\n              class=\"radiograph-image\"\n            />\n            <div class=\"radiograph-controls\">\n              <button\n                @click=\"enlargeRadiograph(radiograph.url)\"\n                class=\"control-button\"\n              >\n                <img src=\"@/assets/zoom.svg\" alt=\"Zoom\" class=\"icon\" />\n              </button>\n              <a :href=\"radiograph.url\" download class=\"control-button\">\n                <img src=\"@/assets/download.svg\" alt=\"Download\" class=\"icon\" />\n              </a>\n            </div>\n          </div>\n        </transition>\n      </li>\n    </ul>\n    <p v-else>Nessuna radiografia trovata per questo paziente.</p>\n\n    <!-- Modale per ingrandire l'immagine -->\n    <div v-if=\"isModalOpen\" class=\"modal\">\n      <div class=\"modal-content\">\n        <span @click=\"closeModal\" class=\"close-button\">\n          <img src=\"@/assets/cross.svg\" alt=\"Chiudi\" />\n        </span>\n        <img\n          :src=\"modalImageUrl\"\n          alt=\"Immagine ingrandita\"\n          class=\"modal-image\"\n        />\n        <button @click=\"closeModal\" class=\"close-button\" style=\"display: none\">\n          Rimpicciolisci\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"PatientRadiographs\",\n  props: {\n    patientId: {\n      type: String,\n      required: true,\n    },\n    patientName: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      radiographs: [],\n      selectedRadiograph: null, // Per tracciare quale radiografia è stata selezionata\n      isModalOpen: false, // Stato per il modale\n      modalImageUrl: \"\", // URL dell'immagine ingrandita\n      isPreviewVisible: false,\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch(\n        `/api/patients/${this.patientId}/radiographs`,\n        {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (response.ok) {\n        this.radiographs = await response.json();\n      } else {\n        console.error(\"Errore nel recupero delle radiografie.\");\n      }\n    } catch (error) {\n      console.error(\"Errore:\", error);\n    }\n  },\n  methods: {\n    enlargeRadiograph(url) {\n      // Apri il modale e mostra l'immagine ingrandita\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    toggleRadiograph(radiograph) {\n      // Se la radiografia selezionata è già aperta, chiudila\n      if (this.selectedRadiograph === radiograph) {\n        this.isPreviewVisible = false; // Nascondi l'anteprima\n        setTimeout(() => {\n          this.selectedRadiograph = null; // Chiudi la radiografia dopo il delay\n        }, 500); // Delay per l'animazione\n      } else {\n        this.selectedRadiograph = radiograph;\n        this.isPreviewVisible = true; // Mostra l'anteprima\n        // Aspetta che l'animazione sia completa, poi mostra l'immagine\n        setTimeout(() => {\n          this.modalImageUrl = radiograph.url; // Imposta l'URL dell'immagine nel modale\n          this.isModalOpen = true; // Apri il modale dopo che l'immagine è pronta\n        }, 500); // Delay per l'animazione\n      }\n    },\n    closeModal() {\n      this.isModalOpen = false; // Chiudi il modale immediatamente\n      setTimeout(() => {\n        this.isPreviewVisible = false; // Nascondi l'anteprima dopo il delay\n      }, 500); // Delay per l'animazione\n    },\n  },\n};\n</script>\n\n<style scoped>\n.radiograph-list {\n  max-width: 800px;\n  margin: 20px auto;\n}\n\nh2 {\n  font-size: 18px;\n  color: #333;\n  margin-bottom: 15px;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli.radiograph-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #ccc;\n  font-size: 12px;\n  color: #444;\n  display: flex;\n  flex-direction: column;\n}\n\n.view-link {\n  color: #007bff;\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-weight: bold;\n  transition: color 1s ease; /* Animazione più lenta */\n  padding: 0;\n  margin: 0;\n}\n\n.view-link:hover {\n  color: #0056b3;\n}\n\n.radiograph-preview {\n  transition: opacity 0.5s ease, transform 0.5s ease; /* Animazioni per la visualizzazione */\n  opacity: 0; /* Nascondi di default */\n  transform: translateY(20px); /* Sposta verso il basso */\n}\n\n.radiograph-preview-enter-active,\n.radiograph-preview-leave-active {\n  transition: opacity 0.5s ease; /* Effetto di transizione dell'opacità */\n}\n\n.radiograph-preview-enter, .radiograph-preview-leave-to /* .radiograph-preview-leave-active in <2.1.8 */ {\n  opacity: 0; /* Inizio e fine trasparente */\n}\n\n.radiograph-image {\n  width: 100%;\n  max-width: 600px; /* Dimensione aumentata */\n  display: block;\n  margin: 0 auto; /* Centrare orizzontalmente */\n}\n\n.radiograph-controls {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.control-button {\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  margin-left: 10px;\n}\n\n.icon {\n  width: 24px; /* Dimensione dell'icona */\n  height: 24px; /* Dimensione dell'icona */\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  position: relative;\n  max-width: 80%;\n  max-height: 80%;\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  text-align: center;\n}\n\n.modal-image {\n  max-width: 100%;\n  max-height: 70vh;\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  cursor: pointer;\n  font-size: 24px;\n}\n</style>\n"],"mappings":"AAgEA,eAAe;EACbA,IAAI,EAAE,oBAAoB;EAC1BC,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,WAAW,EAAE;MACXH,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,kBAAkB,EAAE,IAAI;MAAE;MAC1BC,WAAW,EAAE,KAAK;MAAE;MACpBC,aAAa,EAAE,EAAE;MAAE;MACnBC,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI;MACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAC1B,iBAAiB,IAAI,CAACb,SAAS,cAAc,EAC7C;QACEc,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACf,IAAI,CAACV,WAAU,GAAI,MAAMM,QAAQ,CAACK,IAAI,CAAC,CAAC;MAC1C,OAAO;QACLC,OAAO,CAACC,KAAK,CAAC,wCAAwC,CAAC;MACzD;IACF,EAAE,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,iBAAiBA,CAACC,GAAG,EAAE;MACrB;MACA,IAAI,CAACb,aAAY,GAAIa,GAAG;MACxB,IAAI,CAACd,WAAU,GAAI,IAAI;IACzB,CAAC;IACDe,gBAAgBA,CAACC,UAAU,EAAE;MAC3B;MACA,IAAI,IAAI,CAACjB,kBAAiB,KAAMiB,UAAU,EAAE;QAC1C,IAAI,CAACd,gBAAe,GAAI,KAAK,EAAE;QAC/Be,UAAU,CAAC,MAAM;UACf,IAAI,CAAClB,kBAAiB,GAAI,IAAI,EAAE;QAClC,CAAC,EAAE,GAAG,CAAC,EAAE;MACX,OAAO;QACL,IAAI,CAACA,kBAAiB,GAAIiB,UAAU;QACpC,IAAI,CAACd,gBAAe,GAAI,IAAI,EAAE;QAC9B;QACAe,UAAU,CAAC,MAAM;UACf,IAAI,CAAChB,aAAY,GAAIe,UAAU,CAACF,GAAG,EAAE;UACrC,IAAI,CAACd,WAAU,GAAI,IAAI,EAAE;QAC3B,CAAC,EAAE,GAAG,CAAC,EAAE;MACX;IACF,CAAC;IACDkB,UAAUA,CAAA,EAAG;MACX,IAAI,CAAClB,WAAU,GAAI,KAAK,EAAE;MAC1BiB,UAAU,CAAC,MAAM;QACf,IAAI,CAACf,gBAAe,GAAI,KAAK,EAAE;MACjC,CAAC,EAAE,GAAG,CAAC,EAAE;IACX;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}