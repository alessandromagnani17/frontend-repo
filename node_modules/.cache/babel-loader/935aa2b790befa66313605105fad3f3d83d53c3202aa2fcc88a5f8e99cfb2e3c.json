{"ast":null,"code":"import axios from \"axios\";\nimport { getPatientsFromDoctor } from \"@/services/api-service\";\nexport default {\n  data() {\n    return {\n      selectedFile: null,\n      selectedFileName: null,\n      predictedClass: null,\n      imagePreview: null,\n      gradcamImage: null,\n      showNewPredictionButton: false,\n      showPredictButton: true,\n      showUploadSection: true,\n      patients: [],\n      selectedPatient: \"\",\n      isLoading: true,\n      showMainImagePreview: true\n    };\n  },\n  async created() {\n    const userData = JSON.parse(localStorage.getItem(\"userData\"));\n    const userUid = userData.doctorID;\n    this.patients = await getPatientsFromDoctor(userUid);\n    this.isLoading = false;\n  },\n  methods: {\n    resetPrediction() {\n      this.selectedFile = null;\n      this.selectedFileName = null;\n      this.predictedClass = null;\n      this.imagePreview = null;\n      this.gradcamImage = null;\n      this.showNewPredictionButton = false;\n      this.showPredictButton = true;\n      this.showUploadSection = true;\n      this.showMainImagePreview = false;\n      this.selectedPatient = \"\";\n      if (this.$refs.fileInput) {\n        this.$refs.fileInput.value = \"\";\n      }\n    },\n    selectFile() {\n      this.$refs.fileInput.click();\n    },\n    onFileChange(event) {\n      this.selectedFile = event.target.files[0];\n      this.selectedFileName = this.selectedFile.name;\n      this.imagePreview = URL.createObjectURL(this.selectedFile);\n    },\n    async submitImage() {\n      if (!this.selectedFile) return;\n      const formData = new FormData();\n      formData.append(\"file\", this.selectedFile);\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      const userUid = userData.uid;\n      formData.append(\"userUID\", userUid);\n      formData.append(\"selectedPatientID\", this.selectedPatient);\n      try {\n        const response = await axios.post(\"http://127.0.0.1:5000/predict\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        console.log(\"Response from server:\", response.data);\n        this.predictedClass = response.data.predicted_class;\n        this.gradcamImage = response.data.gradcam_image;\n        this.showNewPredictionButton = true;\n        this.showPredictButton = false;\n        this.showUploadSection = false;\n        this.showMainImagePreview = false;\n      } catch (error) {\n        console.error(\"Error predicting image:\", error);\n      }\n    },\n    onPatientChange() {\n      // Mostra il pulsante di selezione file\n      this.showPredictButton = true; // Mostra il pulsante di predizione\n    }\n  }\n};","map":{"version":3,"names":["axios","getPatientsFromDoctor","data","selectedFile","selectedFileName","predictedClass","imagePreview","gradcamImage","showNewPredictionButton","showPredictButton","showUploadSection","patients","selectedPatient","isLoading","showMainImagePreview","created","userData","JSON","parse","localStorage","getItem","userUid","doctorID","methods","resetPrediction","$refs","fileInput","value","selectFile","click","onFileChange","event","target","files","name","URL","createObjectURL","submitImage","formData","FormData","append","uid","response","post","headers","console","log","predicted_class","gradcam_image","error","onPatientChange"],"sources":["C:\\Users\\Utente\\Desktop\\osteoarthritis-project\\frontend\\src\\components\\PredictRadiograph.vue"],"sourcesContent":["<template>\n  <div class=\"welcome\">\n    <div class=\"container mt-5\">\n      <h5 v-if=\"showUploadSection\"><strong>Carica una radiografia</strong></h5>\n      <div v-if=\"isLoading\" class=\"alert alert-info\">Caricamento...</div>\n      <div v-else>\n        <div v-if=\"patients.length === 0\" class=\"alert alert-warning\">\n          Non hai ancora nessun paziente associato.\n        </div>\n        <div v-else>\n          <div v-if=\"selectedPatient\">\n            <input\n              v-if=\"showUploadSection\"\n              type=\"file\"\n              ref=\"fileInput\"\n              @change=\"onFileChange\"\n              accept=\"image/*\"\n              style=\"display: none\"\n            />\n            <button\n              v-if=\"showUploadSection\"\n              @click=\"selectFile\"\n              class=\"btn btn-secondary\"\n            >\n              Seleziona file\n            </button>\n          </div>\n          <div class=\"select-container mb-4\">\n            <select\n              v-if=\"patients.length > 0 && !selectedPatient\"\n              v-model=\"selectedPatient\"\n              @change=\"onPatientChange\"\n              class=\"form-select custom-select\"\n            >\n              <option value=\"\" disabled selected>Seleziona un paziente</option>\n              <option\n                v-for=\"patient in patients\"\n                :key=\"patient.userId\"\n                :value=\"patient.userId\"\n              >\n                {{ patient.name }}\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div v-if=\"showMainImagePreview\" class=\"mt-3\">\n        <div v-if=\"imagePreview && selectedPatient\" class=\"mt-3\">\n          <img\n            :src=\"imagePreview\"\n            alt=\"Anteprima immagine\"\n            class=\"img-preview\"\n          />\n        </div>\n      </div>\n      <div v-else>\n        <h2 class=\"mb-4\">Risultati della predizione</h2>\n      </div>\n      <div v-if=\"imagePreview && selectedPatient\">\n        <button\n          v-if=\"showPredictButton\"\n          @click=\"submitImage\"\n          class=\"btn btn-primary mt-5\"\n        >\n          Predici osteoartrite\n        </button>\n      </div>\n      <div v-if=\"predictedClass !== null\" class=\"mt-4\">\n        <div class=\"row\">\n          <div class=\"col-md-6 col-12\">\n            <div class=\"card\">\n              <img\n                :src=\"imagePreview\"\n                class=\"card-img-top\"\n                alt=\"Anteprima immagine\"\n              />\n              <div class=\"card-body\">\n                <h5 class=\"card-title\">Radiografia Originale</h5>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-6 col-12\">\n            <div class=\"card\">\n              <img\n                :src=\"gradcamImage\"\n                class=\"card-img-top\"\n                alt=\"Grad-CAM Image\"\n              />\n              <div class=\"card-body\">\n                <h5 class=\"card-title\">Applicazione Grad-CAM</h5>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"card prediction-card mb-3\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{{ predictedClass }}</h5>\n          </div>\n        </div>\n        <div v-if=\"showNewPredictionButton\" class=\"mt-4\">\n          <button @click=\"resetPrediction\" class=\"btn btn-secondary\">\n            Esegui nuova predizione\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport { getPatientsFromDoctor } from \"@/services/api-service\";\n\nexport default {\n  data() {\n    return {\n      selectedFile: null,\n      selectedFileName: null,\n      predictedClass: null,\n      imagePreview: null,\n      gradcamImage: null,\n      showNewPredictionButton: false,\n      showPredictButton: true,\n      showUploadSection: true,\n      patients: [],\n      selectedPatient: \"\",\n      isLoading: true,\n      showMainImagePreview: true,\n    };\n  },\n  async created() {\n    const userData = JSON.parse(localStorage.getItem(\"userData\"));\n    const userUid = userData.doctorID;\n    this.patients = await getPatientsFromDoctor(userUid);\n    this.isLoading = false;\n  },\n  methods: {\n    resetPrediction() {\n      this.selectedFile = null;\n      this.selectedFileName = null;\n      this.predictedClass = null;\n      this.imagePreview = null;\n      this.gradcamImage = null;\n      this.showNewPredictionButton = false;\n      this.showPredictButton = true;\n      this.showUploadSection = true;\n      this.showMainImagePreview = false;\n      this.selectedPatient = \"\";\n      if (this.$refs.fileInput) {\n        this.$refs.fileInput.value = \"\";\n      }\n    },\n    selectFile() {\n      this.$refs.fileInput.click();\n    },\n    onFileChange(event) {\n      this.selectedFile = event.target.files[0];\n      this.selectedFileName = this.selectedFile.name;\n      this.imagePreview = URL.createObjectURL(this.selectedFile);\n    },\n    async submitImage() {\n      if (!this.selectedFile) return;\n\n      const formData = new FormData();\n      formData.append(\"file\", this.selectedFile);\n\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      const userUid = userData.uid;\n      formData.append(\"userUID\", userUid);\n      formData.append(\"selectedPatientID\", this.selectedPatient);\n\n      try {\n        const response = await axios.post(\n          \"http://127.0.0.1:5000/predict\",\n          formData,\n          {\n            headers: {\n              \"Content-Type\": \"multipart/form-data\",\n            },\n          }\n        );\n\n        console.log(\"Response from server:\", response.data);\n        this.predictedClass = response.data.predicted_class;\n        this.gradcamImage = response.data.gradcam_image;\n        this.showNewPredictionButton = true;\n        this.showPredictButton = false;\n        this.showUploadSection = false;\n        this.showMainImagePreview = false;\n      } catch (error) {\n        console.error(\"Error predicting image:\", error);\n      }\n    },\n    onPatientChange() {\n      // Mostra il pulsante di selezione file\n      this.showPredictButton = true; // Mostra il pulsante di predizione\n    },\n  },\n};\n</script>\n\n<style scoped>\n.welcome {\n  background: #ffffff; /* Sfondo bianco */\n  min-height: 100vh;\n  display: flex;\n  align-items: center; /* Centra verticalmente */\n  justify-content: center; /* Centra orizzontalmente */\n}\n\n.container {\n  max-width: 90%; /* Modifica qui per utilizzare una percentuale */\n  padding: 5%; /* Usa percentuali per il padding */\n  border-radius: 15px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n  margin-top: 10%; /* Usa percentuali per il margine superiore */\n  height: auto;\n  text-align: center;\n  flex-grow: 1;\n}\n\n.img-preview {\n  max-width: 100%;\n  max-height: 50vh; /* Modifica per utilizzare una percentuale dell'altezza della finestra */\n  margin-top: 15px;\n}\n\n.row {\n  display: flex; /* Usa Flexbox per le card */\n  flex-wrap: wrap; /* Permetti alle card di andare a capo se necessario */\n  margin-bottom: 20px; /* Margine inferiore per la separazione */\n  height: 10%;\n}\n\n.card {\n  flex: 1 1 45%; /* Permetti alle card di occupare il 45% della larghezza */\n  margin: 10px; /* Margine tra le card */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Stili per la card della predizione */\n.card.prediction-card {\n  margin-top: 20px; /* Margine superiore per separarla dalle altre card */\n}\n\n.card-img-top {\n  border-radius: 0.5rem;\n  max-height: 50vh; /* Limita l'altezza in percentuale */\n  object-fit: cover; /* Mantieni le proporzioni dell'immagine */\n}\n\n.card-body {\n  text-align: center;\n}\n\n.btn-primary {\n  background-color: #007bff;\n  border: none;\n}\n\n.btn-primary:hover {\n  background-color: #0056b3;\n}\n\n.sidebar {\n  top: 0;\n  width: 250px;\n  height: 100vh;\n  padding: 20px;\n  background: linear-gradient(180deg, #212529, #343a40);\n  margin-right: 20px;\n}\n\n.sidebar .nav-link {\n  color: #cfd2d6;\n}\n\n.sidebar .nav-link:hover {\n  background-color: #495057;\n  border-radius: 5px;\n}\n\n.nav-link {\n  padding: 10px 15px;\n}\n\n@media (max-width: 767.98px) {\n  .navbar-brand {\n    font-size: 1.5rem;\n  }\n\n  .sidebar {\n    display: none;\n  }\n}\n\n.select-container {\n  margin-top: 18px; /* Spazio sopra il menu a tendina */\n  margin-bottom: 10px; /* Spazio sotto il menu a tendina */\n}\n\n.form-select {\n  display: block; /* Assicurati che il selettore occupi l'intera larghezza */\n  width: 100%; /* Fa sì che il selettore si espanda */\n  padding: 10px; /* Padding interno per il selettore */\n  border: 1px solid #ced4da; /* Colore del bordo */\n  border-radius: 5px; /* Angoli arrotondati */\n  background-color: #fff; /* Sfondo bianco */\n  transition: border-color 0.2s; /* Transizione per il cambio del colore del bordo */\n}\n\n.form-select:focus {\n  border-color: #007bff; /* Colore del bordo quando in focus */\n  outline: none; /* Rimuove l'outline predefinito */\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); /* Ombra del box quando in focus */\n}\n\n.custom-select {\n  max-width: 30%; /* Imposta la larghezza massima desiderata */\n  margin: 0 auto; /* Centra il menu a tendina */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}