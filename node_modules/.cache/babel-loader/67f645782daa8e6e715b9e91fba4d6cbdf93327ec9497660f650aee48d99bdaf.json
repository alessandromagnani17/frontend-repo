{"ast":null,"code":"export default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(),\n      // Mese corrente\n      year: new Date().getFullYear(),\n      // Anno corrente\n      radiographs: [],\n      // Le radiografie caricate\n      operations: [],\n      selectedDay: null,\n      // Giorno selezionato\n      monthNames: [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"],\n      dayNames: [\"LUN\", \"MAR\", \"MER\", \"GIO\", \"VEN\", \"SAB\", \"DOM\"],\n      isPatient: false,\n      // Indica se l'utente è un paziente\n      isDoctor: false,\n      // Indica se l'utente è un dottore\n      selectedPatient: null,\n      // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [],\n      // Pazienti associati al dottore\n      showModal: false,\n      // Controlla la visibilità del modale\n      operationDate: \"\",\n      // Data dell'operazione\n      operationTime: \"\",\n      description: \"\",\n      // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0],\n      // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\")\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n      const firstDayOfMonth = new Date(this.year, this.month, 1);\n      const startDayOfWeek = firstDayOfMonth.getDay(); // Giorno della settimana (0 = Domenica, 1 = Lunedì, ecc.)\n\n      // Calcola quanti giorni del mese precedente devono essere inclusi\n      const daysFromPrevMonth = (startDayOfWeek + 6) % 7; // Se il mese inizia di lunedì, vogliamo 0 giorni precedenti\n      const prevMonthLastDay = new Date(this.year, this.month, 0).getDate();\n\n      // Radiografie e operazioni per ogni giorno\n      const radiographsPerDay = {};\n      const operationsPerDay = {};\n      if (this.isDoctor) {\n        this.patients.forEach(patient => {\n          if (patient.radiographs) {\n            patient.radiographs.forEach(radiograph => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`\n              });\n            });\n          }\n          if (patient.operations) {\n            patient.operations.forEach(operation => {\n              const operationDate = this.parseISODate(operation.operationDate);\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}`\n                });\n              }\n            });\n          }\n        });\n      } else {\n        this.radiographs.forEach(radiograph => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push(radiograph);\n        });\n        this.operations.forEach(operation => {\n          const operationDate = this.parseISODate(operation.operationDate);\n          if (operationDate !== \"Invalid Date\") {\n            if (!operationsPerDay[operationDate]) {\n              operationsPerDay[operationDate] = [];\n            }\n            operationsPerDay[operationDate].push(operation);\n          }\n        });\n      }\n\n      // Aggiungi i giorni del mese precedente\n      for (let i = daysFromPrevMonth; i > 0; i--) {\n        const date = new Date(this.year, this.month - 1, prevMonthLastDay - i + 1);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: date.getDate(),\n          year: date.getFullYear(),\n          // Aggiungi l'anno\n          month: date.getMonth(),\n          // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true // Per i giorni del mese precedente\n        });\n      }\n\n      // Aggiungi i giorni del mese corrente\n      for (let i = 1; i <= totalDays; i++) {\n        const date = new Date(this.year, this.month, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(),\n          // Aggiungi l'anno\n          month: date.getMonth() + 1,\n          // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: false // Per i giorni del mese corrente\n        });\n      }\n\n      // Calcola quanti giorni del mese successivo devono essere inclusi\n      const remainingDays = 42 - days.length; // Un calendario completo ha 6 settimane = 42 giorni\n      for (let i = 1; i <= remainingDays; i++) {\n        const date = new Date(this.year, this.month + 1, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(),\n          // Aggiungi l'anno\n          month: date.getMonth() + 1,\n          // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true // Per i giorni del mese successivo\n        });\n      }\n      return days;\n    }\n  },\n  methods: {\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (!this.selectedPatientId || !this.operationDate || !this.operationTime || !this.description) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(this.operationDate, this.operationTime);\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate,\n            // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString() // Timestamp di creazione\n          })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || \"Errore durante la pianificazione dell'operazione.\");\n        }\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\"Errore durante la pianificazione dell'operazione:\", error);\n        alert(\"Errore: \" + error.message);\n      }\n    },\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(`DEBUG: Errore nella conversione della data ISO \"${isoString}\":`, error);\n        return \"Invalid Date\";\n      }\n    },\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n        console.log(\"Ruolo utente: Paziente\");\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n    // Modifica per caricare le radiografie dei pazienti\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie per ogni paziente\n          this.patients.forEach(patient => {\n            this.loadRadiographs(patient.userId); // Carica le radiografie per ogni paziente\n            this.loadOperations(patient.userId);\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n    async loadOperations(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/operations`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Log delle operazioni trovate\n          console.log(`Operazioni trovate per il paziente con ID ${patientId}:`, data);\n\n          // Trova il paziente e aggiungi le operazioni al suo record\n          const patient = this.patients.find(p => p.userId === patientId);\n          if (patient) {\n            patient.operations = data; // Aggiungi le operazioni al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n    // Modifica per caricare le radiografie specifiche di un paziente\n    async loadRadiographs(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Trova il paziente e aggiungi le radiografie al suo record\n          const patient = this.patients.find(p => p.userId === patientId);\n          if (patient) {\n            patient.radiographs = data; // Aggiungi le radiografie al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    }\n  }\n};","map":{"version":3,"names":["name","data","loadingPrediction","successMessage","month","Date","getMonth","year","getFullYear","radiographs","operations","selectedDay","monthNames","dayNames","isPatient","isDoctor","selectedPatient","selectedPatientId","patients","showModal","operationDate","operationTime","description","minDate","toISOString","split","operationIcon","require","radiographIcon","mounted","checkUserRole","loadPatients","computed","daysInMonth","days","lastDayOfMonth","totalDays","getDate","firstDayOfMonth","startDayOfWeek","getDay","daysFromPrevMonth","prevMonthLastDay","radiographsPerDay","operationsPerDay","forEach","patient","radiograph","radiographDate","date","toDateString","push","patientName","family_name","operation","parseISODate","i","dayString","radiographsOnDay","operationsOnDay","isDisabled","remainingDays","length","methods","openScheduleModal","closeScheduleModal","scheduleOperation","alert","doctorId","localStorage","getItem","selectedDate","today","setHours","formattedDate","combineDateAndTime","response","fetch","method","headers","body","JSON","stringify","patientId","createdAt","ok","error","json","Error","message","showActivityCalendar","console","isoString","isNaN","time","getMinDate","yyyy","mm","toString","padStart","dd","closeModal","userData","parse","role","userId","log","loadRadiographs","loadOperations","find","p","refreshCalendar","$forceUpdate","showDayDetails","day","enlargeRadiograph","url","modalImageUrl","isModalOpen","changeMonth","direction","beforeEnter","el","style","opacity","enter","done","offsetHeight","transition","leave"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"activity-calendar\">\n    <div class=\"calendar-container\">\n      <h1 class=\"calendar\">Calendario Attività</h1>\n      <button @click=\"openScheduleModal\" class=\"btn btn-primary\">\n        Pianifica Operazione\n      </button>\n\n      <!-- Modale per inserire i dettagli dell'operazione -->\n      <div v-if=\"showModal\" class=\"modal\">\n        <div class=\"modal-content\">\n          <h2>Pianifica una nuova operazione</h2>\n          <!-- Menu a tendina per selezionare un paziente -->\n          <label for=\"patientSelect\">Seleziona un paziente:</label>\n          <select\n            v-model=\"selectedPatientId\"\n            id=\"patientSelect\"\n            class=\"form-select\"\n          >\n            <option value=\"\" disabled>Seleziona un paziente</option>\n            <option\n              v-for=\"patient in patients\"\n              :key=\"patient.userId\"\n              :value=\"patient.userId\"\n            >\n              {{ patient.name }} {{ patient.family_name }}\n            </option>\n          </select>\n\n          <label for=\"operationDate\">Data dell'operazione:</label>\n          <input\n            type=\"date\"\n            v-model=\"operationDate\"\n            id=\"operationDate\"\n            :min=\"minDate\"\n          />\n\n          <label for=\"operationTime\">Ora dell'operazione:</label>\n          <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\n\n          <label for=\"description\">Descrizione:</label>\n          <textarea v-model=\"description\" id=\"description\"></textarea>\n\n          <button @click=\"scheduleOperation\" class=\"btn btn-success\">\n            Salva\n          </button>\n          <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\n            Annulla\n          </button>\n        </div>\n      </div>\n      <!-- Verifica se l'utente è un paziente o un dottore -->\n      <div v-if=\"isPatient\">\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"changeMonth(-1)\">&#8249;</button>\n            <span>{{ monthNames[month] }} {{ year }}</span>\n            <button @click=\"changeMonth(1)\">&#8250;</button>\n          </div>\n\n          <!-- Riga per i nomi dei giorni -->\n          <div class=\"calendar-day-names\">\n            <div v-for=\"dayName in dayNames\" :key=\"dayName\" class=\"day-name\">\n              {{ dayName }}\n            </div>\n          </div>\n\n          <div class=\"calendar-grid\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"`${day.year}-${day.month}-${day.date}`\"\n              :class=\"[\n                'calendar-day',\n                {\n                  disabled: day.isDisabled,\n                  today:\n                    `${day.year}-${String(day.month).padStart(2, '0')}-${String(\n                      day.date\n                    ).padStart(2, '0')}` === minDate,\n                },\n              ]\"\n              @click=\"!day.isDisabled && showDayDetails(day)\"\n            >\n              <!-- Data -->\n              <div class=\"date\">{{ day.date }}</div>\n\n              <!-- Icone Operazioni -->\n              <div class=\"icon-row operations\">\n                <img\n                  v-for=\"n in day.operations.length\"\n                  :key=\"'operation-' + n + '-' + day.date\"\n                  :src=\"operationIcon\"\n                  alt=\"Operazione\"\n                  class=\"icon\"\n                />\n              </div>\n\n              <div class=\"icon-row radiographs\">\n                <img\n                  v-for=\"n in day.radiographs.length\"\n                  :key=\"'radiograph-' + n + '-' + day.date\"\n                  :src=\"radiographIcon\"\n                  alt=\"Radiografia\"\n                  class=\"icon\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Dettagli del giorno selezionato con animazione -->\n        <transition\n          name=\"fade\"\n          @before-enter=\"beforeEnter\"\n          @enter=\"enter\"\n          @leave=\"leave\"\n        >\n          <div v-if=\"selectedDay\" class=\"day-details\">\n            <h2>\n              Dettagli del Giorno: {{ selectedDay.date }}\n              {{ monthNames[month] }}\n              {{ year }}\n            </h2>\n            <div v-if=\"selectedDay.operations.length > 0\">\n              <p>\n                <strong>Paziente:</strong> {{ selectedPatient.name }}\n                {{ selectedPatient.family_name }}\n              </p>\n              <h3>Operazioni pianificate:</h3>\n              <ul>\n                <li\n                  v-for=\"operation in selectedDay.operations\"\n                  :key=\"operation.id\"\n                >\n                  <strong>{{ operation.type }}</strong\n                  ><br />\n                  <span>{{ operation.date }}</span\n                  ><br />\n                  <span>{{ operation.description }}</span\n                  ><br />\n                </li>\n              </ul>\n            </div>\n            <div v-else>\n              <p>Nessuna operazione pianificata per questa data.</p>\n            </div>\n            <div v-if=\"selectedDay.radiographs.length > 0\">\n              <h3>Radiografie caricate:</h3>\n              <ul>\n                <li\n                  v-for=\"radiograph in selectedDay.radiographs\"\n                  :key=\"radiograph.name\"\n                >\n                  <strong>{{ radiograph.name }}</strong\n                  ><br />\n                  <span>{{ radiograph.date }}</span\n                  ><br />\n                  <button @click=\"enlargeRadiograph(radiograph.url)\">\n                    Visualizza Immagine\n                  </button>\n                </li>\n              </ul>\n            </div>\n            <div v-else>\n              <p>Nessuna radiografia caricata per questa data.</p>\n            </div>\n          </div>\n        </transition>\n      </div>\n\n      <!-- Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti -->\n      <div v-else>\n        <div v-if=\"isDoctor\">\n          <div class=\"calendar\">\n            <div class=\"calendar-header\">\n              <button @click=\"changeMonth(-1)\">&#8249;</button>\n              <span>{{ monthNames[month] }} {{ year }}</span>\n              <button @click=\"changeMonth(1)\">&#8250;</button>\n            </div>\n\n            <!-- Riga per i nomi dei giorni -->\n            <div class=\"calendar-day-names\">\n              <div v-for=\"dayName in dayNames\" :key=\"dayName\" class=\"day-name\">\n                {{ dayName }}\n              </div>\n            </div>\n\n            <div class=\"calendar-grid\">\n              <div\n                v-for=\"day in daysInMonth\"\n                :key=\"`${day.year}-${day.month}-${day.date}`\"\n                :class=\"[\n                  'calendar-day',\n                  {\n                    disabled: day.isDisabled,\n                    today:\n                      `${day.year}-${String(day.month).padStart(\n                        2,\n                        '0'\n                      )}-${String(day.date).padStart(2, '0')}` === minDate,\n                  },\n                ]\"\n                @click=\"!day.isDisabled && showDayDetails(day)\"\n              >\n                <!-- Data -->\n                <div class=\"date\">{{ day.date }}</div>\n\n                <!-- Icone Operazioni -->\n                <div class=\"icon-row operations\">\n                  <img\n                    v-for=\"n in day.operations.length\"\n                    :key=\"'operation-' + n + '-' + day.date\"\n                    :src=\"operationIcon\"\n                    alt=\"Operazione\"\n                    class=\"icon\"\n                  />\n                </div>\n\n                <div class=\"icon-row radiographs\">\n                  <img\n                    v-for=\"n in day.radiographs.length\"\n                    :key=\"'radiograph-' + n + '-' + day.date\"\n                    :src=\"radiographIcon\"\n                    alt=\"Radiografia\"\n                    class=\"icon\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Dettagli del giorno selezionato con animazione -->\n        <transition\n          name=\"fade\"\n          @before-enter=\"beforeEnter\"\n          @enter=\"enter\"\n          @leave=\"leave\"\n        >\n          <div v-if=\"selectedDay\" class=\"day-details\">\n            <h2>\n              Dettagli del Giorno: {{ selectedDay.date }}\n              {{ monthNames[month] }}\n              {{ year }}\n            </h2>\n            <!-- Operazioni -->\n            <div v-if=\"selectedDay.operations.length > 0\">\n              <h1 class=\"calendar\">Operazioni pianificate:</h1>\n              <div\n                v-for=\"operation in selectedDay.operations\"\n                :key=\"operation.id\"\n              >\n                <p>\n                  <strong>{{ operation.patientName }}:</strong>\n                  {{ operation.name }}\n                </p>\n                <span>{{ operation.operationDate }}</span\n                ><br />\n                <span>{{ operation.description }}</span\n                ><br />\n              </div>\n            </div>\n            <div v-else>\n              <p>Nessuna operazione pianificata per questa data.</p>\n            </div>\n            <!-- Radiografie -->\n            <div v-if=\"selectedDay.radiographs.length > 0\">\n              <h1 class=\"calendar\">Radiografie caricate:</h1>\n\n              <div\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <p>\n                  <strong>{{ radiograph.patientName }}:</strong>\n                  {{ radiograph.name }}\n                </p>\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </div>\n            </div>\n            <div v-else>\n              <p>Nessuna radiografia caricata in questa data.</p>\n            </div>\n          </div>\n        </transition>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      operations: [],\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      dayNames: [\"LUN\", \"MAR\", \"MER\", \"GIO\", \"VEN\", \"SAB\", \"DOM\"],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      selectedPatient: null, // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [], // Pazienti associati al dottore\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\"),\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n      const firstDayOfMonth = new Date(this.year, this.month, 1);\n      const startDayOfWeek = firstDayOfMonth.getDay(); // Giorno della settimana (0 = Domenica, 1 = Lunedì, ecc.)\n\n      // Calcola quanti giorni del mese precedente devono essere inclusi\n      const daysFromPrevMonth = (startDayOfWeek + 6) % 7; // Se il mese inizia di lunedì, vogliamo 0 giorni precedenti\n      const prevMonthLastDay = new Date(this.year, this.month, 0).getDate();\n\n      // Radiografie e operazioni per ogni giorno\n      const radiographsPerDay = {};\n      const operationsPerDay = {};\n\n      if (this.isDoctor) {\n        this.patients.forEach((patient) => {\n          if (patient.radiographs) {\n            patient.radiographs.forEach((radiograph) => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n\n          if (patient.operations) {\n            patient.operations.forEach((operation) => {\n              const operationDate = this.parseISODate(operation.operationDate);\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}`,\n                });\n              }\n            });\n          }\n        });\n      } else {\n        this.radiographs.forEach((radiograph) => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push(radiograph);\n        });\n\n        this.operations.forEach((operation) => {\n          const operationDate = this.parseISODate(operation.operationDate);\n          if (operationDate !== \"Invalid Date\") {\n            if (!operationsPerDay[operationDate]) {\n              operationsPerDay[operationDate] = [];\n            }\n            operationsPerDay[operationDate].push(operation);\n          }\n        });\n      }\n\n      // Aggiungi i giorni del mese precedente\n      for (let i = daysFromPrevMonth; i > 0; i--) {\n        const date = new Date(\n          this.year,\n          this.month - 1,\n          prevMonthLastDay - i + 1\n        );\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: date.getDate(),\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth(), // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true, // Per i giorni del mese precedente\n        });\n      }\n\n      // Aggiungi i giorni del mese corrente\n      for (let i = 1; i <= totalDays; i++) {\n        const date = new Date(this.year, this.month, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: false, // Per i giorni del mese corrente\n        });\n      }\n\n      // Calcola quanti giorni del mese successivo devono essere inclusi\n      const remainingDays = 42 - days.length; // Un calendario completo ha 6 settimane = 42 giorni\n      for (let i = 1; i <= remainingDays; i++) {\n        const date = new Date(this.year, this.month + 1, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true, // Per i giorni del mese successivo\n        });\n      }\n\n      return days;\n    },\n  },\n  methods: {\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (\n          !this.selectedPatientId ||\n          !this.operationDate ||\n          !this.operationTime ||\n          !this.description\n        ) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(\n          this.operationDate,\n          this.operationTime\n        );\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate, // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString(), // Timestamp di creazione\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\n          );\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\n          \"Errore durante la pianificazione dell'operazione:\",\n          error\n        );\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(\n          `DEBUG: Errore nella conversione della data ISO \"${isoString}\":`,\n          error\n        );\n        return \"Invalid Date\";\n      }\n    },\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n        console.log(\"Ruolo utente: Paziente\");\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n\n    // Modifica per caricare le radiografie dei pazienti\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie per ogni paziente\n          this.patients.forEach((patient) => {\n            this.loadRadiographs(patient.userId); // Carica le radiografie per ogni paziente\n            this.loadOperations(patient.userId);\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    async loadOperations(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/operations`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Log delle operazioni trovate\n          console.log(\n            `Operazioni trovate per il paziente con ID ${patientId}:`,\n            data\n          );\n\n          // Trova il paziente e aggiungi le operazioni al suo record\n          const patient = this.patients.find((p) => p.userId === patientId);\n          if (patient) {\n            patient.operations = data; // Aggiungi le operazioni al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    // Modifica per caricare le radiografie specifiche di un paziente\n    async loadRadiographs(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Trova il paziente e aggiungi le radiografie al suo record\n          const patient = this.patients.find((p) => p.userId === patientId);\n          if (patient) {\n            patient.radiographs = data; // Aggiungi le radiografie al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.calendar-calendar {\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  position: relative;\n}\n\n.calendar-container {\n  max-width: 100%;\n  padding: 40px;\n  border-radius: 10px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n}\n\nh1.calendar {\n  font-size: 18px; /* Stessa dimensione del testo di \"Elenco Pazienti\" */\n  font-family: inherit; /* Assicura che usi lo stesso font ereditato dal contesto */\n  font-weight: normal; /* Mantenere il peso del font uguale */\n  margin-bottom: 20px; /* Margine inferiore uguale per allineamento */\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 70px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n/* Giorni disabilitati (mese precedente e successivo) */\n.calendar-day.disabled {\n  opacity: 0.5;\n  color: #ccc; /* Testo grigio chiaro */\n  pointer-events: none; /* Non cliccabili */\n  background-color: #f9f9f9; /* Sfondo leggermente diverso, opzionale */\n}\n\n/* Puoi anche aggiungere un bordo per evidenziare meglio i giorni */\n.calendar-day.disabled:hover {\n  border: 1px dashed #ddd; /* Aggiunge un bordo hover sui giorni disabilitati */\n}\n\n.calendar-day.today {\n  border: 2px solid #fc2424db; /* Bordo rosso per il giorno corrente */\n  border-radius: 5px; /* Bordo arrotondato (opzionale) */\n}\n\n.date {\n  font-size: 1em;\n}\n\n.activity-icons {\n  display: flex;\n  flex-direction: column; /* Cambia la direzione per impilare le righe */\n  align-items: center;\n  gap: 10px; /* Spazio tra righe */\n  margin-top: 5px;\n}\n\n.icon-row {\n  display: flex;\n  justify-content: center;\n  gap: 2px; /* Spazio tra le icone nella stessa riga */\n}\n\n.operations {\n  min-height: 7px;\n  margin-bottom: 3px; /* Aggiunge margine tra operazioni e radiografie */\n}\n\n.icon {\n  width: 7px;\n  height: 7px;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 0.7em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 20px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 0.7em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 400px;\n  text-align: center;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 10px;\n  text-align: left;\n}\n\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n}\n\n.btn {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}