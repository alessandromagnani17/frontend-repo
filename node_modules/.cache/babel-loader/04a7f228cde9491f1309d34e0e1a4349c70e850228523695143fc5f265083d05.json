{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, createBlock as _createBlock, Transition as _Transition, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText } from \"vue\";\nimport _imports_0 from '@/assets/loading-icon.svg';\nconst _hoisted_1 = {\n  class: \"activity-calendar\"\n};\nconst _hoisted_2 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_4 = {\n  key: 1\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"modal\"\n};\nconst _hoisted_6 = {\n  class: \"modal-content\"\n};\nconst _hoisted_7 = [\"value\"];\nconst _hoisted_8 = [\"min\"];\nexport function render(_ctx, _cache) {\n  const _component_Calendar = _resolveComponent(\"Calendar\");\n  const _component_DayDetails = _resolveComponent(\"DayDetails\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[14] || (_cache[14] = _createElementVNode(\"h1\", {\n    class: \"calendar\"\n  }, \"Calendario Attività\", -1 /* HOISTED */)), _createCommentVNode(\" Loading overlay \"), _ctx.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[7] || (_cache[7] = [_createElementVNode(\"div\", {\n    class: \"loading-icon\"\n  }, [_createElementVNode(\"img\", {\n    src: _imports_0,\n    alt: \"Caricamento in corso...\"\n  })], -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Calendario per utente (paziente o dottore) \"), _createVNode(_component_Calendar, {\n    month: _ctx.month,\n    year: _ctx.year,\n    daysInMonth: _ctx.daysInMonth,\n    monthNames: _ctx.monthNames,\n    dayNames: _ctx.dayNames,\n    minDate: _ctx.minDate,\n    operationIcon: _ctx.operationIcon,\n    radiographIcon: _ctx.radiographIcon,\n    showDayDetails: _ctx.showDayDetails,\n    changeMonth: _ctx.changeMonth,\n    selectedDay: _ctx.selectedDay,\n    onUpdateSelectedDay: _ctx.updateSelectedDay\n  }, null, 8 /* PROPS */, [\"month\", \"year\", \"daysInMonth\", \"monthNames\", \"dayNames\", \"minDate\", \"operationIcon\", \"radiographIcon\", \"showDayDetails\", \"changeMonth\", \"selectedDay\", \"onUpdateSelectedDay\"]), _createCommentVNode(\" Dettagli del giorno selezionato \"), _createVNode(_Transition, {\n    name: \"fade\",\n    onBeforeEnter: _ctx.beforeEnter,\n    onEnter: _ctx.enter,\n    onLeave: _ctx.leave\n  }, {\n    default: _withCtx(() => [_ctx.selectedDay ? (_openBlock(), _createBlock(_component_DayDetails, {\n      key: 0,\n      selectedDay: _ctx.selectedDay,\n      monthNames: _ctx.monthNames,\n      month: _ctx.month,\n      year: _ctx.year,\n      formatDate: _ctx.formatDate,\n      formatTime: _ctx.formatTime,\n      enlargeRadiograph: _ctx.enlargeRadiograph\n    }, null, 8 /* PROPS */, [\"selectedDay\", \"monthNames\", \"month\", \"year\", \"formatDate\", \"formatTime\", \"enlargeRadiograph\"])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBeforeEnter\", \"onEnter\", \"onLeave\"]), _createCommentVNode(\" Modale per pianificare l'operazione (solo per dottore) \"), _ctx.isDoctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.openScheduleModal && _ctx.openScheduleModal(...args)),\n    class: \"btn btn-primary custom-btn\"\n  }, \" Pianifica Operazione \"), _createCommentVNode(\" Modale per inserire i dettagli dell'operazione \"), _ctx.showModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_cache[9] || (_cache[9] = _createElementVNode(\"h2\", null, \"Pianifica una nuova operazione\", -1 /* HOISTED */)), _cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    for: \"patientSelect\"\n  }, \"Seleziona un paziente:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectedPatientId = $event),\n    id: \"patientSelect\",\n    class: \"form-select\"\n  }, [_cache[8] || (_cache[8] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"Seleziona un paziente\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.patients, patient => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: patient.userId,\n      value: patient.userId\n    }, _toDisplayString(patient.name) + \" \" + _toDisplayString(patient.family_name), 9 /* TEXT, PROPS */, _hoisted_7);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedPatientId]]), _cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    for: \"operationDate\"\n  }, \"Data dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.operationDate = $event),\n    id: \"operationDate\",\n    min: _ctx.minDate\n  }, null, 8 /* PROPS */, _hoisted_8), [[_vModelText, _ctx.operationDate]]), _cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    for: \"operationTime\"\n  }, \"Ora dell'operazione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"time\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.operationTime = $event),\n    id: \"operationTime\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.operationTime]]), _cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    for: \"description\"\n  }, \"Descrizione:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.description = $event),\n    id: \"description\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.description]]), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => _ctx.scheduleOperation && _ctx.scheduleOperation(...args)),\n    class: \"btn btn-success\"\n  }, \" Salva \"), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => _ctx.closeScheduleModal && _ctx.closeScheduleModal(...args)),\n    class: \"btn btn-secondary\"\n  }, \" Annulla \")])])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["_imports_0","class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_ctx","loading","_hoisted_3","_cache","src","alt","_createVNode","_component_Calendar","month","year","daysInMonth","monthNames","dayNames","minDate","operationIcon","radiographIcon","showDayDetails","changeMonth","selectedDay","onUpdateSelectedDay","updateSelectedDay","_Transition","name","onBeforeEnter","beforeEnter","onEnter","enter","onLeave","leave","default","_withCtx","_createBlock","_component_DayDetails","formatDate","formatTime","enlargeRadiograph","_","isDoctor","_hoisted_4","onClick","args","openScheduleModal","showModal","_hoisted_5","_hoisted_6","for","$event","selectedPatientId","id","value","disabled","_Fragment","_renderList","patients","patient","userId","_toDisplayString","family_name","_hoisted_7","type","operationDate","min","_hoisted_8","operationTime","description","scheduleOperation","closeScheduleModal"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"activity-calendar\">\n    <div class=\"calendar-container\">\n      <h1 class=\"calendar\">Calendario Attività</h1>\n\n      <!-- Loading overlay -->\n      <div v-if=\"loading\" class=\"loading-overlay\">\n        <div class=\"loading-icon\">\n          <img src=\"@/assets/loading-icon.svg\" alt=\"Caricamento in corso...\" />\n        </div>\n      </div>\n\n      <!-- Calendario per utente (paziente o dottore) -->\n      <Calendar\n        :month=\"month\"\n        :year=\"year\"\n        :daysInMonth=\"daysInMonth\"\n        :monthNames=\"monthNames\"\n        :dayNames=\"dayNames\"\n        :minDate=\"minDate\"\n        :operationIcon=\"operationIcon\"\n        :radiographIcon=\"radiographIcon\"\n        :showDayDetails=\"showDayDetails\"\n        :changeMonth=\"changeMonth\"\n        :selectedDay=\"selectedDay\"\n        @update-selected-day=\"updateSelectedDay\"\n      />\n\n      <!-- Dettagli del giorno selezionato -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <DayDetails\n          v-if=\"selectedDay\"\n          :selectedDay=\"selectedDay\"\n          :monthNames=\"monthNames\"\n          :month=\"month\"\n          :year=\"year\"\n          :formatDate=\"formatDate\"\n          :formatTime=\"formatTime\"\n          :enlargeRadiograph=\"enlargeRadiograph\"\n        />\n      </transition>\n\n      <!-- Modale per pianificare l'operazione (solo per dottore) -->\n      <div v-if=\"isDoctor\">\n        <button @click=\"openScheduleModal\" class=\"btn btn-primary custom-btn\">\n          Pianifica Operazione\n        </button>\n\n        <!-- Modale per inserire i dettagli dell'operazione -->\n        <div v-if=\"showModal\" class=\"modal\">\n          <div class=\"modal-content\">\n            <h2>Pianifica una nuova operazione</h2>\n            <label for=\"patientSelect\">Seleziona un paziente:</label>\n            <select\n              v-model=\"selectedPatientId\"\n              id=\"patientSelect\"\n              class=\"form-select\"\n            >\n              <option value=\"\" disabled>Seleziona un paziente</option>\n              <option\n                v-for=\"patient in patients\"\n                :key=\"patient.userId\"\n                :value=\"patient.userId\"\n              >\n                {{ patient.name }} {{ patient.family_name }}\n              </option>\n            </select>\n\n            <label for=\"operationDate\">Data dell'operazione:</label>\n            <input\n              type=\"date\"\n              v-model=\"operationDate\"\n              id=\"operationDate\"\n              :min=\"minDate\"\n            />\n\n            <label for=\"operationTime\">Ora dell'operazione:</label>\n            <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\n\n            <label for=\"description\">Descrizione:</label>\n            <textarea v-model=\"description\" id=\"description\"></textarea>\n\n            <div>\n              <button @click=\"scheduleOperation\" class=\"btn btn-success\">\n                Salva\n              </button>\n              <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\n                Annulla\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Calendar from \"./ScheduleCalendar.vue\";\nimport DayDetails from \"./DayDetails.vue\";\n\nexport default {\n  components: {\n    Calendar,\n    DayDetails,\n  },\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      operations: [],\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      dayNames: [\"LUN\", \"MAR\", \"MER\", \"GIO\", \"VEN\", \"SAB\", \"DOM\"],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      selectedPatient: null, // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [], // Pazienti associati al dottore\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\"),\n      loading: true, // Caricamento globale (attivato fino a che entrambe le risorse sono pronte)\n      operationsLoaded: false, // Flag per indicare se le operazioni sono caricate\n      radiographsLoaded: false, // Flag per indicare se le radiografie sono caricate\n      operationsRendered = false,\n      radiographsRendered = false,\n\n    };\n  },\n  mounted() {\n    this.checkUserRole(); // Verifica il ruolo dell'utente\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\n      if (userData && userData.userId) {\n        const userId = userData.userId; // Recupera lo userId\n        console.log(\"User ID recuperato:\", userId);\n        this.loadPatientData(userId); // Carica operazioni e radiografie per il paziente\n      } else {\n        console.error(\"User ID non trovato in userData.\");\n      }\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n      const firstDayOfMonth = new Date(this.year, this.month, 1);\n      const startDayOfWeek = firstDayOfMonth.getDay(); // Giorno della settimana (0 = Domenica, 1 = Lunedì, ecc.)\n\n      // Calcola quanti giorni del mese precedente devono essere inclusi\n      const daysFromPrevMonth = (startDayOfWeek + 6) % 7; // Se il mese inizia di lunedì, vogliamo 0 giorni precedenti\n      const prevMonthLastDay = new Date(this.year, this.month, 0).getDate();\n\n      // Radiografie e operazioni per ogni giorno\n      const radiographsPerDay = {};\n      const operationsPerDay = {};\n\n      // Se l'utente è un medico\n      if (this.isDoctor) {\n        this.patients.forEach((patient) => {\n          if (patient.radiographs) {\n            patient.radiographs.forEach((radiograph) => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n\n          // Aggiungi le operazioni per ogni paziente\n          if (patient.operations) {\n            patient.operations.forEach((operation) => {\n              const operationDate = this.parseISODate(operation.operationDate);\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}`, // Include il nome del paziente\n                });\n              }\n            });\n          }\n        });\n      } else {\n        // Se l'utente è un paziente, carica solo le proprie operazioni e radiografie\n        const userData = JSON.parse(localStorage.getItem(\"userData\")); // Decodifica il JSON\n\n        if (this.radiographs) {\n          this.radiographs.forEach((radiograph) => {\n            const radiographDate = new Date(radiograph.date).toDateString(); // Data della radiografia\n            if (!radiographsPerDay[radiographDate]) {\n              radiographsPerDay[radiographDate] = []; // Inizializza se non esiste\n            }\n            radiographsPerDay[radiographDate].push({\n              ...radiograph,\n              patientName: `${userData.name} ${userData.family_name}`,\n            }); // Aggiungi radiografia alla data\n          });\n        }\n\n        if (this.operations) {\n          this.operations.forEach((operation) => {\n            const operationDate = this.parseISODate(operation.operationDate);\n            if (operationDate !== \"Invalid Date\") {\n              if (!operationsPerDay[operationDate]) {\n                operationsPerDay[operationDate] = [];\n              }\n              operationsPerDay[operationDate].push({\n                ...operation,\n                patientName:\n                  operation.patientName ||\n                  `${this.userName} ${this.userFamilyName}`, // Include il nome del paziente\n              });\n            }\n          });\n        }\n      }\n\n      // Aggiungi i giorni del mese precedente\n      for (let i = daysFromPrevMonth; i > 0; i--) {\n        const date = new Date(\n          this.year,\n          this.month - 1,\n          prevMonthLastDay - i + 1\n        );\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: date.getDate(),\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth(), // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true, // Per i giorni del mese precedente\n        });\n      }\n\n      // Aggiungi i giorni del mese corrente\n      for (let i = 1; i <= totalDays; i++) {\n        const date = new Date(this.year, this.month, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: false, // Per i giorni del mese corrente\n        });\n      }\n\n      // Calcola quanti giorni del mese successivo devono essere inclusi\n      const remainingDays = 42 - days.length; // Un calendario completo ha 6 settimane = 42 giorni\n      for (let i = 1; i <= remainingDays; i++) {\n        const date = new Date(this.year, this.month + 1, i);\n        const dayString = date.toDateString();\n        const radiographsOnDay = radiographsPerDay[dayString] || [];\n        const operationsOnDay = operationsPerDay[dayString] || [];\n        days.push({\n          date: i,\n          year: date.getFullYear(), // Aggiungi l'anno\n          month: date.getMonth() + 1, // Aggiungi il mese (0 = Gennaio, 11 = Dicembre)\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n          isDisabled: true, // Per i giorni del mese successivo\n        });\n      }\n\n      return days;\n    },\n  },\n\n  methods: {\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        console.log(\"Ruolo utente: Paziente\");\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    updateSelectedDay(day) {\n      this.selectedDay = day;\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (\n          !this.selectedPatientId ||\n          !this.operationDate ||\n          !this.operationTime ||\n          !this.description\n        ) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(\n          this.operationDate,\n          this.operationTime\n        );\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate, // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString(), // Timestamp di creazione\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\n          );\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Dopo che l'operazione è stata pianificata, invia una notifica al paziente\n        await this.sendNotificationToPatient();\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\n          \"Errore durante la pianificazione dell'operazione:\",\n          error\n        );\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n    // Aggiungi questa funzione per inviare la notifica\n    async sendNotificationToPatient() {\n      try {\n        if (!this.operationDate || !this.operationTime || !this.description) {\n          alert(\n            \"Assicurati di aver inserito tutti i dettagli dell'operazione.\"\n          );\n          return;\n        }\n\n        // Estrae solo la parte dell'ora e dei minuti per `time`\n        const notificationTime = this.operationTime; // Già in formato HH:mm\n\n        // Crea il messaggio della notifica usando le informazioni dell'operazione\n        const notificationMessage = `Una nuova operazione è stata pianificata per te!`;\n\n        // Aggiunge la data e ora di invio della notifica\n        const sentAt = new Date().toISOString(); // Data e ora corrente in formato ISO 8601\n\n        // Chiamata al backend per inviare la notifica al paziente selezionato\n        const response = await fetch(\"/api/notifications\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            patientId: this.selectedPatientId,\n            message: notificationMessage,\n            date: this.operationDate,\n            time: notificationTime,\n            sentAt, // Aggiunge l'attributo sentAt alla richiesta\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || \"Errore nell'invio della notifica.\");\n        }\n\n        alert(\"Notifica inviata al paziente.\");\n      } catch (error) {\n        console.error(\"Errore nell'invio della notifica:\", error);\n        alert(\"Errore nell'invio della notifica.\");\n      }\n    },\n\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(\n          `DEBUG: Errore nella conversione della data ISO \"${isoString}\":`,\n          error\n        );\n        return \"Invalid Date\";\n      }\n    },\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n    },\n\n    // Modifica per caricare i pazienti (solo per i medici)\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie e le operazioni per ogni paziente\n          this.patients.forEach((patient) => {\n            this.loadPatientData(patient.userId); // Carica i dati per ogni paziente\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    async loadPatientData(patientId) {\n      try {\n        this.loading = true;\n\n        const [operationsResponse, radiographsResponse] = await Promise.all([\n          fetch(`/api/patients/${patientId}/operations`),\n          fetch(`/api/patients/${patientId}/radiographs`),\n        ]);\n\n        if (operationsResponse.ok) {\n          const operationsData = await operationsResponse.json();\n          this.handleLoadedData(\"operations\", patientId, operationsData);\n        }\n\n        if (radiographsResponse.ok) {\n          const radiographsData = await radiographsResponse.json();\n          this.handleLoadedData(\"radiographs\", patientId, radiographsData);\n        }\n\n        this.loading = false;\n      } catch (error) {\n        console.error(\"Errore nel caricamento dei dati:\", error);\n        this.loading = false;\n      }\n    },\n\n    // Funzione per gestire i dati caricati (operazioni o radiografie)\n    handleLoadedData(type, patientId, data) {\n      // Se l'utente è un medico, aggiorna la lista dei pazienti\n      if (this.isDoctor) {\n        const patient = this.patients.find((p) => p.userId === patientId);\n        if (patient) {\n          patient[type] = data; // Aggiungi le operazioni o radiografie al paziente\n          console.log(\n            `${\n              type.charAt(0).toUpperCase() + type.slice(1)\n            } aggiunti al paziente:`,\n            patient[type]\n          );\n        }\n      } else {\n        // Se l'utente è un paziente, aggiorna direttamente il proprio profilo\n        this[type] = data; // Aggiungi le operazioni o radiografie al profilo del paziente\n        console.log(\n          `${\n            type.charAt(0).toUpperCase() + type.slice(1)\n          } aggiunti al profilo del paziente:`,\n          this[type]\n        );\n      }\n    },\n\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    formatDate(dateTime) {\n      const date = new Date(dateTime);\n      return date.toLocaleDateString(\"it-IT\"); // Mostra solo la data in formato italiano\n    },\n    formatTime(dateTime) {\n      const date = new Date(dateTime);\n      return date.toLocaleTimeString(\"it-IT\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      }); // Mostra solo l'ora in formato 24 ore\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // Trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.calendar-container {\n  max-width: 100%;\n  padding: 40px;\n  border-radius: 10px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n}\n\nh1.calendar {\n  font-size: 18px;\n  font-family: inherit;\n  font-weight: normal;\n  margin-bottom: 20px;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 999;\n}\n\n.modal-content {\n  background: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  width: 500px; /* Aumentiamo la larghezza del modale */\n  text-align: left;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n}\n\n.modal-content h2 {\n  font-size: 1.2em; /* Aumentiamo leggermente il font per il titolo */\n  margin-bottom: 15px;\n  color: #333;\n  font-weight: bold;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 5px;\n  color: #555;\n  font-weight: 600;\n  font-size: 0.85em; /* Ridotto per le etichette */\n}\n\n.modal-content select,\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 4px 8px; /* Ridotto ulteriormente il padding dei campi */\n  margin-bottom: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px; /* Border-radius più sottile */\n  font-size: 0.75em; /* Ridotto ulteriormente la dimensione del font */\n  box-sizing: border-box;\n  transition: border 0.3s ease;\n}\n\n.modal-content select:focus,\n.modal-content input:focus,\n.modal-content textarea:focus {\n  border-color: #007bff;\n  outline: none;\n}\n\n.modal-content textarea {\n  resize: vertical;\n  height: 60px; /* Ancora più piccola la textarea */\n}\n\n.modal-content button {\n  padding: 6px 12px; /* Ridotto il padding dei pulsanti */\n  border-radius: 4px;\n  border: none;\n  font-size: 12px; /* Ridotto ulteriormente la dimensione dei pulsanti */\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  margin-right: 6px;\n}\n\n.modal-content .btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.modal-content .btn-success:hover {\n  background-color: #218838;\n  transform: translateY(-2px);\n}\n\n.modal-content .btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n\n.modal-content .btn-secondary:hover {\n  background-color: #5a6268;\n  transform: translateY(-2px);\n}\n\n.modal-content .btn {\n  min-width: 90px; /* Ridotto il minimo larghezza dei pulsanti */\n}\n\n.modal-content .btn:focus {\n  outline: none;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  color: #007bff;\n  font-size: 0.7em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n.custom-btn {\n  display: block; /* Imposta il pulsante come blocco per permettere il centramento */\n  margin: 20px auto; /* Centra il pulsante e aggiungi un margine superiore di 20px */\n  background-color: #007bff; /* Colore di sfondo */\n  color: white; /* Colore del testo */\n  border-radius: 5px; /* Raggio dei bordi per renderlo arrotondato */\n  padding: 6px 12px; /* Ridotto il padding per rendere il pulsante più piccolo */\n  text-align: center; /* Allinea il testo al centro */\n  font-size: 14px; /* Dimensione del font più piccola */\n  max-width: 200px; /* Limita la larghezza massima del pulsante */\n  width: 100%; /* Permette di ridimensionare il pulsante in base alla larghezza del contenitore */\n}\n\n.custom-btn:hover {\n  background-color: #0056b3; /* Colore di hover per effetto */\n  color: white;\n  cursor: pointer; /* Cambia il cursore su hover */\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(255, 255, 255, 0.6);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 9999; /* Assicurati che l'overlay sia sopra tutto */\n}\n\n.loading-icon {\n  width: 50px;\n  height: 50px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}