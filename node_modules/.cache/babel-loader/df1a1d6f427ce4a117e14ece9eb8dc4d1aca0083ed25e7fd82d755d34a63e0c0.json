{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nimport _imports_0 from '@/assets/zoom.svg';\nimport _imports_1 from '@/assets/download.svg';\nimport _imports_2 from '@/assets/cross.svg';\nconst _hoisted_1 = {\n  class: \"radiograph-list\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0,\n  class: \"radiograph-preview\"\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = {\n  class: \"radiograph-controls\"\n};\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = [\"href\"];\nconst _hoisted_9 = {\n  key: 1\n};\nconst _hoisted_10 = {\n  key: 2,\n  class: \"modal\"\n};\nconst _hoisted_11 = {\n  class: \"modal-content\"\n};\nconst _hoisted_12 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, \"Radiografie di \" + _toDisplayString($props.patientName), 1 /* TEXT */), $data.radiographs.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.radiographs, radiograph => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: radiograph.name,\n      class: \"radiograph-item\"\n    }, [_createElementVNode(\"div\", null, [_createTextVNode(_toDisplayString(radiograph.date) + \" - \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.toggleRadiograph(radiograph),\n      class: \"view-link\"\n    }, \" Visualizza \", 8 /* PROPS */, _hoisted_3)]), _createCommentVNode(\" Se l'immagine è selezionata, mostriamo l'anteprima \"), _createVNode(_Transition, {\n      name: \"radiograph-preview\"\n    }, {\n      default: _withCtx(() => [$data.selectedRadiograph === radiograph && $data.isPreviewVisible ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"img\", {\n        src: radiograph.url,\n        alt: \"Radiografia\",\n        class: \"radiograph-image\"\n      }, null, 8 /* PROPS */, _hoisted_5), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"button\", {\n        onClick: $event => $options.enlargeRadiograph(radiograph.url),\n        class: \"control-button\"\n      }, [...(_cache[2] || (_cache[2] = [_createElementVNode(\"img\", {\n        src: _imports_0,\n        alt: \"Zoom\",\n        class: \"icon\"\n      }, null, -1 /* HOISTED */)]))], 8 /* PROPS */, _hoisted_7), _createElementVNode(\"a\", {\n        href: radiograph.url,\n        download: \"\",\n        class: \"control-button\"\n      }, [...(_cache[3] || (_cache[3] = [_createElementVNode(\"img\", {\n        src: _imports_1,\n        alt: \"Download\",\n        class: \"icon\"\n      }, null, -1 /* HOISTED */)]))], 8 /* PROPS */, _hoisted_8)])])) : _createCommentVNode(\"v-if\", true)]),\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_9, \"Nessuna radiografia trovata per questo paziente.\")), _createCommentVNode(\" Modale per ingrandire l'immagine \"), $data.isModalOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"span\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.closeModal && $options.closeModal(...args)),\n    class: \"close-button\"\n  }, _cache[4] || (_cache[4] = [_createElementVNode(\"img\", {\n    src: _imports_2,\n    alt: \"Chiudi\"\n  }, null, -1 /* HOISTED */)])), _createElementVNode(\"img\", {\n    src: $data.modalImageUrl,\n    alt: \"Immagine ingrandita\",\n    class: \"modal-image\"\n  }, null, 8 /* PROPS */, _hoisted_12), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.closeModal && $options.closeModal(...args)),\n    class: \"close-button\",\n    style: {\n      \"display\": \"none\"\n    }\n  }, \" Rimpicciolisci \")])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_imports_0","_imports_1","_imports_2","class","key","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$props","patientName","$data","radiographs","length","_hoisted_2","_Fragment","_renderList","radiograph","name","_createTextVNode","date","onClick","$event","$options","toggleRadiograph","_hoisted_3","_createCommentVNode","_createVNode","_Transition","default","_withCtx","selectedRadiograph","isPreviewVisible","_hoisted_4","src","url","alt","_hoisted_5","_hoisted_6","enlargeRadiograph","_hoisted_7","href","download","_hoisted_8","_","_hoisted_9","isModalOpen","_hoisted_10","_hoisted_11","_cache","args","closeModal","modalImageUrl","_hoisted_12","style"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/PatientRadiographs.vue"],"sourcesContent":["<template>\n  <div class=\"radiograph-list\">\n    <h2>Radiografie di {{ patientName }}</h2>\n    <ul v-if=\"radiographs.length\">\n      <li\n        v-for=\"radiograph in radiographs\"\n        :key=\"radiograph.name\"\n        class=\"radiograph-item\"\n      >\n        <div>\n          {{ radiograph.date }} -\n          <button @click=\"toggleRadiograph(radiograph)\" class=\"view-link\">\n            Visualizza\n          </button>\n        </div>\n\n        <!-- Se l'immagine è selezionata, mostriamo l'anteprima -->\n        <transition name=\"radiograph-preview\">\n          <div\n            v-if=\"selectedRadiograph === radiograph && isPreviewVisible\"\n            class=\"radiograph-preview\"\n          >\n            <img\n              :src=\"radiograph.url\"\n              alt=\"Radiografia\"\n              class=\"radiograph-image\"\n            />\n            <div class=\"radiograph-controls\">\n              <button\n                @click=\"enlargeRadiograph(radiograph.url)\"\n                class=\"control-button\"\n              >\n                <img src=\"@/assets/zoom.svg\" alt=\"Zoom\" class=\"icon\" />\n              </button>\n              <a :href=\"radiograph.url\" download class=\"control-button\">\n                <img src=\"@/assets/download.svg\" alt=\"Download\" class=\"icon\" />\n              </a>\n            </div>\n          </div>\n        </transition>\n      </li>\n    </ul>\n    <p v-else>Nessuna radiografia trovata per questo paziente.</p>\n\n    <!-- Modale per ingrandire l'immagine -->\n    <div v-if=\"isModalOpen\" class=\"modal\">\n      <div class=\"modal-content\">\n        <span @click=\"closeModal\" class=\"close-button\">\n          <img src=\"@/assets/cross.svg\" alt=\"Chiudi\" />\n        </span>\n        <img\n          :src=\"modalImageUrl\"\n          alt=\"Immagine ingrandita\"\n          class=\"modal-image\"\n        />\n        <button @click=\"closeModal\" class=\"close-button\" style=\"display: none\">\n          Rimpicciolisci\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"PatientRadiographs\",\n  props: {\n    patientId: {\n      type: String,\n      required: true,\n    },\n    patientName: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      radiographs: [],\n      selectedRadiograph: null, // Per tracciare quale radiografia è stata selezionata\n      isModalOpen: false, // Stato per il modale\n      modalImageUrl: \"\", // URL dell'immagine ingrandita\n      isPreviewVisible: false,\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch(\n        `/api/patients/${this.patientId}/radiographs`,\n        {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (response.ok) {\n        this.radiographs = await response.json();\n      } else {\n        console.error(\"Errore nel recupero delle radiografie.\");\n      }\n    } catch (error) {\n      console.error(\"Errore:\", error);\n    }\n  },\n  methods: {\n    enlargeRadiograph(url) {\n      // Apri il modale e mostra l'immagine ingrandita\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    toggleRadiograph(radiograph) {\n      // Se la radiografia selezionata è già aperta, chiudila\n      if (this.selectedRadiograph === radiograph) {\n        this.isPreviewVisible = false; // Nascondi l'anteprima\n        setTimeout(() => {\n          this.selectedRadiograph = null; // Chiudi la radiografia dopo il delay\n        }, 500); // Delay per l'animazione\n      } else {\n        this.selectedRadiograph = radiograph;\n        this.isPreviewVisible = true; // Mostra l'anteprima\n        setTimeout(() => {\n          this.isModalOpen = true; // Apri il modale dopo il delay\n          this.modalImageUrl = radiograph.url; // Imposta l'URL dell'immagine nel modale\n        }, 500); // Delay per l'animazione\n      }\n    },\n    closeModal() {\n      this.isModalOpen = false; // Chiudi il modale immediatamente\n      setTimeout(() => {\n        this.isPreviewVisible = false; // Nascondi l'anteprima dopo il delay\n      }, 500); // Delay per l'animazione\n    },\n  },\n};\n</script>\n\n<style scoped>\n.radiograph-list {\n  max-width: 800px;\n  margin: 20px auto;\n}\n\nh2 {\n  font-size: 18px;\n  color: #333;\n  margin-bottom: 15px;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli.radiograph-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #ccc;\n  font-size: 12px;\n  color: #444;\n  display: flex;\n  flex-direction: column;\n}\n\n.view-link {\n  color: #007bff;\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-weight: bold;\n  transition: color 1s ease; /* Animazione più lenta */\n  padding: 0;\n  margin: 0;\n}\n\n.view-link:hover {\n  color: #0056b3;\n}\n\n.radiograph-preview {\n  transition: opacity 0.5s ease, transform 0.5s ease; /* Animazioni per la visualizzazione */\n  opacity: 0; /* Nascondi di default */\n  transform: translateY(20px); /* Sposta verso il basso */\n}\n\n.radiograph-preview-enter-active,\n.radiograph-preview-leave-active {\n  transition: opacity 0.5s ease; /* Effetto di transizione dell'opacità */\n}\n\n.radiograph-preview-enter, .radiograph-preview-leave-to /* .radiograph-preview-leave-active in <2.1.8 */ {\n  opacity: 0; /* Inizio e fine trasparente */\n}\n\n.radiograph-image {\n  width: 100%;\n  max-width: 600px; /* Dimensione aumentata */\n  display: block;\n  margin: 0 auto; /* Centrare orizzontalmente */\n}\n\n.radiograph-controls {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.control-button {\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  margin-left: 10px;\n}\n\n.icon {\n  width: 24px; /* Dimensione dell'icona */\n  height: 24px; /* Dimensione dell'icona */\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  position: relative;\n  max-width: 80%;\n  max-height: 80%;\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  text-align: center;\n}\n\n.modal-image {\n  max-width: 100%;\n  max-height: 70vh;\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  cursor: pointer;\n  font-size: 24px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}