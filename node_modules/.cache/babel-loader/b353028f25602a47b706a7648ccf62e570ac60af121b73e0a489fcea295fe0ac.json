{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000\"; // URL del tuo backend\n\n// Funzione per la registrazione\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per il login\nexport const loginUser = async loginData => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, loginData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per caricare una radiografia\nexport const uploadRadiograph = async (patientId, file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"patientId\", patientId); // Aggiunto l'ID paziente ai formData\n\n  try {\n    const response = await axios.post(`${API_URL}/patients/${patientId}/radiographs`,\n    // Assicurati che questa URL sia corretta\n    formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    // Aggiungi maggiori dettagli all'errore\n    console.error(\"Errore durante il caricamento:\", error);\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per ottenere i pazienti associati a un dottore specifico\nexport async function getPatientsFromDoctor(doctorId) {\n  try {\n    const response = await fetch(`/api/${doctorId}/patients`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Errore nel recupero dei pazienti.\");\n    }\n    const patients = await response.json();\n    return patients;\n  } catch (error) {\n    console.error(\"Errore:\", error);\n    return [];\n  }\n}\n\n// Funzione per ottenere le radiografie di un paziente\nexport const getRadiographs = async patientId => {\n  try {\n    const response = await axios.get(`http://localhost:5000/patients/${patientId}/radiographs`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n    throw error; // Rilancia l'errore per gestirlo più in alto nella chiamata\n  }\n};","map":{"version":3,"names":["axios","API_URL","registerUser","userData","response","post","data","error","Error","message","loginUser","loginData","uploadRadiograph","patientId","file","formData","FormData","append","headers","console","getPatientsFromDoctor","doctorId","fetch","method","ok","patients","json","getRadiographs","get"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/services/api-service.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:5000\"; // URL del tuo backend\n\n// Funzione per la registrazione\nexport const registerUser = async (userData) => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per il login\nexport const loginUser = async (loginData) => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, loginData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per caricare una radiografia\nexport const uploadRadiograph = async (patientId, file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"patientId\", patientId); // Aggiunto l'ID paziente ai formData\n\n  try {\n    const response = await axios.post(\n      `${API_URL}/patients/${patientId}/radiographs`, // Assicurati che questa URL sia corretta\n      formData,\n      {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    // Aggiungi maggiori dettagli all'errore\n    console.error(\"Errore durante il caricamento:\", error);\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per ottenere i pazienti associati a un dottore specifico\nexport async function getPatientsFromDoctor(doctorId) {\n  try {\n    const response = await fetch(`/api/${doctorId}/patients`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Errore nel recupero dei pazienti.\");\n    }\n\n    const patients = await response.json();\n    return patients;\n  } catch (error) {\n    console.error(\"Errore:\", error);\n    return [];\n  }\n}\n\n// Funzione per ottenere le radiografie di un paziente\nexport const getRadiographs = async (patientId) => {\n  try {\n    const response = await axios.get(\n      `http://localhost:5000/patients/${patientId}/radiographs`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n    throw error; // Rilancia l'errore per gestirlo più in alto nella chiamata\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}