{"ast":null,"code":"import { ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport axios from \"axios\";\nexport default {\n  name: \"UserLogin\",\n  setup() {\n    // Stato del form\n    const form = ref({\n      email: \"\",\n      password: \"\",\n      rememberMe: false\n    });\n\n    // Stato degli errori\n    const errors = ref({\n      email: \"\",\n      password: \"\",\n      general: \"\"\n    });\n    const router = useRouter();\n    const currentStep = ref(1);\n    const loading = ref(false);\n    const showPassword = ref(false);\n    const showMfaStep = ref(false); // Toggle MFA step visibility\n    const qrCodeUrl = ref(\"\"); // Store QR code URL\n    const session = ref(\"\"); // Store MFA session token\n    const mfaCode = ref(\"\"); // Store user input MFA code\n\n    // Funzione per passare allo step successivo\n    const goToNextStep = () => {\n      if (isStepValid(currentStep.value)) {\n        currentStep.value++;\n      }\n    };\n\n    // Funzione per tornare allo step precedente\n    const goToPreviousStep = () => {\n      currentStep.value--;\n    };\n\n    // Funzione per validare il form\n    const validateForm = () => {\n      errors.value = {\n        email: form.value.email ? \"\" : \"Email è richiesta\",\n        password: form.value.password ? \"\" : \"Password è richiesta\"\n      };\n      return Object.values(errors.value).every(error => !error);\n    };\n\n    // Funzione per validare lo step\n    const isStepValid = step => {\n      if (step === 1) {\n        return form.value.email;\n      } else if (step === 2) {\n        return form.value.password;\n      }\n      return false;\n    };\n\n    // Funzione per mostrare/nascondere la password\n    const toggleShowPassword = () => {\n      showPassword.value = !showPassword.value;\n    };\n    const onSubmit = async () => {\n      if (!validateForm()) return;\n      loading.value = true;\n      try {\n        // Effettua la richiesta POST per il login usando axios\n        const response = await axios.post(\"http://127.0.0.1:5000/login\", {\n          email: form.value.email,\n          password: form.value.password\n        });\n        if (response.data.message === \"MFA setup required\") {\n          // Se è richiesta la configurazione MFA, mostra lo step MFA\n          showMfaStep.value = true;\n          qrCodeUrl.value = response.data.qr_code;\n          session.value = response.data.session;\n        } else if (response.data.message === \"Login successful\") {\n          // Se il login è andato a buon fine e non serve MFA, ridireziona alla WelcomePage\n          router.push({\n            name: \"Welcome\",\n            query: {\n              username: form.value.email\n            } // Puoi passare l'email come parametro\n          });\n        }\n      } catch (error) {\n        errors.value.general = error.response?.data?.error || \"Errore sconosciuto durante il login\";\n      } finally {\n        loading.value = false;\n      }\n    };\n    const onMfaSubmit = async () => {\n      loading.value = true;\n      try {\n        // Effettua la richiesta POST per verificare MFA\n        const response = await axios.post(\"http://127.0.0.1:5000/verify-mfa\", {\n          session: session.value,\n          code: mfaCode.value\n        });\n        if (response.data.message === \"MFA verified\") {\n          alert(\"MFA verification successful!\");\n          // Redirect or handle authenticated state here\n        }\n      } catch (error) {\n        errors.value.general = error.response?.data?.error || \"MFA verification failed.\";\n      } finally {\n        loading.value = false;\n      }\n    };\n    return {\n      form,\n      currentStep,\n      loading,\n      showPassword,\n      toggleShowPassword,\n      onSubmit,\n      goToNextStep,\n      goToPreviousStep,\n      isStepValid,\n      errors,\n      showMfaStep,\n      qrCodeUrl,\n      session,\n      mfaCode,\n      onMfaSubmit\n    };\n  }\n};","map":{"version":3,"names":["ref","useRouter","axios","name","setup","form","email","password","rememberMe","errors","general","router","currentStep","loading","showPassword","showMfaStep","qrCodeUrl","session","mfaCode","goToNextStep","isStepValid","value","goToPreviousStep","validateForm","Object","values","every","error","step","toggleShowPassword","onSubmit","response","post","data","message","qr_code","push","query","username","onMfaSubmit","code","alert"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/UserLogin.vue"],"sourcesContent":["<template>\n  <div class=\"login\">\n    <div class=\"container mt-5\">\n      <div class=\"header\">\n        <button\n          v-if=\"currentStep > 1\"\n          class=\"back-button\"\n          @click=\"goToPreviousStep\"\n        >\n          <img src=\"@/assets/back-icon.svg\" alt=\"Indietro\" class=\"back-icon\" />\n        </button>\n      </div>\n\n      <span class=\"step-title\">Passaggio {{ currentStep }} di 2</span>\n      <h2 class=\"mb-4\">Accedi al tuo Account</h2>\n\n      <!-- Step 1: Login Form -->\n      <form @submit.prevent=\"onSubmit\" v-if=\"!showMfaStep\">\n        <!-- Step 1: Inserisci Email -->\n        <div v-if=\"currentStep === 1\">\n          <div class=\"mb-3\">\n            <label for=\"email\" class=\"form-label\">Email</label>\n            <input\n              id=\"email\"\n              v-model=\"form.email\"\n              type=\"email\"\n              class=\"form-control\"\n              :class=\"{ 'is-invalid': errors.email }\"\n              required\n            />\n            <div class=\"invalid-feedback\">{{ errors.email }}</div>\n          </div>\n        </div>\n\n        <!-- Step 2: Inserisci Password -->\n        <div v-if=\"currentStep === 2\">\n          <div class=\"mb-3\">\n            <label for=\"password\" class=\"form-label\">Password</label>\n            <div class=\"input-group\">\n              <input\n                id=\"password\"\n                v-model=\"form.password\"\n                :type=\"showPassword ? 'text' : 'password'\"\n                class=\"form-control\"\n                :class=\"{ 'is-invalid': errors.password }\"\n                required\n              />\n              <button\n                type=\"button\"\n                class=\"btn eye-button\"\n                @click=\"toggleShowPassword\"\n              >\n                <img\n                  :src=\"\n                    showPassword\n                      ? require('@/assets/eye-off.svg')\n                      : require('@/assets/eye-on.svg')\n                  \"\n                  alt=\"Toggle Password Visibility\"\n                  class=\"eye-icon\"\n                />\n              </button>\n            </div>\n            <div class=\"invalid-feedback\">{{ errors.password }}</div>\n          </div>\n\n          <div class=\"mb-3 form-check\">\n            <input\n              id=\"rememberMe\"\n              v-model=\"form.rememberMe\"\n              type=\"checkbox\"\n              class=\"form-check-input\"\n            />\n            <label for=\"rememberMe\" class=\"form-check-label\">Ricordami</label>\n          </div>\n        </div>\n\n        <!-- Bottone di avanzamento o login -->\n        <div v-if=\"currentStep < 2\">\n          <button\n            type=\"button\"\n            class=\"btn btn-primary btn-next\"\n            @click=\"goToNextStep\"\n            :disabled=\"!isStepValid(currentStep)\"\n          >\n            Avanti\n          </button>\n        </div>\n\n        <div v-if=\"currentStep === 2\">\n          <button\n            type=\"submit\"\n            class=\"btn btn-primary btn-next\"\n            :disabled=\"loading || !isStepValid(currentStep)\"\n          >\n            <span v-if=\"loading\">Login...</span>\n            <span v-else>Accedi</span>\n          </button>\n          <!-- Error message -->\n          <div v-if=\"errors.general\" class=\"invalid-feedback mt-3\">\n            {{ errors.general }}\n          </div>\n        </div>\n      </form>\n\n      <!-- Step 3: MFA Setup -->\n      <div v-if=\"showMfaStep\">\n        <h2>Set up Google Authenticator</h2>\n        <p>\n          Scan the QR code below with your Google Authenticator app, then enter\n          the code.\n        </p>\n\n        <!-- QR Code Image -->\n        <img\n          :src=\"'data:image/png;base64,' + qrCodeUrl\"\n          alt=\"QR Code for Google Authenticator\"\n        />\n\n        <!-- Input field for MFA code -->\n        <form @submit.prevent=\"onMfaSubmit\">\n          <div class=\"mb-3\">\n            <label for=\"mfaCode\" class=\"form-label\">Enter 6-digit code</label>\n            <input\n              id=\"mfaCode\"\n              v-model=\"mfaCode\"\n              type=\"text\"\n              class=\"form-control\"\n              required\n            />\n          </div>\n          <button type=\"submit\" class=\"btn btn-primary\">Verify Code</button>\n        </form>\n      </div>\n    </div>\n\n    <!-- Loading overlay -->\n    <div v-if=\"loading\" class=\"loading-overlay\">\n      <div class=\"loading-icon\">\n        <img src=\"@/assets/loading-icon.svg\" alt=\"Loading...\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"UserLogin\",\n  setup() {\n    // Stato del form\n    const form = ref({\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    });\n\n    // Stato degli errori\n    const errors = ref({\n      email: \"\",\n      password: \"\",\n      general: \"\",\n    });\n\n    const router = useRouter();\n    const currentStep = ref(1);\n    const loading = ref(false);\n    const showPassword = ref(false);\n    const showMfaStep = ref(false); // Toggle MFA step visibility\n    const qrCodeUrl = ref(\"\"); // Store QR code URL\n    const session = ref(\"\"); // Store MFA session token\n    const mfaCode = ref(\"\"); // Store user input MFA code\n\n    // Funzione per passare allo step successivo\n    const goToNextStep = () => {\n      if (isStepValid(currentStep.value)) {\n        currentStep.value++;\n      }\n    };\n\n    // Funzione per tornare allo step precedente\n    const goToPreviousStep = () => {\n      currentStep.value--;\n    };\n\n    // Funzione per validare il form\n    const validateForm = () => {\n      errors.value = {\n        email: form.value.email ? \"\" : \"Email è richiesta\",\n        password: form.value.password ? \"\" : \"Password è richiesta\",\n      };\n      return Object.values(errors.value).every((error) => !error);\n    };\n\n    // Funzione per validare lo step\n    const isStepValid = (step) => {\n      if (step === 1) {\n        return form.value.email;\n      } else if (step === 2) {\n        return form.value.password;\n      }\n      return false;\n    };\n\n    // Funzione per mostrare/nascondere la password\n    const toggleShowPassword = () => {\n      showPassword.value = !showPassword.value;\n    };\n\n    const onSubmit = async () => {\n      if (!validateForm()) return;\n      loading.value = true;\n\n      try {\n        // Effettua la richiesta POST per il login usando axios\n        const response = await axios.post(\"http://127.0.0.1:5000/login\", {\n          email: form.value.email,\n          password: form.value.password,\n        });\n\n        if (response.data.message === \"MFA setup required\") {\n          // Se è richiesta la configurazione MFA, mostra lo step MFA\n          showMfaStep.value = true;\n          qrCodeUrl.value = response.data.qr_code;\n          session.value = response.data.session;\n        } else if (response.data.message === \"Login successful\") {\n          // Se il login è andato a buon fine e non serve MFA, ridireziona alla WelcomePage\n          router.push({\n            name: \"Welcome\",\n            query: { username: form.value.email }, // Puoi passare l'email come parametro\n          });\n        }\n      } catch (error) {\n        errors.value.general =\n          error.response?.data?.error || \"Errore sconosciuto durante il login\";\n      } finally {\n        loading.value = false;\n      }\n    };\n\n\n    const onMfaSubmit = async () => {\n      loading.value = true;\n      try {\n        // Effettua la richiesta POST per verificare MFA\n        const response = await axios.post(\"http://127.0.0.1:5000/verify-mfa\", {\n          session: session.value,\n          code: mfaCode.value,\n        });\n\n        if (response.data.message === \"MFA verified\") {\n          alert(\"MFA verification successful!\");\n          // Redirect or handle authenticated state here\n        }\n      } catch (error) {\n        errors.value.general =\n          error.response?.data?.error || \"MFA verification failed.\";\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    return {\n      form,\n      currentStep,\n      loading,\n      showPassword,\n      toggleShowPassword,\n      onSubmit,\n      goToNextStep,\n      goToPreviousStep,\n      isStepValid,\n      errors,\n      showMfaStep,\n      qrCodeUrl,\n      session,\n      mfaCode,\n      onMfaSubmit,\n    };\n  },\n};\n</script>\n\n<style scoped>\n.login {\n  background: #ffffff; /* Sfondo bianco */\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 0px 0px rgba(0, 0, 0, 0);\n}\n\n.container {\n  max-width: 600px;\n  padding: 40px;\n  border-radius: 15px;\n  background: #ffffff;\n  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);\n  margin-top: 100px;\n  height: auto;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.back-button {\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  margin-left: -10px;\n}\n\n.back-icon {\n  width: 30px;\n  height: 30px;\n}\n\n.step-title {\n  font-size: 10px;\n  margin-bottom: 10px;\n}\n\nh2 {\n  font-size: 18px;\n  margin-bottom: 30px;\n}\n\n.form-label {\n  font-size: 12px;\n}\n\n.form-control {\n  background: #f2f2f2;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  font-size: 12px;\n}\n\n.input-group {\n  position: relative;\n}\n\n.eye-button {\n  background: transparent;\n  border: 1px solid #ccc;\n  cursor: pointer;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  width: 46px;\n}\n\n.eye-icon {\n  width: 18px;\n  height: 18px;\n  margin: auto;\n}\n\n.btn-next {\n  width: 100%;\n  margin-top: 20px;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(255, 255, 255, 0.8);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.loading-icon {\n  width: 50px;\n  height: 50px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}