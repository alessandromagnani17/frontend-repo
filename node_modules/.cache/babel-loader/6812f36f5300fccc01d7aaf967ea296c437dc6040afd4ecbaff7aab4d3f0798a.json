{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://127.0.0.1:5000\"; // URL backend locale\n//const API_URL = \"http://34.122.99.160:5000\";\n\n// Funzione per la registrazione\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per il login\nexport const loginUser = async loginData => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, loginData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per caricare una radiografia\nexport const uploadRadiograph = async (patientId, file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"patientId\", patientId); // Aggiunto l'ID paziente ai formData\n  console.log(\"PatientID: \" + patientId);\n  try {\n    const response = await axios.post(`${API_URL}/api/patients/${patientId}/radiographs`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    // Aggiungi maggiori dettagli all'errore\n    console.error(\"Errore durante il caricamento:\", error);\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per ottenere i pazienti associati a un dottore specifico\nexport const getPatientsFromDoctor = async doctorId => {\n  try {\n    const response = await axios.get(`/api/${doctorId}/patients`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore:\", error);\n    return [];\n  }\n};\n\n// Funzione per ottenere le radiografie di un paziente\nexport const getRadiographs = async patientId => {\n  try {\n    const response = await axios.get(`${API_URL}/api/patients/${patientId}/radiographs`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\nexport const loadRadiographiesForPatient = async patientId => {\n  try {\n    const response = await axios.get(`${API_URL}/get_radiographs/${patientId}`);\n    return response.data;\n  } catch (error) {\n    console.log(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\n// Funzione per ottenere le informazioni della radiografia da un file info.txt\nexport const getRadiographyInformation = async (uid, idx) => {\n  try {\n    const response = await axios.get(`${API_URL}/get_radiographs_info/${uid}/${idx}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n  }\n};\n\n// Funzione per controllare se l'email è stata verificata\nexport const checkEmailVerification = async email => {\n  try {\n    const response = await axios.post(\"http://127.0.0.1:5000/check-email-verification\", email);\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      switch (error.response.status) {\n        case 403:\n          errors.value.general = \"La tua email non è stata verificata. Verifica la tua email prima di accedere.\";\n          break;\n        case 404:\n          errors.value.general = \"Utente non trovato. Controlla le credenziali.\";\n          break;\n        case 400:\n          errors.value.general = \"Inserire email.\";\n          break;\n        default:\n          errors.value.general = error.response.data.error || \"Errore nella verifica dell'email.\";\n      }\n    } else {\n      errors.value.general = \"Errore di connessione. Riprova più tardi.\";\n    }\n    console.error(\"Errore nella verifica dell'email:\", error);\n    return false;\n  }\n};","map":{"version":3,"names":["axios","API_URL","registerUser","userData","response","post","data","error","Error","message","loginUser","loginData","uploadRadiograph","patientId","file","formData","FormData","append","console","log","headers","getPatientsFromDoctor","doctorId","get","getRadiographs","loadRadiographiesForPatient","getRadiographyInformation","uid","idx","checkEmailVerification","email","status","errors","value","general"],"sources":["C:/Users/Utente/Desktop/osteoarthritis-project/frontend/src/services/api-service.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://127.0.0.1:5000\"; // URL backend locale\n//const API_URL = \"http://34.122.99.160:5000\";\n\n// Funzione per la registrazione\nexport const registerUser = async (userData) => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per il login\nexport const loginUser = async (loginData) => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, loginData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per caricare una radiografia\nexport const uploadRadiograph = async (patientId, file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"patientId\", patientId); // Aggiunto l'ID paziente ai formData\n  console.log(\"PatientID: \" + patientId);\n\n  try {\n    const response = await axios.post(\n      `${API_URL}/api/patients/${patientId}/radiographs`,\n      formData,\n      {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    // Aggiungi maggiori dettagli all'errore\n    console.error(\"Errore durante il caricamento:\", error);\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Funzione per ottenere i pazienti associati a un dottore specifico\nexport const getPatientsFromDoctor = async (doctorId) => {\n  try {\n    const response = await axios.get(`/api/${doctorId}/patients`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore:\", error);\n    return [];\n  }\n};\n\n// Funzione per ottenere le radiografie di un paziente\nexport const getRadiographs = async (patientId) => {\n  try {\n    const response = await axios.get(\n      `${API_URL}/api/patients/${patientId}/radiographs`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\nexport const loadRadiographiesForPatient = async (patientId) => {\n  try {\n    const response = await axios.get(`${API_URL}/get_radiographs/${patientId}`);\n    return response.data;\n  } catch (error) {\n    console.log(\"Errore nel recupero delle radiografie:\", error);\n    throw error;\n  }\n};\n\n// Funzione per ottenere le informazioni della radiografia da un file info.txt\nexport const getRadiographyInformation = async (uid, idx) => {\n  try {\n    const response = await axios.get(\n      `${API_URL}/get_radiographs_info/${uid}/${idx}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Errore nel recupero delle radiografie:\", error);\n  }\n};\n\n// Funzione per controllare se l'email è stata verificata\nexport const checkEmailVerification = async (email) => {\n  try {\n    const response = await axios.post(\n      \"http://127.0.0.1:5000/check-email-verification\",\n      email\n    );\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      switch (error.response.status) {\n        case 403:\n          errors.value.general =\n            \"La tua email non è stata verificata. Verifica la tua email prima di accedere.\";\n          break;\n        case 404:\n          errors.value.general =\n            \"Utente non trovato. Controlla le credenziali.\";\n          break;\n        case 400:\n          errors.value.general = \"Inserire email.\";\n          break;\n        default:\n          errors.value.general =\n            error.response.data.error ||\n            \"Errore nella verifica dell'email.\";\n      }\n    } else {\n      errors.value.general = \"Errore di connessione. Riprova più tardi.\";\n    }\n    console.error(\"Errore nella verifica dell'email:\", error);\n    return false;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}