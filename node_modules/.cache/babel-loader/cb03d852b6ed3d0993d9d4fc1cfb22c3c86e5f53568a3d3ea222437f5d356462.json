{"ast":null,"code":"export default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(),\n      // Mese corrente\n      year: new Date().getFullYear(),\n      // Anno corrente\n      radiographs: [],\n      // Le radiografie caricate\n      operations: [],\n      selectedDay: null,\n      // Giorno selezionato\n      monthNames: [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"],\n      isPatient: false,\n      // Indica se l'utente è un paziente\n      isDoctor: false,\n      // Indica se l'utente è un dottore\n      selectedPatient: null,\n      // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [],\n      // Pazienti associati al dottore\n      showModal: false,\n      // Controlla la visibilità del modale\n      operationDate: \"\",\n      // Data dell'operazione\n      operationTime: \"\",\n      description: \"\",\n      // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0],\n      // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\")\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n      this.loadOperations();\n      this.refreshCalendar();\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      // Crea un array per tenere traccia delle radiografie per ogni giorno\n      const radiographsPerDay = {};\n\n      // Crea un array per tenere traccia delle operazioni per ogni giorno\n      const operationsPerDay = {};\n      if (this.isDoctor) {\n        console.log(\"DEBUG: Utente loggato come medico.\");\n        // Aggrega tutte le radiografie dei pazienti associati al dottore\n        this.patients.forEach(patient => {\n          console.log(`DEBUG: Elaborazione paziente: ${patient.name} ${patient.family_name}`);\n          if (patient.radiographs) {\n            patient.radiographs.forEach(radiograph => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`\n              });\n            });\n          }\n\n          // Debug per le operazioni dei pazienti\n          if (patient.operations) {\n            console.log(`DEBUG: Operazioni del paziente ${patient.name} ${patient.family_name}:`, patient.operations);\n            patient.operations.forEach(operation => {\n              // Conversione esplicita della data\n              if (!operation.operationDate) {\n                console.warn(`DEBUG: Operazione senza data trovata:`, operation);\n                return; // Salta questa operazione\n              }\n\n              // Conversione della data con parsing robusto\n              const operationDate = this.parseISODate(operation.operationDate);\n              console.log(`DEBUG: Data operazione convertita: ${operationDate}, Operazione:`, operation);\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}`\n                });\n              } else {\n                console.warn(`DEBUG: Operazione scartata a causa di una data non valida:`, operation);\n              }\n            });\n          }\n          console.log(\"DEBUG: daysInMonth\", this.daysInMonth);\n        });\n      } else {\n        console.log(\"DEBUG: Utente loggato come paziente.\");\n        // Se l'utente è un paziente, usa le proprie radiografie\n        this.radiographs.forEach(radiograph => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push(radiograph);\n        });\n\n        // Debug per le operazioni del paziente\n        console.log(\"DEBUG: Operazioni del paziente:\", this.operations);\n        this.operations.forEach(operation => {\n          if (!operation.operationDate) {\n            console.warn(\"DEBUG: Operazione senza data trovata:\", operation);\n            return; // Salta questa operazione\n          }\n          const operationDate = this.parseISODate(operation.operationDate);\n          console.log(`DEBUG: Data operazione convertita: ${operationDate}, Operazione:`, operation);\n          if (operationDate !== \"Invalid Date\") {\n            if (!operationsPerDay[operationDate]) {\n              operationsPerDay[operationDate] = [];\n            }\n            operationsPerDay[operationDate].push(operation);\n          } else {\n            console.warn(`DEBUG: Operazione scartata a causa di una data non valida:`, operation);\n          }\n        });\n      }\n\n      // Popola i giorni del mese\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i).toDateString();\n        const radiographsOnDay = radiographsPerDay[dayDate] || [];\n        const operationsOnDay = operationsPerDay[dayDate] || [];\n\n        // Debug per le operazioni aggregate per giorno\n        console.log(`DEBUG: Giorno: ${dayDate}, Operazioni trovate:`, operationsOnDay);\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay\n        });\n      }\n      console.log(\"DEBUG: Struttura finale dei giorni:\", days);\n      return days;\n    }\n  },\n  methods: {\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (!this.selectedPatientId || !this.operationDate || !this.operationTime || !this.description) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(this.operationDate, this.operationTime);\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate,\n            // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString() // Timestamp di creazione\n          })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || \"Errore durante la pianificazione dell'operazione.\");\n        }\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\"Errore durante la pianificazione dell'operazione:\", error);\n        alert(\"Errore: \" + error.message);\n      }\n    },\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(`DEBUG: Errore nella conversione della data ISO \"${isoString}\":`, error);\n        return \"Invalid Date\";\n      }\n    },\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n\n        // Carica le operazioni del paziente loggato\n        this.loadPatientOperations();\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n    // Modifica per caricare le radiografie dei pazienti\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie per ogni paziente\n          this.patients.forEach(patient => {\n            this.loadRadiographs(patient.userId); // Carica le radiografie per ogni paziente\n            this.loadOperations(patient.userId);\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n    async loadOperations(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/operations`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Log delle operazioni trovate\n          console.log(`Operazioni trovate per il paziente con ID ${patientId}:`, data);\n\n          // Trova il paziente e aggiungi le operazioni al suo record\n          const patient = this.patients.find(p => p.userId === patientId);\n          if (patient) {\n            patient.operations = data; // Aggiungi le operazioni al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n    // Modifica per caricare le radiografie specifiche di un paziente\n    async loadRadiographs(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Trova il paziente e aggiungi le radiografie al suo record\n          const patient = this.patients.find(p => p.userId === patientId);\n          if (patient) {\n            patient.radiographs = data; // Aggiungi le radiografie al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    }\n  }\n};","map":{"version":3,"names":["name","data","loadingPrediction","successMessage","month","Date","getMonth","year","getFullYear","radiographs","operations","selectedDay","monthNames","isPatient","isDoctor","selectedPatient","selectedPatientId","patients","showModal","operationDate","operationTime","description","minDate","toISOString","split","operationIcon","require","radiographIcon","mounted","checkUserRole","loadPatients","loadRadiographs","loadOperations","refreshCalendar","computed","daysInMonth","days","lastDayOfMonth","totalDays","getDate","radiographsPerDay","operationsPerDay","console","log","forEach","patient","family_name","radiograph","radiographDate","date","toDateString","push","patientName","operation","warn","parseISODate","i","dayDate","radiographsOnDay","operationsOnDay","methods","openScheduleModal","closeScheduleModal","scheduleOperation","alert","doctorId","localStorage","getItem","selectedDate","today","setHours","formattedDate","combineDateAndTime","response","fetch","method","headers","body","JSON","stringify","patientId","createdAt","ok","error","json","Error","message","showActivityCalendar","isoString","isNaN","time","getMinDate","yyyy","mm","toString","padStart","dd","closeModal","userData","parse","role","userId","loadPatientOperations","find","p","$forceUpdate","showDayDetails","day","enlargeRadiograph","url","modalImageUrl","isModalOpen","changeMonth","direction","beforeEnter","el","style","opacity","enter","done","offsetHeight","transition","leave"],"sources":["/Users/alessandromagnani/Desktop/Università/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/ActivityCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-container\">\n    <h1>Calendario Attività</h1>\n    <button @click=\"openScheduleModal\" class=\"btn btn-primary\">\n      Pianifica Operazione\n    </button>\n\n    <!-- Modale per inserire i dettagli dell'operazione -->\n    <div v-if=\"showModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h2>Pianifica una nuova operazione</h2>\n        <!-- Menu a tendina per selezionare un paziente -->\n        <label for=\"patientSelect\">Seleziona un paziente:</label>\n        <select\n          v-model=\"selectedPatientId\"\n          id=\"patientSelect\"\n          class=\"form-select\"\n        >\n          <option value=\"\" disabled>Seleziona un paziente</option>\n          <option\n            v-for=\"patient in patients\"\n            :key=\"patient.userId\"\n            :value=\"patient.userId\"\n          >\n            {{ patient.name }} {{ patient.family_name }}\n          </option>\n        </select>\n\n        <label for=\"operationDate\">Data dell'operazione:</label>\n        <input\n          type=\"date\"\n          v-model=\"operationDate\"\n          id=\"operationDate\"\n          :min=\"minDate\"\n        />\n\n        <label for=\"operationTime\">Ora dell'operazione:</label>\n        <input type=\"time\" v-model=\"operationTime\" id=\"operationTime\" />\n\n        <label for=\"description\">Descrizione:</label>\n        <textarea v-model=\"description\" id=\"description\"></textarea>\n\n        <button @click=\"scheduleOperation\" class=\"btn btn-success\">\n          Salva\n        </button>\n        <button @click=\"closeScheduleModal\" class=\"btn btn-secondary\">\n          Annulla\n        </button>\n      </div>\n    </div>\n    <!-- Verifica se l'utente è un paziente o un dottore -->\n    <div v-if=\"isPatient\">\n      <div class=\"calendar\">\n        <div class=\"calendar-header\">\n          <button @click=\"changeMonth(-1)\">&#8249;</button>\n          <span>{{ monthNames[month] }} {{ year }}</span>\n          <button @click=\"changeMonth(1)\">&#8250;</button>\n        </div>\n\n        <div class=\"calendar-grid\">\n          <div\n            v-for=\"day in daysInMonth\"\n            :key=\"day.date\"\n            class=\"calendar-day\"\n            @click=\"showDayDetails(day)\"\n          >\n            <!-- Data -->\n            <div class=\"date\">{{ day.date }}</div>\n\n            <!-- Icone Operazioni -->\n            <div class=\"icon-row operations\">\n              <img\n                v-for=\"n in day.operationsCount\"\n                :key=\"'operation-' + n + '-' + day.date\"\n                :src=\"operationIcon\"\n                alt=\"Operazione\"\n                class=\"icon\"\n              />\n            </div>\n\n            <!-- Icone Radiografie -->\n            <div class=\"icon-row radiographs\">\n              <img\n                v-for=\"n in day.radiographsCount\"\n                :key=\"'radiograph-' + n + '-' + day.date\"\n                :src=\"radiographIcon\"\n                alt=\"Radiografia\"\n                class=\"icon\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <p>\n            <strong>Paziente:</strong> {{ selectedPatient.name }}\n            {{ selectedPatient.family_name }}\n          </p>\n          <div v-if=\"selectedDay.radiographs.length > 0\">\n            <h3>Radiografie caricate:</h3>\n            <ul>\n              <li\n                v-for=\"radiograph in selectedDay.radiographs\"\n                :key=\"radiograph.name\"\n              >\n                <strong>{{ radiograph.name }}</strong\n                ><br />\n                <span>{{ radiograph.date }}</span\n                ><br />\n                <button @click=\"enlargeRadiograph(radiograph.url)\">\n                  Visualizza Immagine\n                </button>\n              </li>\n            </ul>\n          </div>\n          <div v-else>\n            <p>Nessuna radiografia caricata per questa data.</p>\n          </div>\n        </div>\n      </transition>\n    </div>\n\n    <!-- Se l'utente è un dottore, visualizza tutte le radiografie dei pazienti -->\n    <div v-else>\n      <div v-if=\"isDoctor\">\n        <div class=\"calendar\">\n          <div class=\"calendar-header\">\n            <button @click=\"changeMonth(-1)\">&#8249;</button>\n            <span>{{ monthNames[month] }} {{ year }}</span>\n            <button @click=\"changeMonth(1)\">&#8250;</button>\n          </div>\n\n          <div class=\"calendar-grid\">\n            <div\n              v-for=\"day in daysInMonth\"\n              :key=\"day.date\"\n              class=\"calendar-day\"\n              @click=\"showDayDetails(day)\"\n            >\n              <!-- Data -->\n              <div class=\"date\">{{ day.date }}</div>\n\n              <!-- Icone Operazioni -->\n              <div class=\"icon-row operations\">\n                <img\n                  v-for=\"n in day.operationsCount\"\n                  :key=\"'operation-' + n + '-' + day.date\"\n                  :src=\"operationIcon\"\n                  alt=\"Operazione\"\n                  class=\"icon\"\n                />\n              </div>\n\n              <!-- Icone Radiografie -->\n              <div class=\"icon-row radiographs\">\n                <img\n                  v-for=\"n in day.radiographsCount\"\n                  :key=\"'radiograph-' + n + '-' + day.date\"\n                  :src=\"radiographIcon\"\n                  alt=\"Radiografia\"\n                  class=\"icon\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dettagli del giorno selezionato con animazione -->\n      <transition\n        name=\"fade\"\n        @before-enter=\"beforeEnter\"\n        @enter=\"enter\"\n        @leave=\"leave\"\n      >\n        <div v-if=\"selectedDay\" class=\"day-details\">\n          <h2>\n            Dettagli del Giorno: {{ selectedDay.date }} {{ monthNames[month] }}\n            {{ year }}\n          </h2>\n          <div\n            v-for=\"radiograph in selectedDay.radiographs\"\n            :key=\"radiograph.name\"\n          >\n            <p>\n              <strong>{{ radiograph.patientName }}:</strong>\n              {{ radiograph.name }}\n            </p>\n            <button @click=\"enlargeRadiograph(radiograph.url)\">\n              Visualizza Immagine\n            </button>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ActivityCalendar\",\n  data() {\n    return {\n      loadingPrediction: false,\n      successMessage: \"\",\n      month: new Date().getMonth(), // Mese corrente\n      year: new Date().getFullYear(), // Anno corrente\n      radiographs: [], // Le radiografie caricate\n      operations: [],\n      selectedDay: null, // Giorno selezionato\n      monthNames: [\n        \"Gennaio\",\n        \"Febbraio\",\n        \"Marzo\",\n        \"Aprile\",\n        \"Maggio\",\n        \"Giugno\",\n        \"Luglio\",\n        \"Agosto\",\n        \"Settembre\",\n        \"Ottobre\",\n        \"Novembre\",\n        \"Dicembre\",\n      ],\n      isPatient: false, // Indica se l'utente è un paziente\n      isDoctor: false, // Indica se l'utente è un dottore\n      selectedPatient: null, // Paziente selezionato (loggato)\n      selectedPatientId: \"\",\n      patients: [], // Pazienti associati al dottore\n      showModal: false, // Controlla la visibilità del modale\n      operationDate: \"\", // Data dell'operazione\n      operationTime: \"\",\n      description: \"\", // Descrizione dell'operazione\n      minDate: new Date().toISOString().split(\"T\")[0], // Data minima (oggi)\n      operationIcon: require(\"@/assets/operation-icon.png\"),\n      radiographIcon: require(\"@/assets/radiograph-icon.png\"),\n    };\n  },\n  mounted() {\n    this.checkUserRole();\n    if (this.isDoctor) {\n      this.loadPatients(); // Carica i pazienti del dottore\n    }\n    if (this.isPatient) {\n      this.loadRadiographs(); // Carica le radiografie del paziente loggato\n      this.loadOperations();\n      this.refreshCalendar();\n    }\n  },\n  computed: {\n    daysInMonth() {\n      const days = [];\n      const lastDayOfMonth = new Date(this.year, this.month + 1, 0);\n      const totalDays = lastDayOfMonth.getDate();\n\n      // Crea un array per tenere traccia delle radiografie per ogni giorno\n      const radiographsPerDay = {};\n\n      // Crea un array per tenere traccia delle operazioni per ogni giorno\n      const operationsPerDay = {};\n\n      if (this.isDoctor) {\n        console.log(\"DEBUG: Utente loggato come medico.\");\n        // Aggrega tutte le radiografie dei pazienti associati al dottore\n        this.patients.forEach((patient) => {\n          console.log(\n            `DEBUG: Elaborazione paziente: ${patient.name} ${patient.family_name}`\n          );\n          if (patient.radiographs) {\n            patient.radiographs.forEach((radiograph) => {\n              const radiographDate = new Date(radiograph.date).toDateString();\n              if (!radiographsPerDay[radiographDate]) {\n                radiographsPerDay[radiographDate] = [];\n              }\n              radiographsPerDay[radiographDate].push({\n                ...radiograph,\n                patientName: `${patient.name} ${patient.family_name}`,\n              });\n            });\n          }\n\n          // Debug per le operazioni dei pazienti\n          if (patient.operations) {\n            console.log(\n              `DEBUG: Operazioni del paziente ${patient.name} ${patient.family_name}:`,\n              patient.operations\n            );\n            patient.operations.forEach((operation) => {\n              // Conversione esplicita della data\n              if (!operation.operationDate) {\n                console.warn(\n                  `DEBUG: Operazione senza data trovata:`,\n                  operation\n                );\n                return; // Salta questa operazione\n              }\n\n              // Conversione della data con parsing robusto\n              const operationDate = this.parseISODate(operation.operationDate);\n              console.log(\n                `DEBUG: Data operazione convertita: ${operationDate}, Operazione:`,\n                operation\n              );\n\n              if (operationDate !== \"Invalid Date\") {\n                if (!operationsPerDay[operationDate]) {\n                  operationsPerDay[operationDate] = [];\n                }\n                operationsPerDay[operationDate].push({\n                  ...operation,\n                  patientName: `${patient.name} ${patient.family_name}`,\n                });\n              } else {\n                console.warn(\n                  `DEBUG: Operazione scartata a causa di una data non valida:`,\n                  operation\n                );\n              }\n            });\n          }\n          console.log(\"DEBUG: daysInMonth\", this.daysInMonth);\n        });\n      } else {\n        console.log(\"DEBUG: Utente loggato come paziente.\");\n        // Se l'utente è un paziente, usa le proprie radiografie\n        this.radiographs.forEach((radiograph) => {\n          const radiographDate = new Date(radiograph.date).toDateString();\n          if (!radiographsPerDay[radiographDate]) {\n            radiographsPerDay[radiographDate] = [];\n          }\n          radiographsPerDay[radiographDate].push(radiograph);\n        });\n\n        // Debug per le operazioni del paziente\n        console.log(\"DEBUG: Operazioni del paziente:\", this.operations);\n        this.operations.forEach((operation) => {\n          if (!operation.operationDate) {\n            console.warn(\"DEBUG: Operazione senza data trovata:\", operation);\n            return; // Salta questa operazione\n          }\n\n          const operationDate = this.parseISODate(operation.operationDate);\n          console.log(\n            `DEBUG: Data operazione convertita: ${operationDate}, Operazione:`,\n            operation\n          );\n\n          if (operationDate !== \"Invalid Date\") {\n            if (!operationsPerDay[operationDate]) {\n              operationsPerDay[operationDate] = [];\n            }\n            operationsPerDay[operationDate].push(operation);\n          } else {\n            console.warn(\n              `DEBUG: Operazione scartata a causa di una data non valida:`,\n              operation\n            );\n          }\n        });\n      }\n\n      // Popola i giorni del mese\n      for (let i = 1; i <= totalDays; i++) {\n        const dayDate = new Date(this.year, this.month, i).toDateString();\n        const radiographsOnDay = radiographsPerDay[dayDate] || [];\n        const operationsOnDay = operationsPerDay[dayDate] || [];\n\n        // Debug per le operazioni aggregate per giorno\n        console.log(\n          `DEBUG: Giorno: ${dayDate}, Operazioni trovate:`,\n          operationsOnDay\n        );\n\n        days.push({\n          date: i,\n          radiographs: radiographsOnDay,\n          operations: operationsOnDay,\n        });\n      }\n\n      console.log(\"DEBUG: Struttura finale dei giorni:\", days);\n      return days;\n    },\n  },\n  methods: {\n    openScheduleModal() {\n      this.showModal = true;\n    },\n    // Chiude il modale\n    closeScheduleModal() {\n      this.showModal = false;\n      this.operationDate = \"\";\n      this.description = \"\";\n    },\n    async scheduleOperation() {\n      try {\n        // Controlla che i campi non siano vuoti\n        if (\n          !this.selectedPatientId ||\n          !this.operationDate ||\n          !this.operationTime ||\n          !this.description\n        ) {\n          alert(\"Data, ora o descrizione mancanti.\");\n          return;\n        }\n\n        // Recupera l'ID del dottore e del paziente\n        const doctorId = localStorage.getItem(\"doctorId\");\n\n        // Verifica che la data selezionata non sia nel passato\n        const selectedDate = new Date(this.operationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Rimuove l'ora dalla data corrente\n        if (selectedDate < today) {\n          alert(\"La data deve essere futura!\");\n          return;\n        }\n\n        // Combinare la data e l'ora\n        const formattedDate = this.combineDateAndTime(\n          this.operationDate,\n          this.operationTime\n        );\n\n        // Chiamata al backend per salvare l'operazione\n        const response = await fetch(\"/api/operations\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            doctorId,\n            patientId: this.selectedPatientId,\n            operationDate: formattedDate, // Invio la data + ora combinata\n            description: this.description,\n            createdAt: new Date().toISOString(), // Timestamp di creazione\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.message || \"Errore durante la pianificazione dell'operazione.\"\n          );\n        }\n\n        await response.json();\n        alert(\"Operazione pianificata con successo!\");\n\n        // Mostra il calendario delle attività\n        this.showActivityCalendar();\n\n        // Chiudi il modal\n        this.closeScheduleModal();\n      } catch (error) {\n        console.error(\n          \"Errore durante la pianificazione dell'operazione:\",\n          error\n        );\n        alert(\"Errore: \" + error.message);\n      }\n    },\n\n    parseISODate(isoString) {\n      try {\n        if (!isoString) {\n          throw new Error(\"La stringa della data è undefined o vuota\");\n        }\n        const date = new Date(isoString);\n        if (isNaN(date)) {\n          throw new Error(\"Formato della data non valido\");\n        }\n        return date.toDateString(); // Restituisce una stringa coerente con dayDate\n      } catch (error) {\n        console.error(\n          `DEBUG: Errore nella conversione della data ISO \"${isoString}\":`,\n          error\n        );\n        return \"Invalid Date\";\n      }\n    },\n\n    // Funzione per combinare la data e l'ora in un formato compatibile con Firebase (YYYY-MM-DDTHH:MM:SS)\n    combineDateAndTime(date, time) {\n      return `${date}T${time}:00`; // Combina la data e l'ora in formato corretto\n    },\n\n    // Funzione per ottenere la data minima per l'input (oggi)\n    getMinDate() {\n      const today = new Date();\n      const yyyy = today.getFullYear();\n      const mm = (today.getMonth() + 1).toString().padStart(2, \"0\");\n      const dd = today.getDate().toString().padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    },\n\n    // Chiude il modal\n    closeModal() {\n      this.showModal = false;\n    },\n\n    // Mostra il calendario delle attività\n    showActivityCalendar() {\n      // Logica per visualizzare il calendario\n      this.selectedDay = null; // Resetta la selezione del giorno\n      this.loadPatients(); // Ricarica i pazienti per aggiornare il calendario\n      alert(\"Calendario aggiornato!\"); // Messaggio temporaneo\n    },\n\n    checkUserRole() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (userData && userData.role === \"patient\") {\n        this.isPatient = true;\n        this.patientId = userData.userId; // Recupera l'ID del paziente\n        this.selectedPatient = userData; // Imposta il paziente selezionato\n\n        // Carica le operazioni del paziente loggato\n        this.loadPatientOperations();\n      } else if (userData && userData.role === \"doctor\") {\n        this.isDoctor = true;\n        console.log(\"Ruolo utente: Dottore\");\n      }\n    },\n\n    // Modifica per caricare le radiografie dei pazienti\n    async loadPatients() {\n      const doctorId = localStorage.getItem(\"doctorId\");\n      if (doctorId) {\n        try {\n          const response = await fetch(`/api/${doctorId}/patients`);\n          const data = await response.json();\n          this.patients = data;\n\n          // Carica le radiografie per ogni paziente\n          this.patients.forEach((patient) => {\n            this.loadRadiographs(patient.userId); // Carica le radiografie per ogni paziente\n            this.loadOperations(patient.userId);\n          });\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      }\n    },\n\n    async loadOperations(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/operations`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Log delle operazioni trovate\n          console.log(\n            `Operazioni trovate per il paziente con ID ${patientId}:`,\n            data\n          );\n\n          // Trova il paziente e aggiungi le operazioni al suo record\n          const patient = this.patients.find((p) => p.userId === patientId);\n          if (patient) {\n            patient.operations = data; // Aggiungi le operazioni al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle operazioni\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    // Modifica per caricare le radiografie specifiche di un paziente\n    async loadRadiographs(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/radiographs`);\n        if (response.ok) {\n          const data = await response.json();\n\n          // Trova il paziente e aggiungi le radiografie al suo record\n          const patient = this.patients.find((p) => p.userId === patientId);\n          if (patient) {\n            patient.radiographs = data; // Aggiungi le radiografie al paziente\n          }\n        } else {\n          console.error(\"Errore nel recupero delle radiografie\");\n        }\n      } catch (error) {\n        console.error(\"Errore di connessione al server:\", error);\n      }\n    },\n\n    refreshCalendar() {\n      this.$forceUpdate(); // Forza l'aggiornamento del componente\n    },\n\n    showDayDetails(day) {\n      if (this.selectedDay && this.selectedDay.date === day.date) {\n        this.selectedDay = null;\n      } else {\n        this.selectedDay = day;\n      }\n      console.log(`Giorno selezionato: ${day.date}`);\n    },\n\n    enlargeRadiograph(url) {\n      this.modalImageUrl = url;\n      this.isModalOpen = true;\n    },\n\n    changeMonth(direction) {\n      if (direction === 1) {\n        if (this.month === 11) {\n          this.month = 0;\n          this.year++;\n        } else {\n          this.month++;\n        }\n      } else {\n        if (this.month === 0) {\n          this.month = 11;\n          this.year--;\n        } else {\n          this.month--;\n        }\n      }\n    },\n\n    // Animazioni di transizione\n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      el.offsetHeight; // trigger reflow\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = \"opacity 0.5s ease\";\n      el.style.opacity = 0;\n      done();\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Stili generali per il calendario */\n.calendar-container {\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n}\n\n.calendar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.calendar-day {\n  position: relative;\n  padding: 10px;\n  border: 1px solid #ddd;\n  height: 100px;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.date {\n  font-size: 1.2em;\n}\n\n.activity-icons {\n  display: flex;\n  flex-direction: column; /* Cambia la direzione per impilare le righe */\n  align-items: center;\n  gap: 10px; /* Spazio tra righe */\n  margin-top: 5px;\n}\n\n.icon-row {\n  display: flex;\n  justify-content: center;\n  gap: 2px; /* Spazio tra le icone nella stessa riga */\n}\n\n.icon {\n  width: 10px;\n  height: 10px;\n}\n\nbutton {\n  cursor: pointer;\n  background: none;\n  border: none;\n  font-size: 0.7em;\n}\n\nbutton:hover {\n  color: #007bff;\n}\n\n/* Animazione della transizione */\n.day-details {\n  margin-top: 20px;\n  text-align: left;\n  transition: opacity 0.5s ease;\n}\n\n.day-details h2 {\n  font-size: 1em;\n  margin-bottom: 10px;\n}\n\n.day-details p {\n  font-size: 0.7em;\n  margin-bottom: 10px;\n}\n\n.day-details ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.day-details li {\n  margin-bottom: 10px;\n}\n\n.day-details button {\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n\n/* Transizione Fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s ease;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 400px;\n  text-align: center;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 10px;\n  text-align: left;\n}\n\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 20px;\n}\n\n.btn {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}