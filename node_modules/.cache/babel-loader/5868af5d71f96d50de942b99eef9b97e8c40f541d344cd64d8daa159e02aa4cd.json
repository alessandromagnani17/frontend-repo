{"ast":null,"code":"import PatientRadiographs from \"./PatientRadiographs.vue\";\nimport UploadRadiograph from \"./UploadRadiographs.vue\";\nimport { ref, onMounted } from \"vue\";\nimport { getPatientsFromDoctor, getRadiographs } from \"../services/api-service\";\nexport default {\n  components: {\n    PatientRadiographs,\n    UploadRadiograph\n  },\n  setup() {\n    const patients = ref([]);\n    const selectedPatient = ref(null);\n    const selectedPatientRadiographs = ref([]);\n\n    // Ottieni il DoctorID dal localStorage\n    const doctorId = localStorage.getItem(\"doctorId\");\n    onMounted(async () => {\n      console.log(\"Cerco pazienti associati a: \" + doctorId);\n      if (doctorId) {\n        // Ottieni i pazienti associati\n        try {\n          patients.value = await getPatientsFromDoctor(doctorId);\n          console.log(\"patients.value: \", patients.value); // Stampa dopo l'assegnazione\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      } else {\n        console.error(\"Nessun DoctorID trovato nel localStorage.\");\n      }\n    });\n\n    // Seleziona un paziente e ottieni le sue radiografie\n    const selectPatient = async patient => {\n      console.log(\"Paziente selezionato:\", patient); // Log del paziente selezionato\n      selectedPatient.value = patient;\n\n      // Usa userId al posto di id\n      if (!patient.userId) {\n        console.error(\"ID paziente non trovato.\"); // Log dell'errore\n        return;\n      }\n      try {\n        // Imposta le radiografie su un array vuoto se non ci sono radiografie\n        selectedPatientRadiographs.value = (await getRadiographs(patient.userId)) || []; // Cambiato da patient.id a patient.userId\n        console.log(\"Radiografie caricate:\", selectedPatientRadiographs.value); // Log delle radiografie caricate\n      } catch (error) {\n        console.error(\"Errore nel caricamento delle radiografie per il paziente:\", error);\n      }\n    };\n    const handleUploadSuccess = () => {\n      selectPatient(selectedPatient.value); // Ricarica le radiografie\n    };\n    return {\n      patients,\n      selectPatient,\n      handleUploadSuccess,\n      selectedPatient,\n      selectedPatientRadiographs\n    };\n  }\n};","map":{"version":3,"names":["PatientRadiographs","UploadRadiograph","ref","onMounted","getPatientsFromDoctor","getRadiographs","components","setup","patients","selectedPatient","selectedPatientRadiographs","doctorId","localStorage","getItem","console","log","value","error","selectPatient","patient","userId","handleUploadSuccess"],"sources":["/Users/alessandromagnani/Desktop/UniversitaÌ€/applicazioni-e-servizi-web/osteoarthritis-project/frontend/src/components/DoctorDashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Dashboard Dottore</h1>\n\n    <div v-if=\"patients.length > 0\">\n      <h2>Elenco Pazienti</h2>\n      <ul>\n        <li\n          v-for=\"patient in patients\"\n          :key=\"patient.userId\"\n          @click=\"selectPatient(patient)\"\n          style=\"cursor: pointer; text-decoration: underline\"\n        >\n          {{ patient.name }} {{ patient.family_name }}\n        </li>\n      </ul>\n    </div>\n    <div v-else>\n      <p>Nessun paziente associato trovato.</p>\n    </div>\n\n    <div v-if=\"selectedPatient\">\n      <h2>Dettagli Paziente</h2>\n      <div>\n        <p><strong>Nome:</strong> {{ selectedPatient.name }}</p>\n        <p><strong>Cognome:</strong> {{ selectedPatient.family_name }}</p>\n        <p><strong>Email:</strong> {{ selectedPatient.email }}</p>\n        <p><strong>Data di nascita:</strong> {{ selectedPatient.birthdate }}</p>\n        <p>\n          <strong>Numero di telefono:</strong> {{ selectedPatient.phoneNumber }}\n        </p>\n        <p><strong>Indirizzo:</strong> {{ selectedPatient.address }}</p>\n        <!-- Aggiungi qui ulteriori attributi del paziente se necessario -->\n      </div>\n\n      <UploadRadiograph\n        @uploadSuccess=\"handleUploadSuccess\"\n        :patientId=\"selectedPatient.userId\"\n      />\n\n      <PatientRadiographs\n        :radiographs=\"radiographs\"\n        :patientId=\"selectedPatientId\" \n        :patientName=\"selectedPatientName\"  \n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport PatientRadiographs from \"./PatientRadiographs.vue\";\nimport UploadRadiograph from \"./UploadRadiographs.vue\";\nimport { ref, onMounted } from \"vue\";\nimport { getPatientsFromDoctor, getRadiographs } from \"../services/api-service\";\n\nexport default {\n  components: {\n    PatientRadiographs,\n    UploadRadiograph,\n  },\n  setup() {\n    const patients = ref([]);\n    const selectedPatient = ref(null);\n    const selectedPatientRadiographs = ref([]);\n\n    // Ottieni il DoctorID dal localStorage\n    const doctorId = localStorage.getItem(\"doctorId\");\n\n    onMounted(async () => {\n      console.log(\"Cerco pazienti associati a: \" + doctorId);\n      if (doctorId) {\n        // Ottieni i pazienti associati\n        try {\n          patients.value = await getPatientsFromDoctor(doctorId);\n          console.log(\"patients.value: \", patients.value); // Stampa dopo l'assegnazione\n        } catch (error) {\n          console.error(\"Errore nel caricamento dei pazienti:\", error);\n        }\n      } else {\n        console.error(\"Nessun DoctorID trovato nel localStorage.\");\n      }\n    });\n\n    // Seleziona un paziente e ottieni le sue radiografie\n    const selectPatient = async (patient) => {\n      console.log(\"Paziente selezionato:\", patient); // Log del paziente selezionato\n      selectedPatient.value = patient;\n\n      // Usa userId al posto di id\n      if (!patient.userId) {\n        console.error(\"ID paziente non trovato.\"); // Log dell'errore\n        return;\n      }\n\n      try {\n        // Imposta le radiografie su un array vuoto se non ci sono radiografie\n        selectedPatientRadiographs.value =\n          (await getRadiographs(patient.userId)) || []; // Cambiato da patient.id a patient.userId\n        console.log(\"Radiografie caricate:\", selectedPatientRadiographs.value); // Log delle radiografie caricate\n      } catch (error) {\n        console.error(\n          \"Errore nel caricamento delle radiografie per il paziente:\",\n          error\n        );\n      }\n    };\n\n    const handleUploadSuccess = () => {\n      selectPatient(selectedPatient.value); // Ricarica le radiografie\n    };\n\n    return {\n      patients,\n      selectPatient,\n      handleUploadSuccess,\n      selectedPatient,\n      selectedPatientRadiographs,\n    };\n  },\n};\n</script>\n\n<style scoped>\n/* Puoi aggiungere qui il tuo stile personalizzato per la dashboard */\n</style>\n"],"mappings":"AAkDA,OAAOA,kBAAiB,MAAO,0BAA0B;AACzD,OAAOC,gBAAe,MAAO,yBAAyB;AACtD,SAASC,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,SAASC,qBAAqB,EAAEC,cAAa,QAAS,yBAAyB;AAE/E,eAAe;EACbC,UAAU,EAAE;IACVN,kBAAkB;IAClBC;EACF,CAAC;EACDM,KAAKA,CAAA,EAAG;IACN,MAAMC,QAAO,GAAIN,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMO,eAAc,GAAIP,GAAG,CAAC,IAAI,CAAC;IACjC,MAAMQ,0BAAyB,GAAIR,GAAG,CAAC,EAAE,CAAC;;IAE1C;IACA,MAAMS,QAAO,GAAIC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAEjDV,SAAS,CAAC,YAAY;MACpBW,OAAO,CAACC,GAAG,CAAC,8BAA6B,GAAIJ,QAAQ,CAAC;MACtD,IAAIA,QAAQ,EAAE;QACZ;QACA,IAAI;UACFH,QAAQ,CAACQ,KAAI,GAAI,MAAMZ,qBAAqB,CAACO,QAAQ,CAAC;UACtDG,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEP,QAAQ,CAACQ,KAAK,CAAC,EAAE;QACnD,EAAE,OAAOC,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC9D;MACF,OAAO;QACLH,OAAO,CAACG,KAAK,CAAC,2CAA2C,CAAC;MAC5D;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,aAAY,GAAI,MAAOC,OAAO,IAAK;MACvCL,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEI,OAAO,CAAC,EAAE;MAC/CV,eAAe,CAACO,KAAI,GAAIG,OAAO;;MAE/B;MACA,IAAI,CAACA,OAAO,CAACC,MAAM,EAAE;QACnBN,OAAO,CAACG,KAAK,CAAC,0BAA0B,CAAC,EAAE;QAC3C;MACF;MAEA,IAAI;QACF;QACAP,0BAA0B,CAACM,KAAI,GAC7B,CAAC,MAAMX,cAAc,CAACc,OAAO,CAACC,MAAM,CAAC,KAAK,EAAE,EAAE;QAChDN,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEL,0BAA0B,CAACM,KAAK,CAAC,EAAE;MAC1E,EAAE,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CACX,2DAA2D,EAC3DA,KACF,CAAC;MACH;IACF,CAAC;IAED,MAAMI,mBAAkB,GAAIA,CAAA,KAAM;MAChCH,aAAa,CAACT,eAAe,CAACO,KAAK,CAAC,EAAE;IACxC,CAAC;IAED,OAAO;MACLR,QAAQ;MACRU,aAAa;MACbG,mBAAmB;MACnBZ,eAAe;MACfC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}